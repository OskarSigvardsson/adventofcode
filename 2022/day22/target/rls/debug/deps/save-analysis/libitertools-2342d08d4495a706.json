{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5","program":"/Users/oskarsigvardsson/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rls","arguments":["--crate-name","itertools","/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","-C","metadata=2342d08d4495a706","-C","extra-filename=-2342d08d4495a706","--out-dir","/Users/oskarsigvardsson/Programming/advent/2022/day22/target/rls/debug/deps","-L","dependency=/Users/oskarsigvardsson/Programming/advent/2022/day22/target/rls/debug/deps","--extern","either=/Users/oskarsigvardsson/Programming/advent/2022/day22/target/rls/debug/deps/libeither-17742315a0bbb935.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/oskarsigvardsson/.rustup/toolchains/stable-aarch64-apple-darwin"],"output":"/Users/oskarsigvardsson/Programming/advent/2022/day22/target/rls/debug/deps/libitertools-2342d08d4495a706.rmeta"},"prelude":{"crate_id":{"name":"itertools","disambiguator":[6966490737200518682,0]},"crate_root":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src","external_crates":[{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[16128539464339909492,0]}},{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5119190964148522055,0]}},{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10836880961308110442,0]}},{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[9122960886372739080,0]}},{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[16262469955255852816,0]}},{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6458319553461162962,0]}},{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[12001007181761242293,0]}},{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17631836945948346775,0]}},{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[14397519445266417684,0]}},{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8668729914222175237,0]}},{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","num":11,"id":{"name":"adler","disambiguator":[6081650140881955662,0]}},{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[5498968616666872476,0]}},{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[2537156866219993108,0]}},{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[16178185567501436822,0]}},{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[3784531562979233881,0]}},{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","num":16,"id":{"name":"gimli","disambiguator":[17755498883195052578,0]}},{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","num":17,"id":{"name":"object","disambiguator":[11111166150786070161,0]}},{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","num":18,"id":{"name":"memchr","disambiguator":[518337477295170700,0]}},{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[6962753159787162907,0]}},{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","num":20,"id":{"name":"either","disambiguator":[9064532153602506779,0]}}],"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":0,"byte_end":56489,"line_start":1,"line_end":1738,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":20,"index":237},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":461,"byte_end":467,"line_start":20,"line_end":20,"column_start":17,"column_end":23},"alias_span":null,"name":"Either","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":460},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":696,"byte_end":701,"line_start":34,"line_end":34,"column_start":9,"column_end":14},"alias_span":null,"name":"Dedup","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1574},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":711,"byte_end":721,"line_start":35,"line_end":35,"column_start":9,"column_end":19},"alias_span":null,"name":"Interleave","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1588},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":731,"byte_end":749,"line_start":36,"line_end":36,"column_start":9,"column_end":27},"alias_span":null,"name":"InterleaveShortest","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1622},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":759,"byte_end":766,"line_start":37,"line_end":37,"column_start":9,"column_end":16},"alias_span":null,"name":"Product","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1602},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":776,"byte_end":783,"line_start":38,"line_end":38,"column_start":9,"column_end":16},"alias_span":null,"name":"PutBack","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1612},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":793,"byte_end":801,"line_start":39,"line_end":39,"column_start":9,"column_end":17},"alias_span":null,"name":"PutBackN","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1637},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":811,"byte_end":819,"line_start":40,"line_end":40,"column_start":9,"column_end":17},"alias_span":null,"name":"Batching","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1647},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":829,"byte_end":833,"line_start":41,"line_end":41,"column_start":9,"column_end":13},"alias_span":null,"name":"Step","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":592},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":843,"byte_end":853,"line_start":42,"line_end":42,"column_start":9,"column_end":19},"alias_span":null,"name":"MapResults","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":387},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":863,"byte_end":868,"line_start":43,"line_end":43,"column_start":9,"column_end":14},"alias_span":null,"name":"Merge","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":408},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":878,"byte_end":885,"line_start":44,"line_end":44,"column_start":9,"column_end":16},"alias_span":null,"name":"MergeBy","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1563},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":895,"byte_end":904,"line_start":45,"line_end":45,"column_start":9,"column_end":18},"alias_span":null,"name":"MultiPeek","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":480},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":914,"byte_end":926,"line_start":46,"line_end":46,"column_start":9,"column_end":21},"alias_span":null,"name":"TakeWhileRef","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1672},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":936,"byte_end":945,"line_start":47,"line_end":47,"column_start":9,"column_end":18},"alias_span":null,"name":"WhileSome","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":439},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":955,"byte_end":963,"line_start":48,"line_end":48,"column_start":9,"column_end":17},"alias_span":null,"name":"Coalesce","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1681},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":973,"byte_end":990,"line_start":49,"line_end":49,"column_start":9,"column_end":26},"alias_span":null,"name":"TupleCombinations","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":542},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1000,"byte_end":1012,"line_start":50,"line_end":50,"column_start":9,"column_end":21},"alias_span":null,"name":"Combinations","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1794},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1022,"byte_end":1028,"line_start":51,"line_end":51,"column_start":9,"column_end":15},"alias_span":null,"name":"Unique","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1781},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1038,"byte_end":1046,"line_start":52,"line_end":52,"column_start":9,"column_end":17},"alias_span":null,"name":"UniqueBy","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1801},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1056,"byte_end":1063,"line_start":53,"line_end":53,"column_start":9,"column_end":16},"alias_span":null,"name":"Flatten","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":613},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1073,"byte_end":1082,"line_start":54,"line_end":54,"column_start":9,"column_end":18},"alias_span":null,"name":"Positions","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":714},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1121,"byte_end":1131,"line_start":56,"line_end":56,"column_start":31,"column_end":41},"alias_span":null,"name":"ConsTuples","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1964},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1154,"byte_end":1160,"line_start":57,"line_end":57,"column_start":22,"column_end":28},"alias_span":null,"name":"Format","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":760},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1162,"byte_end":1172,"line_start":57,"line_end":57,"column_start":30,"column_end":40},"alias_span":null,"name":"FormatWith","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":912},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1201,"byte_end":1211,"line_start":58,"line_end":58,"column_start":27,"column_end":37},"alias_span":null,"name":"IntoChunks","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":936},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1213,"byte_end":1218,"line_start":58,"line_end":58,"column_start":39,"column_end":44},"alias_span":null,"name":"Chunk","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":926},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1220,"byte_end":1226,"line_start":58,"line_end":58,"column_start":46,"column_end":52},"alias_span":null,"name":"Chunks","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":851},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1228,"byte_end":1235,"line_start":58,"line_end":58,"column_start":54,"column_end":61},"alias_span":null,"name":"GroupBy","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":889},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1237,"byte_end":1242,"line_start":58,"line_end":58,"column_start":63,"column_end":68},"alias_span":null,"name":"Group","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":875},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1244,"byte_end":1250,"line_start":58,"line_end":58,"column_start":70,"column_end":76},"alias_span":null,"name":"Groups","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":2011},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1278,"byte_end":1289,"line_start":59,"line_end":59,"column_start":26,"column_end":37},"alias_span":null,"name":"Intersperse","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":995},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1317,"byte_end":1323,"line_start":60,"line_end":60,"column_start":27,"column_end":33},"alias_span":null,"name":"KMerge","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1012},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1325,"byte_end":1333,"line_start":60,"line_end":60,"column_start":35,"column_end":43},"alias_span":null,"name":"KMergeBy","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":2044},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1358,"byte_end":1366,"line_start":61,"line_end":61,"column_start":23,"column_end":31},"alias_span":null,"name":"PadUsing","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1087},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1400,"byte_end":1416,"line_start":62,"line_end":62,"column_start":33,"column_end":49},"alias_span":null,"name":"PeekingTakeWhile","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1105},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1452,"byte_end":1466,"line_start":63,"line_end":63,"column_start":35,"column_end":49},"alias_span":null,"name":"ProcessResults","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1136},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1493,"byte_end":1499,"line_start":64,"line_end":64,"column_start":26,"column_end":32},"alias_span":null,"name":"RcIter","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1160},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1522,"byte_end":1529,"line_start":65,"line_end":65,"column_start":22,"column_end":29},"alias_span":null,"name":"RepeatN","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1201},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1553,"byte_end":1563,"line_start":66,"line_end":66,"column_start":23,"column_end":33},"alias_span":null,"name":"RepeatCall","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":2102},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1565,"byte_end":1571,"line_start":66,"line_end":66,"column_start":35,"column_end":41},"alias_span":null,"name":"Unfold","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":2111},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1573,"byte_end":1580,"line_start":66,"line_end":66,"column_start":43,"column_end":50},"alias_span":null,"name":"Iterate","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1259},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1600,"byte_end":1603,"line_start":67,"line_end":67,"column_start":18,"column_end":21},"alias_span":null,"name":"Tee","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1276},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1630,"byte_end":1641,"line_start":68,"line_end":68,"column_start":26,"column_end":37},"alias_span":null,"name":"TupleBuffer","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1308},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1643,"byte_end":1655,"line_start":68,"line_end":68,"column_start":39,"column_end":51},"alias_span":null,"name":"TupleWindows","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1291},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1657,"byte_end":1663,"line_start":68,"line_end":68,"column_start":53,"column_end":59},"alias_span":null,"name":"Tuples","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":1342},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1693,"byte_end":1705,"line_start":69,"line_end":69,"column_start":28,"column_end":40},"alias_span":null,"name":"WithPosition","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":2205},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1732,"byte_end":1737,"line_start":70,"line_end":70,"column_start":26,"column_end":31},"alias_span":null,"name":"ZipEq","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":2214},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1764,"byte_end":1774,"line_start":71,"line_end":71,"column_start":26,"column_end":36},"alias_span":null,"name":"ZipLongest","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":2259},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1798,"byte_end":1801,"line_start":72,"line_end":72,"column_start":23,"column_end":26},"alias_span":null,"name":"Zip","value":"","parent":{"krate":0,"index":25}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1822,"byte_end":1823,"line_start":74,"line_end":74,"column_start":18,"column_end":19},"alias_span":null,"name":"*","value":"Tuples, PadUsing, KMerge, GroupBy, IntoChunks, Format, Positions, Unique, Coalesce, MapResults, PutBackN, InterleaveShortest, ZipEq, KMergeBy, Intersperse, FormatWith, UniqueBy, TupleCombinations, TakeWhileRef, Merge, Batching, Product, Dedup, WithPosition, TupleWindows, Tee, PeekingTakeWhile, Flatten, Combinations, WhileSome, MergeBy, Step, PutBack, Interleave, ZipLongest","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":708},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1846,"byte_end":1852,"line_start":75,"line_end":75,"column_start":22,"column_end":28},"alias_span":null,"name":"concat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":722},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1880,"byte_end":1891,"line_start":76,"line_end":76,"column_start":27,"column_end":38},"alias_span":null,"name":"cons_tuples","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":748},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1907,"byte_end":1916,"line_start":77,"line_end":77,"column_start":15,"column_end":24},"alias_span":null,"name":"diff_with","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":732},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1932,"byte_end":1936,"line_start":78,"line_end":78,"column_start":15,"column_end":19},"alias_span":null,"name":"Diff","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1017},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1960,"byte_end":1969,"line_start":79,"line_end":79,"column_start":23,"column_end":32},"alias_span":null,"name":"kmerge_by","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2019},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":1988,"byte_end":2000,"line_start":80,"line_end":80,"column_start":17,"column_end":29},"alias_span":null,"name":"MinMaxResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1072},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":2030,"byte_end":2041,"line_start":81,"line_end":81,"column_start":29,"column_end":40},"alias_span":null,"name":"PeekingNext","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1119},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":2073,"byte_end":2088,"line_start":82,"line_end":82,"column_start":31,"column_end":46},"alias_span":null,"name":"process_results","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1164},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":2107,"byte_end":2115,"line_start":83,"line_end":83,"column_start":18,"column_end":26},"alias_span":null,"name":"repeat_n","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1206},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":2135,"byte_end":2146,"line_start":84,"line_end":84,"column_start":19,"column_end":30},"alias_span":null,"name":"repeat_call","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1214},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":2148,"byte_end":2154,"line_start":84,"line_end":84,"column_start":32,"column_end":38},"alias_span":null,"name":"unfold","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1237},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":2156,"byte_end":2163,"line_start":84,"line_end":84,"column_start":40,"column_end":47},"alias_span":null,"name":"iterate","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2177},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":2189,"byte_end":2197,"line_start":85,"line_end":85,"column_start":24,"column_end":32},"alias_span":null,"name":"Position","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2223},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":2220,"byte_end":2232,"line_start":86,"line_end":86,"column_start":22,"column_end":34},"alias_span":null,"name":"EitherOrBoth","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1425},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":2252,"byte_end":2260,"line_start":87,"line_end":87,"column_start":19,"column_end":27},"alias_span":null,"name":"multizip","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1563},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":57396,"byte_end":57405,"line_start":18,"line_end":18,"column_start":26,"column_end":35},"alias_span":null,"name":"MultiPeek","value":"","parent":{"krate":0,"index":227}},{"kind":"Use","ref_id":{"krate":0,"index":288},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":96829,"byte_end":96839,"line_start":11,"line_end":11,"column_start":5,"column_end":15},"alias_span":null,"name":"interleave","value":"","parent":{"krate":0,"index":632}},{"kind":"Use","ref_id":{"krate":0,"index":398},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":96845,"byte_end":96850,"line_start":12,"line_end":12,"column_start":5,"column_end":10},"alias_span":null,"name":"merge","value":"","parent":{"krate":0,"index":632}},{"kind":"Use","ref_id":{"krate":0,"index":307},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":96856,"byte_end":96864,"line_start":13,"line_end":13,"column_start":5,"column_end":13},"alias_span":null,"name":"put_back","value":"","parent":{"krate":0,"index":632}},{"kind":"Use","ref_id":{"krate":0,"index":324},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":96870,"byte_end":96880,"line_start":14,"line_end":14,"column_start":5,"column_end":15},"alias_span":null,"name":"put_back_n","value":"","parent":{"krate":0,"index":632}},{"kind":"Use","ref_id":{"krate":0,"index":269},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":96914,"byte_end":96923,"line_start":16,"line_end":16,"column_start":30,"column_end":39},"alias_span":null,"name":"multipeek","value":"","parent":{"krate":0,"index":632}},{"kind":"Use","ref_id":{"krate":0,"index":998},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":96946,"byte_end":96952,"line_start":17,"line_end":17,"column_start":22,"column_end":28},"alias_span":null,"name":"kmerge","value":"","parent":{"krate":0,"index":632}},{"kind":"Use","ref_id":{"krate":0,"index":1362},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":96975,"byte_end":96981,"line_start":18,"line_end":18,"column_start":22,"column_end":28},"alias_span":null,"name":"zip_eq","value":"","parent":{"krate":0,"index":632}},{"kind":"Use","ref_id":{"krate":0,"index":1139},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":97004,"byte_end":97010,"line_start":19,"line_end":19,"column_start":22,"column_end":28},"alias_span":null,"name":"rciter","value":"","parent":{"krate":0,"index":632}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":2334,"byte_end":2335,"line_start":92,"line_end":92,"column_start":15,"column_end":16},"alias_span":null,"name":"*","value":"merge, interleave, zip_eq, kmerge, fold","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":0,"byte_end":56489,"line_start":1,"line_end":1738,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":23},{"krate":0,"index":25},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":183},{"krate":0,"index":186},{"krate":0,"index":189},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":196},{"krate":0,"index":199},{"krate":0,"index":202},{"krate":0,"index":205},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":212},{"krate":0,"index":215},{"krate":0,"index":218},{"krate":0,"index":221},{"krate":0,"index":224},{"krate":0,"index":227},{"krate":0,"index":632},{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":712},{"krate":0,"index":725},{"krate":0,"index":753},{"krate":0,"index":784},{"krate":0,"index":951},{"krate":0,"index":965},{"krate":0,"index":1030},{"krate":0,"index":1039},{"krate":0,"index":1062},{"krate":0,"index":1104},{"krate":0,"index":1126},{"krate":0,"index":1159},{"krate":0,"index":1176},{"krate":0,"index":1194},{"krate":0,"index":1240},{"krate":0,"index":1272},{"krate":0,"index":1334},{"krate":0,"index":1358},{"krate":0,"index":1374},{"krate":0,"index":1417},{"krate":0,"index":1429},{"krate":0,"index":1430},{"krate":0,"index":1431},{"krate":0,"index":1546},{"krate":0,"index":1548},{"krate":0,"index":1551},{"krate":0,"index":1554},{"krate":0,"index":2429},{"krate":0,"index":2437},{"krate":0,"index":2439},{"krate":0,"index":2442},{"krate":0,"index":1559}],"decl_id":null,"docs":" Itertools — extra iterator adaptors, functions and macros.","sig":null,"attributes":[{"value":"warn(missing_docs)","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":0,"byte_end":22,"line_start":1,"line_end":1,"column_start":1,"column_end":23}},{"value":"crate_name = \"itertools\"","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":23,"byte_end":49,"line_start":2,"line_end":2,"column_start":1,"column_end":27}},{"value":"/ Itertools — extra iterator adaptors, functions and macros.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":51,"byte_end":115,"line_start":4,"line_end":4,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":116,"byte_end":119,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ To use the iterator methods in this crate, import the [`Itertools` trait](./trait.Itertools.html):","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":120,"byte_end":222,"line_start":6,"line_end":6,"column_start":1,"column_end":103}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":223,"byte_end":226,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":227,"byte_end":240,"line_start":8,"line_end":8,"column_start":1,"column_end":14}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":241,"byte_end":270,"line_start":9,"line_end":9,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":271,"byte_end":278,"line_start":10,"line_end":10,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":279,"byte_end":282,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ ## Rust Version","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":283,"byte_end":302,"line_start":12,"line_end":12,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":303,"byte_end":306,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ This version of itertools requires Rust 1.12 or later.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":307,"byte_end":365,"line_start":14,"line_end":14,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":366,"byte_end":369,"line_start":15,"line_end":15,"column_start":1,"column_end":4}}]},{"kind":"Mod","id":{"krate":0,"index":25},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":654,"byte_end":661,"line_start":32,"line_end":32,"column_start":9,"column_end":16},"name":"structs","qualname":"::structs","value":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","parent":null,"children":[{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":51},{"krate":0,"index":54},{"krate":0,"index":57},{"krate":0,"index":60},{"krate":0,"index":63},{"krate":0,"index":66},{"krate":0,"index":69},{"krate":0,"index":72},{"krate":0,"index":75},{"krate":0,"index":78},{"krate":0,"index":81},{"krate":0,"index":84},{"krate":0,"index":87},{"krate":0,"index":90},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":104},{"krate":0,"index":107},{"krate":0,"index":110},{"krate":0,"index":113},{"krate":0,"index":116},{"krate":0,"index":119},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":126},{"krate":0,"index":129},{"krate":0,"index":132},{"krate":0,"index":135},{"krate":0,"index":138},{"krate":0,"index":141},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":148},{"krate":0,"index":151},{"krate":0,"index":154},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":161},{"krate":0,"index":164},{"krate":0,"index":167},{"krate":0,"index":170},{"krate":0,"index":173},{"krate":0,"index":176}],"decl_id":null,"docs":" The concrete iterator types.\n","sig":null,"attributes":[{"value":"/ The concrete iterator types.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":613,"byte_end":645,"line_start":31,"line_end":31,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":1563},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/multipeek.rs","byte_start":94789,"byte_end":94798,"line_start":9,"line_end":9,"column_start":12,"column_end":21},"name":"MultiPeek","qualname":"::adaptors::multipeek::MultiPeek","value":"MultiPeek {  }","parent":null,"children":[{"krate":0,"index":1565},{"krate":0,"index":1566},{"krate":0,"index":1567}],"decl_id":null,"docs":" See [`multipeek()`](../fn.multipeek.html) for more information.\n","sig":null,"attributes":[{"value":"/ See [`multipeek()`](../fn.multipeek.html) for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/multipeek.rs","byte_start":94686,"byte_end":94753,"line_start":7,"line_end":7,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":269},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/multipeek.rs","byte_start":95024,"byte_end":95033,"line_start":19,"line_end":19,"column_start":8,"column_end":17},"name":"multipeek","qualname":"::adaptors::multipeek::multipeek","value":"fn multipeek<I>(I) -> MultiPeek<I::IntoIter> where I: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that allows the user to peek at multiple `.next()`\n values without advancing the base iterator.\n","sig":null,"attributes":[{"value":"/ An iterator adaptor that allows the user to peek at multiple `.next()`","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/multipeek.rs","byte_start":94894,"byte_end":94968,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/ values without advancing the base iterator.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/multipeek.rs","byte_start":94969,"byte_end":95016,"line_start":18,"line_end":18,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/multipeek.rs","byte_start":95315,"byte_end":95325,"line_start":33,"line_end":33,"column_start":12,"column_end":22},"name":"reset_peek","qualname":"<MultiPeek<I>>::reset_peek","value":"fn reset_peek<'_>(&'_ mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset the peeking “cursor”\n","sig":null,"attributes":[{"value":"/ Reset the peeking “cursor”","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/multipeek.rs","byte_start":95269,"byte_end":95303,"line_start":32,"line_end":32,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/multipeek.rs","byte_start":95589,"byte_end":95593,"line_start":42,"line_end":42,"column_start":12,"column_end":16},"name":"peek","qualname":"<MultiPeek<I>>::peek","value":"fn peek<'_>(&'_ mut Self) -> Option<&'_ I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Works exactly like `.next()` with the only difference that it doesn't\n advance itself. `.peek()` can be called multiple times, to peek\n further ahead.\n","sig":null,"attributes":[{"value":"/ Works exactly like `.next()` with the only difference that it doesn't","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/multipeek.rs","byte_start":95409,"byte_end":95482,"line_start":39,"line_end":39,"column_start":5,"column_end":78}},{"value":"/ advance itself. `.peek()` can be called multiple times, to peek","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/multipeek.rs","byte_start":95487,"byte_end":95554,"line_start":40,"line_end":40,"column_start":5,"column_end":72}},{"value":"/ further ahead.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/multipeek.rs","byte_start":95559,"byte_end":95577,"line_start":41,"line_end":41,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/multipeek.rs","byte_start":96110,"byte_end":96114,"line_start":65,"line_end":65,"column_start":8,"column_end":12},"name":"next","qualname":"<MultiPeek<I> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<I::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/multipeek.rs","byte_start":96307,"byte_end":96316,"line_start":74,"line_end":74,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<MultiPeek<I> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1574},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":57863,"byte_end":57873,"line_start":38,"line_end":38,"column_start":12,"column_end":22},"name":"Interleave","qualname":"::adaptors::Interleave","value":"Interleave {  }","parent":null,"children":[{"krate":0,"index":1577},{"krate":0,"index":1578},{"krate":0,"index":1579}],"decl_id":null,"docs":" An iterator adaptor that alternates elements from two iterators until both\n run out.","sig":null,"attributes":[{"value":"/ An iterator adaptor that alternates elements from two iterators until both","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":57607,"byte_end":57685,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/ run out.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":57686,"byte_end":57698,"line_start":32,"line_end":32,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":57699,"byte_end":57702,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":57703,"byte_end":57732,"line_start":34,"line_end":34,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":57733,"byte_end":57736,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ See [`.interleave()`](../trait.Itertools.html#method.interleave) for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":57737,"byte_end":57827,"line_start":36,"line_end":36,"column_start":1,"column_end":91}}]},{"kind":"Function","id":{"krate":0,"index":288},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":58203,"byte_end":58213,"line_start":55,"line_end":55,"column_start":8,"column_end":18},"name":"interleave","qualname":"::adaptors::interleave","value":"fn interleave<I, J>(I, J)\n-> Interleave<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter>\nwhere I: IntoIterator, J: IntoIterator<Item = I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that interleaves elements in `i` and `j`.","sig":null,"attributes":[{"value":"/ Create an iterator that interleaves elements in `i` and `j`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":57933,"byte_end":57997,"line_start":44,"line_end":44,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":57998,"byte_end":58001,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `i.interleave(j)`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":58002,"byte_end":58058,"line_start":46,"line_end":46,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":58059,"byte_end":58062,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":58063,"byte_end":58070,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/ use itertools::interleave;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":58071,"byte_end":58101,"line_start":49,"line_end":49,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":58102,"byte_end":58105,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ for elt in interleave(&[1, 2, 3], &[2, 3, 4]) {","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":58106,"byte_end":58157,"line_start":51,"line_end":51,"column_start":1,"column_end":52}},{"value":"/     /* loop body */","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":58158,"byte_end":58181,"line_start":52,"line_end":52,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":58182,"byte_end":58187,"line_start":53,"line_end":53,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":58188,"byte_end":58195,"line_start":54,"line_end":54,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":58642,"byte_end":58646,"line_start":72,"line_end":72,"column_start":8,"column_end":12},"name":"next","qualname":"<Interleave<I, J> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<I::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":58625,"byte_end":58634,"line_start":71,"line_end":71,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":58997,"byte_end":59006,"line_start":87,"line_end":87,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<Interleave<I, J> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1588},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":59404,"byte_end":59422,"line_start":100,"line_end":100,"column_start":12,"column_end":30},"name":"InterleaveShortest","qualname":"::adaptors::InterleaveShortest","value":"InterleaveShortest {  }","parent":null,"children":[{"krate":0,"index":1591},{"krate":0,"index":1592},{"krate":0,"index":1593}],"decl_id":null,"docs":" An iterator adaptor that alternates elements from the two iterators until\n one of them runs out.","sig":null,"attributes":[{"value":"/ An iterator adaptor that alternates elements from the two iterators until","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":59114,"byte_end":59191,"line_start":92,"line_end":92,"column_start":1,"column_end":78}},{"value":"/ one of them runs out.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":59192,"byte_end":59217,"line_start":93,"line_end":93,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":59218,"byte_end":59221,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":59222,"byte_end":59251,"line_start":95,"line_end":95,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":59252,"byte_end":59255,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ See [`.interleave_shortest()`](../trait.Itertools.html#method.interleave_shortest)","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":59256,"byte_end":59342,"line_start":97,"line_end":97,"column_start":1,"column_end":87}},{"value":"/ for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":59343,"byte_end":59368,"line_start":98,"line_end":98,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":59998,"byte_end":60002,"line_start":128,"line_end":128,"column_start":8,"column_end":12},"name":"next","qualname":"<InterleaveShortest<I, J> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<I::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":59981,"byte_end":59990,"line_start":127,"line_end":127,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":60484,"byte_end":60493,"line_start":148,"line_end":148,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<InterleaveShortest<I, J> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":60467,"byte_end":60476,"line_start":147,"line_end":147,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1602},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":61824,"byte_end":61831,"line_start":189,"line_end":189,"column_start":12,"column_end":19},"name":"PutBack","qualname":"::adaptors::PutBack","value":"PutBack {  }","parent":null,"children":[{"krate":0,"index":1604},{"krate":0,"index":1605}],"decl_id":null,"docs":" An iterator adaptor that allows putting back a single\n item to the front of the iterator.","sig":null,"attributes":[{"value":"/ An iterator adaptor that allows putting back a single","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":61672,"byte_end":61729,"line_start":185,"line_end":185,"column_start":1,"column_end":58}},{"value":"/ item to the front of the iterator.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":61730,"byte_end":61768,"line_start":186,"line_end":186,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":61769,"byte_end":61772,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":61773,"byte_end":61812,"line_start":188,"line_end":188,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":307},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":61968,"byte_end":61976,"line_start":197,"line_end":197,"column_start":8,"column_end":16},"name":"put_back","qualname":"::adaptors::put_back","value":"fn put_back<I>(I) -> PutBack<I::IntoIter> where I: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator where you can put back a single item\n","sig":null,"attributes":[{"value":"/ Create an iterator where you can put back a single item","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":61901,"byte_end":61960,"line_start":196,"line_end":196,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":62225,"byte_end":62235,"line_start":210,"line_end":210,"column_start":12,"column_end":22},"name":"with_value","qualname":"<PutBack<I>>::with_value","value":"fn with_value(Self, I::Item) -> Self","parent":null,"children":[],"decl_id":null,"docs":" put back value `value` (builder method)\n","sig":null,"attributes":[{"value":"/ put back value `value` (builder method)","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":62170,"byte_end":62213,"line_start":209,"line_end":209,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":62391,"byte_end":62401,"line_start":217,"line_end":217,"column_start":12,"column_end":22},"name":"into_parts","qualname":"<PutBack<I>>::into_parts","value":"fn into_parts(Self) -> (Option<I::Item>, I)","parent":null,"children":[],"decl_id":null,"docs":" Split the `PutBack` into its parts.\n","sig":null,"attributes":[{"value":"/ Split the `PutBack` into its parts.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":62326,"byte_end":62365,"line_start":215,"line_end":215,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":62370,"byte_end":62379,"line_start":216,"line_end":216,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":62666,"byte_end":62674,"line_start":226,"line_end":226,"column_start":12,"column_end":20},"name":"put_back","qualname":"<PutBack<I>>::put_back","value":"fn put_back<'_>(&'_ mut Self, I::Item)","parent":null,"children":[],"decl_id":null,"docs":" Put back a single value to the front of the iterator.","sig":null,"attributes":[{"value":"/ Put back a single value to the front of the iterator.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":62504,"byte_end":62561,"line_start":222,"line_end":222,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":62566,"byte_end":62569,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ If a value is already in the put back slot, it is overwritten.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":62574,"byte_end":62640,"line_start":224,"line_end":224,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":62645,"byte_end":62654,"line_start":225,"line_end":225,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":62838,"byte_end":62842,"line_start":236,"line_end":236,"column_start":8,"column_end":12},"name":"next","qualname":"<PutBack<I> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<I::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":62821,"byte_end":62830,"line_start":235,"line_end":235,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":63016,"byte_end":63025,"line_start":243,"line_end":243,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<PutBack<I> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":62999,"byte_end":63008,"line_start":242,"line_end":242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":63228,"byte_end":63231,"line_start":248,"line_end":248,"column_start":8,"column_end":11},"name":"all","qualname":"<PutBack<I> as std::iter::Iterator>::all","value":"fn all<G, '_>(&'_ mut Self, G) -> bool where G: FnMut(Self::Item) -> bool","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8718},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":63476,"byte_end":63480,"line_start":259,"line_end":259,"column_start":8,"column_end":12},"name":"fold","qualname":"<PutBack<I> as std::iter::Iterator>::fold","value":"fn fold<Acc, G>(Self, Acc, G) -> Acc where G: FnMut(Acc, Self::Item) -> Acc","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8710},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1612},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":63911,"byte_end":63919,"line_start":275,"line_end":275,"column_start":12,"column_end":20},"name":"PutBackN","qualname":"::adaptors::PutBackN","value":"PutBackN {  }","parent":null,"children":[{"krate":0,"index":1614},{"krate":0,"index":1615}],"decl_id":null,"docs":" An iterator adaptor that allows putting multiple\n items in front of the iterator.","sig":null,"attributes":[{"value":"/ An iterator adaptor that allows putting multiple","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":63743,"byte_end":63795,"line_start":270,"line_end":270,"column_start":1,"column_end":53}},{"value":"/ items in front of the iterator.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":63796,"byte_end":63831,"line_start":271,"line_end":271,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":63832,"byte_end":63835,"line_start":272,"line_end":272,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":63836,"byte_end":63875,"line_start":273,"line_end":273,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":324},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":64122,"byte_end":64132,"line_start":284,"line_end":284,"column_start":8,"column_end":18},"name":"put_back_n","qualname":"::adaptors::put_back_n","value":"fn put_back_n<I>(I) -> PutBackN<I::IntoIter> where I: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator where you can put back multiple values to the front\n of the iteration.","sig":null,"attributes":[{"value":"/ Create an iterator where you can put back multiple values to the front","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":63974,"byte_end":64048,"line_start":280,"line_end":280,"column_start":1,"column_end":75}},{"value":"/ of the iteration.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":64049,"byte_end":64070,"line_start":281,"line_end":281,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":64071,"byte_end":64074,"line_start":282,"line_end":282,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":64075,"byte_end":64114,"line_start":283,"line_end":283,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":64715,"byte_end":64723,"line_start":309,"line_end":309,"column_start":12,"column_end":20},"name":"put_back","qualname":"<PutBackN<I>>::put_back","value":"fn put_back<'_>(&'_ mut Self, I::Item)","parent":null,"children":[],"decl_id":null,"docs":" Puts x in front of the iterator.\n The values are yielded in order of the most recently put back\n values first.","sig":null,"attributes":[{"value":"/ Puts x in front of the iterator.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":64323,"byte_end":64359,"line_start":294,"line_end":294,"column_start":5,"column_end":41}},{"value":"/ The values are yielded in order of the most recently put back","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":64364,"byte_end":64429,"line_start":295,"line_end":295,"column_start":5,"column_end":70}},{"value":"/ values first.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":64434,"byte_end":64451,"line_start":296,"line_end":296,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":64456,"byte_end":64459,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":64464,"byte_end":64475,"line_start":298,"line_end":298,"column_start":5,"column_end":16}},{"value":"/ use itertools::put_back_n;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":64480,"byte_end":64510,"line_start":299,"line_end":299,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":64515,"byte_end":64518,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ let mut it = put_back_n(1..5);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":64523,"byte_end":64557,"line_start":301,"line_end":301,"column_start":5,"column_end":39}},{"value":"/ it.next();","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":64562,"byte_end":64576,"line_start":302,"line_end":302,"column_start":5,"column_end":19}},{"value":"/ it.put_back(1);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":64581,"byte_end":64600,"line_start":303,"line_end":303,"column_start":5,"column_end":24}},{"value":"/ it.put_back(0);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":64605,"byte_end":64624,"line_start":304,"line_end":304,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":64629,"byte_end":64632,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ assert!(itertools::equal(it, 0..5));","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":64637,"byte_end":64677,"line_start":306,"line_end":306,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":64682,"byte_end":64689,"line_start":307,"line_end":307,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":64694,"byte_end":64703,"line_start":308,"line_end":308,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":64875,"byte_end":64879,"line_start":317,"line_end":317,"column_start":8,"column_end":12},"name":"next","qualname":"<PutBackN<I> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<I::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":64858,"byte_end":64867,"line_start":316,"line_end":316,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":333},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":65056,"byte_end":65065,"line_start":326,"line_end":326,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<PutBackN<I> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":65039,"byte_end":65048,"line_start":325,"line_end":325,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1622},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":65497,"byte_end":65504,"line_start":338,"line_end":338,"column_start":12,"column_end":19},"name":"Product","qualname":"::adaptors::Product","value":"Product {  }","parent":null,"children":[{"krate":0,"index":1625},{"krate":0,"index":1626},{"krate":0,"index":1627},{"krate":0,"index":1628}],"decl_id":null,"docs":" An iterator adaptor that iterates over the cartesian product of\n the element sets of two iterators `I` and `J`.","sig":null,"attributes":[{"value":"/ An iterator adaptor that iterates over the cartesian product of","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":65203,"byte_end":65270,"line_start":332,"line_end":332,"column_start":1,"column_end":68}},{"value":"/ the element sets of two iterators `I` and `J`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":65271,"byte_end":65321,"line_start":333,"line_end":333,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":65322,"byte_end":65325,"line_start":334,"line_end":334,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `(I::Item, J::Item)`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":65326,"byte_end":65376,"line_start":335,"line_end":335,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":65377,"byte_end":65380,"line_start":336,"line_end":336,"column_start":1,"column_end":4}},{"value":"/ See [`.cartesian_product()`](../trait.Itertools.html#method.cartesian_product) for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":65381,"byte_end":65485,"line_start":337,"line_end":337,"column_start":1,"column_end":105}}]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":66111,"byte_end":66115,"line_start":370,"line_end":370,"column_start":8,"column_end":12},"name":"next","qualname":"<Product<I, J> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<(I::Item, J::Item)>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":66710,"byte_end":66719,"line_start":392,"line_end":392,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<Product<I, J> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":67169,"byte_end":67173,"line_start":403,"line_end":403,"column_start":8,"column_end":12},"name":"fold","qualname":"<Product<I, J> as std::iter::Iterator>::fold","value":"fn fold<Acc, G>(Self, Acc, G) -> Acc where G: FnMut(Acc, Self::Item) -> Acc","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8710},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1637},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":68269,"byte_end":68277,"line_start":433,"line_end":433,"column_start":12,"column_end":20},"name":"Batching","qualname":"::adaptors::Batching","value":"Batching {  }","parent":null,"children":[{"krate":0,"index":1640},{"krate":0,"index":1641}],"decl_id":null,"docs":" A “meta iterator adaptor”. Its closure recives a reference to the iterator\n and may pick off as many elements as it likes, to produce the next iterator element.","sig":null,"attributes":[{"value":"/ A “meta iterator adaptor”. Its closure recives a reference to the iterator","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":67896,"byte_end":67978,"line_start":426,"line_end":426,"column_start":1,"column_end":79}},{"value":"/ and may pick off as many elements as it likes, to produce the next iterator element.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":67979,"byte_end":68067,"line_start":427,"line_end":427,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":68068,"byte_end":68071,"line_start":428,"line_end":428,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is *X*, if the return type of `F` is *Option\\<X\\>*.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":68072,"byte_end":68149,"line_start":429,"line_end":429,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":68150,"byte_end":68153,"line_start":430,"line_end":430,"column_start":1,"column_end":4}},{"value":"/ See [`.batching()`](../trait.Itertools.html#method.batching) for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":68154,"byte_end":68240,"line_start":431,"line_end":431,"column_start":1,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":359},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":68694,"byte_end":68698,"line_start":453,"line_end":453,"column_start":8,"column_end":12},"name":"next","qualname":"<Batching<I, F> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<B>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":68677,"byte_end":68686,"line_start":452,"line_end":452,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":68786,"byte_end":68795,"line_start":458,"line_end":458,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<Batching<I, F> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":68769,"byte_end":68778,"line_start":457,"line_end":457,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1647},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":69244,"byte_end":69248,"line_start":472,"line_end":472,"column_start":12,"column_end":16},"name":"Step","qualname":"::adaptors::Step","value":"Step {  }","parent":null,"children":[{"krate":0,"index":1649},{"krate":0,"index":1650}],"decl_id":null,"docs":" An iterator adaptor that steps a number elements in the base iterator\n for each iteration.","sig":null,"attributes":[{"value":"/ An iterator adaptor that steps a number elements in the base iterator","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":68906,"byte_end":68979,"line_start":464,"line_end":464,"column_start":1,"column_end":74}},{"value":"/ for each iteration.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":68980,"byte_end":69003,"line_start":465,"line_end":465,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":69004,"byte_end":69007,"line_start":466,"line_end":466,"column_start":1,"column_end":4}},{"value":"/ The iterator steps by yielding the next element from the base iterator,","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":69008,"byte_end":69083,"line_start":467,"line_end":467,"column_start":1,"column_end":76}},{"value":"/ then skipping forward *n-1* elements.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":69084,"byte_end":69125,"line_start":468,"line_end":468,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":69126,"byte_end":69129,"line_start":469,"line_end":469,"column_start":1,"column_end":4}},{"value":"/ See [`.step()`](../trait.Itertools.html#method.step) for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":69130,"byte_end":69208,"line_start":470,"line_end":470,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":69626,"byte_end":69630,"line_start":495,"line_end":495,"column_start":8,"column_end":12},"name":"next","qualname":"<Step<I> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<I::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":69609,"byte_end":69618,"line_start":494,"line_end":494,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":367},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":69804,"byte_end":69813,"line_start":503,"line_end":503,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<Step<I> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":387},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":71922,"byte_end":71927,"line_start":585,"line_end":585,"column_start":12,"column_end":17},"name":"Merge","qualname":"::adaptors::Merge","value":"Merge {  }","parent":null,"children":[{"krate":0,"index":390}],"decl_id":null,"docs":" An iterator adaptor that merges the two base iterators in ascending order.\n If both base iterators are sorted (ascending), the result is sorted.","sig":null,"attributes":[{"value":"/ An iterator adaptor that merges the two base iterators in ascending order.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":71627,"byte_end":71705,"line_start":579,"line_end":579,"column_start":1,"column_end":79}},{"value":"/ If both base iterators are sorted (ascending), the result is sorted.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":71706,"byte_end":71778,"line_start":580,"line_end":580,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":71779,"byte_end":71782,"line_start":581,"line_end":581,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":71783,"byte_end":71822,"line_start":582,"line_end":582,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":71823,"byte_end":71826,"line_start":583,"line_end":583,"column_start":1,"column_end":4}},{"value":"/ See [`.merge()`](../trait.Itertools.html#method.merge_by) for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":71827,"byte_end":71910,"line_start":584,"line_end":584,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":72191,"byte_end":72196,"line_start":598,"line_end":598,"column_start":8,"column_end":13},"name":"clone","qualname":"<Merge<I, J> as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> Self","parent":{"krate":2,"index":2882},"children":[],"decl_id":{"krate":2,"index":2883},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":398},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":72715,"byte_end":72720,"line_start":621,"line_end":621,"column_start":8,"column_end":13},"name":"merge","qualname":"::adaptors::merge","value":"fn merge<I, J>(I, J)\n-> Merge<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter> where\nI: IntoIterator, J: IntoIterator<Item = I::Item>, I::Item: PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that merges elements in `i` and `j`.","sig":null,"attributes":[{"value":"/ Create an iterator that merges elements in `i` and `j`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":72465,"byte_end":72524,"line_start":610,"line_end":610,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":72525,"byte_end":72528,"line_start":611,"line_end":611,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `i.merge(j)`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":72529,"byte_end":72580,"line_start":612,"line_end":612,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":72581,"byte_end":72584,"line_start":613,"line_end":613,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":72585,"byte_end":72592,"line_start":614,"line_end":614,"column_start":1,"column_end":8}},{"value":"/ use itertools::merge;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":72593,"byte_end":72618,"line_start":615,"line_end":615,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":72619,"byte_end":72622,"line_start":616,"line_end":616,"column_start":1,"column_end":4}},{"value":"/ for elt in merge(&[1, 2, 3], &[2, 3, 4]) {","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":72623,"byte_end":72669,"line_start":617,"line_end":617,"column_start":1,"column_end":47}},{"value":"/     /* loop body */","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":72670,"byte_end":72693,"line_start":618,"line_end":618,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":72694,"byte_end":72699,"line_start":619,"line_end":619,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":72700,"byte_end":72707,"line_start":620,"line_end":620,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":73241,"byte_end":73245,"line_start":642,"line_end":642,"column_start":8,"column_end":12},"name":"next","qualname":"<Merge<I, J> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<I::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":73336,"byte_end":73345,"line_start":646,"line_end":646,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<Merge<I, J> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":408},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":73719,"byte_end":73726,"line_start":657,"line_end":657,"column_start":12,"column_end":19},"name":"MergeBy","qualname":"::adaptors::MergeBy","value":"MergeBy {  }","parent":null,"children":[{"krate":0,"index":412},{"krate":0,"index":413}],"decl_id":null,"docs":" An iterator adaptor that merges the two base iterators in ascending order.\n If both base iterators are sorted (ascending), the result is sorted.","sig":null,"attributes":[{"value":"/ An iterator adaptor that merges the two base iterators in ascending order.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":73421,"byte_end":73499,"line_start":651,"line_end":651,"column_start":1,"column_end":79}},{"value":"/ If both base iterators are sorted (ascending), the result is sorted.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":73500,"byte_end":73572,"line_start":652,"line_end":652,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":73573,"byte_end":73576,"line_start":653,"line_end":653,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":73577,"byte_end":73616,"line_start":654,"line_end":654,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":73617,"byte_end":73620,"line_start":655,"line_end":655,"column_start":1,"column_end":4}},{"value":"/ See [`.merge_by()`](../trait.Itertools.html#method.merge_by) for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":73621,"byte_end":73707,"line_start":656,"line_end":656,"column_start":1,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":426},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":74570,"byte_end":74575,"line_start":694,"line_end":694,"column_start":8,"column_end":13},"name":"clone","qualname":"<MergeBy<I, J, F> as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> Self","parent":{"krate":2,"index":2882},"children":[],"decl_id":{"krate":2,"index":2883},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":432},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":74839,"byte_end":74843,"line_start":706,"line_end":706,"column_start":8,"column_end":12},"name":"next","qualname":"<MergeBy<I, J, F> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<I::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":433},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":74934,"byte_end":74943,"line_start":710,"line_end":710,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<MergeBy<I, J, F> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":439},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":76203,"byte_end":76211,"line_start":757,"line_end":757,"column_start":12,"column_end":20},"name":"Coalesce","qualname":"::adaptors::Coalesce","value":"Coalesce {  }","parent":null,"children":[{"krate":0,"index":442},{"krate":0,"index":443}],"decl_id":null,"docs":" An iterator adaptor that may join together adjacent elements.","sig":null,"attributes":[{"value":"/ An iterator adaptor that may join together adjacent elements.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":76035,"byte_end":76100,"line_start":754,"line_end":754,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":76101,"byte_end":76104,"line_start":755,"line_end":755,"column_start":1,"column_end":4}},{"value":"/ See [`.coalesce()`](../trait.Itertools.html#method.coalesce) for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":76105,"byte_end":76191,"line_start":756,"line_end":756,"column_start":1,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":447},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":76389,"byte_end":76394,"line_start":768,"line_end":768,"column_start":8,"column_end":13},"name":"clone","qualname":"<Coalesce<I, F> as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> Self","parent":{"krate":2,"index":2882},"children":[],"decl_id":{"krate":2,"index":2883},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":77038,"byte_end":77042,"line_start":799,"line_end":799,"column_start":8,"column_end":12},"name":"next","qualname":"<Coalesce<I, F> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<I::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":459},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":77130,"byte_end":77139,"line_start":803,"line_end":803,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<Coalesce<I, F> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":460},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":77368,"byte_end":77373,"line_start":811,"line_end":811,"column_start":12,"column_end":17},"name":"Dedup","qualname":"::adaptors::Dedup","value":"Dedup {  }","parent":null,"children":[{"krate":0,"index":462}],"decl_id":null,"docs":" An iterator adaptor that removes repeated duplicates.","sig":null,"attributes":[{"value":"/ An iterator adaptor that removes repeated duplicates.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":77214,"byte_end":77271,"line_start":808,"line_end":808,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":77272,"byte_end":77275,"line_start":809,"line_end":809,"column_start":1,"column_end":4}},{"value":"/ See [`.dedup()`](../trait.Itertools.html#method.dedup) for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":77276,"byte_end":77356,"line_start":810,"line_end":810,"column_start":1,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":465},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":77522,"byte_end":77527,"line_start":821,"line_end":821,"column_start":8,"column_end":13},"name":"clone","qualname":"<Dedup<I> as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> Self","parent":{"krate":2,"index":2882},"children":[],"decl_id":{"krate":2,"index":2883},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":78059,"byte_end":78063,"line_start":851,"line_end":851,"column_start":8,"column_end":12},"name":"next","qualname":"<Dedup<I> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<I::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":78211,"byte_end":78220,"line_start":857,"line_end":857,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<Dedup<I> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":78300,"byte_end":78304,"line_start":861,"line_end":861,"column_start":8,"column_end":12},"name":"fold","qualname":"<Dedup<I> as std::iter::Iterator>::fold","value":"fn fold<Acc, G>(Self, Acc, G) -> Acc where G: FnMut(Acc, Self::Item) -> Acc","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8710},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":480},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":79010,"byte_end":79022,"line_start":883,"line_end":883,"column_start":12,"column_end":24},"name":"TakeWhileRef","qualname":"::adaptors::TakeWhileRef","value":"TakeWhileRef {  }","parent":null,"children":[{"krate":0,"index":484},{"krate":0,"index":485}],"decl_id":null,"docs":" An iterator adaptor that borrows from a `Clone`-able iterator\n to only pick off elements while the predicate returns `true`.","sig":null,"attributes":[{"value":"/ An iterator adaptor that borrows from a `Clone`-able iterator","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":78764,"byte_end":78829,"line_start":879,"line_end":879,"column_start":1,"column_end":66}},{"value":"/ to only pick off elements while the predicate returns `true`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":78830,"byte_end":78895,"line_start":880,"line_end":880,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":78896,"byte_end":78899,"line_start":881,"line_end":881,"column_start":1,"column_end":4}},{"value":"/ See [`.take_while_ref()`](../trait.Itertools.html#method.take_while_ref) for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":78900,"byte_end":78998,"line_start":882,"line_end":882,"column_start":1,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":79578,"byte_end":79582,"line_start":907,"line_end":907,"column_start":8,"column_end":12},"name":"next","qualname":"<TakeWhileRef as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<I::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":79948,"byte_end":79957,"line_start":922,"line_end":922,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<TakeWhileRef as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1672},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":80321,"byte_end":80330,"line_start":933,"line_end":933,"column_start":12,"column_end":21},"name":"WhileSome","qualname":"::adaptors::WhileSome","value":"WhileSome {  }","parent":null,"children":[{"krate":0,"index":1674}],"decl_id":null,"docs":" An iterator adaptor that filters `Option<A>` iterator elements\n and produces `A`. Stops on the first `None` encountered.","sig":null,"attributes":[{"value":"/ An iterator adaptor that filters `Option<A>` iterator elements","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":80063,"byte_end":80129,"line_start":928,"line_end":928,"column_start":1,"column_end":67}},{"value":"/ and produces `A`. Stops on the first `None` encountered.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":80130,"byte_end":80190,"line_start":929,"line_end":929,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":80191,"byte_end":80194,"line_start":930,"line_end":930,"column_start":1,"column_end":4}},{"value":"/ See [`.while_some()`](../trait.Itertools.html#method.while_some) for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":80195,"byte_end":80285,"line_start":931,"line_end":931,"column_start":1,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":80571,"byte_end":80575,"line_start":947,"line_end":947,"column_start":8,"column_end":12},"name":"next","qualname":"<WhileSome<I> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<A>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":507},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":80728,"byte_end":80737,"line_start":954,"line_end":954,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<WhileSome<I> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1681},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":81107,"byte_end":81124,"line_start":966,"line_end":966,"column_start":12,"column_end":29},"name":"TupleCombinations","qualname":"::adaptors::TupleCombinations","value":"TupleCombinations {  }","parent":null,"children":[{"krate":0,"index":1684},{"krate":0,"index":1685},{"krate":0,"index":1686}],"decl_id":null,"docs":" An iterator to iterate through all combinations in a `Clone`-able iterator that produces tuples\n of a specific size.","sig":null,"attributes":[{"value":"/ An iterator to iterate through all combinations in a `Clone`-able iterator that produces tuples","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":80840,"byte_end":80939,"line_start":960,"line_end":960,"column_start":1,"column_end":100}},{"value":"/ of a specific size.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":80940,"byte_end":80963,"line_start":961,"line_end":961,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":80964,"byte_end":80967,"line_start":962,"line_end":962,"column_start":1,"column_end":4}},{"value":"/ See [`.tuple_combinations()`](../trait.Itertools.html#method.tuple_combinations) for more","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":80968,"byte_end":81061,"line_start":963,"line_end":963,"column_start":1,"column_end":94}},{"value":"/ information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":81062,"byte_end":81078,"line_start":964,"line_end":964,"column_start":1,"column_end":17}}]},{"kind":"Trait","id":{"krate":0,"index":508},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":81275,"byte_end":81289,"line_start":975,"line_end":975,"column_start":11,"column_end":25},"name":"HasCombination","qualname":"::adaptors::HasCombination","value":"HasCombination<I>: Sized","parent":null,"children":[{"krate":0,"index":510}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":510},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":81311,"byte_end":81322,"line_start":976,"line_end":976,"column_start":10,"column_end":21},"name":"Combination","qualname":"::adaptors::HasCombination::Combination","value":"type Combination: From<I> + Iterator<Item = Self>;","parent":{"krate":0,"index":508},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":81841,"byte_end":81845,"line_start":998,"line_end":998,"column_start":8,"column_end":12},"name":"next","qualname":"<TupleCombinations<I, T> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1691},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":81943,"byte_end":81960,"line_start":1004,"line_end":1004,"column_start":12,"column_end":29},"name":"Tuple1Combination","qualname":"::adaptors::Tuple1Combination","value":"Tuple1Combination {  }","parent":null,"children":[{"krate":0,"index":1693}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":82032,"byte_end":82036,"line_start":1009,"line_end":1009,"column_start":8,"column_end":12},"name":"from","qualname":"<Tuple1Combination<I> as std::convert::From>::from","value":"fn from(I) -> Self","parent":{"krate":2,"index":3169},"children":[],"decl_id":{"krate":2,"index":3171},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":525},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":82196,"byte_end":82200,"line_start":1017,"line_end":1017,"column_start":8,"column_end":12},"name":"next","qualname":"<Tuple1Combination<I> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1714},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":84181,"byte_end":84198,"line_start":1085,"line_end":1085,"column_start":25,"column_end":42},"name":"Tuple2Combination","qualname":"::adaptors::Tuple2Combination","value":"Tuple2Combination {  }","parent":null,"children":[{"krate":0,"index":1716},{"krate":0,"index":1717},{"krate":0,"index":1718}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1739},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":84257,"byte_end":84274,"line_start":1086,"line_end":1086,"column_start":25,"column_end":42},"name":"Tuple3Combination","qualname":"::adaptors::Tuple3Combination","value":"Tuple3Combination {  }","parent":null,"children":[{"krate":0,"index":1741},{"krate":0,"index":1742},{"krate":0,"index":1743}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1764},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":84338,"byte_end":84355,"line_start":1087,"line_end":1087,"column_start":25,"column_end":42},"name":"Tuple4Combination","qualname":"::adaptors::Tuple4Combination","value":"Tuple4Combination {  }","parent":null,"children":[{"krate":0,"index":1766},{"krate":0,"index":1767},{"krate":0,"index":1768}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":542},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":85847,"byte_end":85859,"line_start":1156,"line_end":1156,"column_start":12,"column_end":24},"name":"Combinations","qualname":"::adaptors::Combinations","value":"Combinations {  }","parent":null,"children":[{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547}],"decl_id":null,"docs":" An iterator to iterate through all the `n`-length combinations in an iterator.","sig":null,"attributes":[{"value":"/ An iterator to iterate through all the `n`-length combinations in an iterator.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":85654,"byte_end":85736,"line_start":1153,"line_end":1153,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":85737,"byte_end":85740,"line_start":1154,"line_end":1154,"column_start":1,"column_end":4}},{"value":"/ See [`.combinations()`](../trait.Itertools.html#method.combinations) for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":85741,"byte_end":85835,"line_start":1155,"line_end":1155,"column_start":1,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":555},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":86760,"byte_end":86764,"line_start":1199,"line_end":1199,"column_start":8,"column_end":12},"name":"next","qualname":"<Combinations<I> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1781},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":88410,"byte_end":88418,"line_start":1253,"line_end":1253,"column_start":12,"column_end":20},"name":"UniqueBy","qualname":"::adaptors::UniqueBy","value":"UniqueBy {  }","parent":null,"children":[{"krate":0,"index":1785},{"krate":0,"index":1786},{"krate":0,"index":1787}],"decl_id":null,"docs":" An iterator adapter to filter out duplicate elements.","sig":null,"attributes":[{"value":"/ An iterator adapter to filter out duplicate elements.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":88234,"byte_end":88291,"line_start":1249,"line_end":1249,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":88292,"byte_end":88295,"line_start":1250,"line_end":1250,"column_start":1,"column_end":4}},{"value":"/ See [`.unique_by()`](../trait.Itertools.html#method.unique) for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":88296,"byte_end":88381,"line_start":1251,"line_end":1251,"column_start":1,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":569},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":89091,"byte_end":89095,"line_start":1286,"line_end":1286,"column_start":8,"column_end":12},"name":"next","qualname":"<UniqueBy<I, V, F> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<I::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":570},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":89469,"byte_end":89478,"line_start":1301,"line_end":1301,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<UniqueBy<I, V, F> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":89452,"byte_end":89461,"line_start":1300,"line_end":1300,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":89753,"byte_end":89757,"line_start":1313,"line_end":1313,"column_start":8,"column_end":12},"name":"next","qualname":"<Unique<I> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<I::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":575},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":90242,"byte_end":90251,"line_start":1329,"line_end":1329,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<Unique<I> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":90225,"byte_end":90234,"line_start":1328,"line_end":1328,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1794},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":90583,"byte_end":90589,"line_start":1339,"line_end":1339,"column_start":12,"column_end":18},"name":"Unique","qualname":"::adaptors::Unique","value":"Unique {  }","parent":null,"children":[{"krate":0,"index":1796}],"decl_id":null,"docs":" An iterator adapter to filter out duplicate elements.","sig":null,"attributes":[{"value":"/ An iterator adapter to filter out duplicate elements.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":90410,"byte_end":90467,"line_start":1335,"line_end":1335,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":90468,"byte_end":90471,"line_start":1336,"line_end":1336,"column_start":1,"column_end":4}},{"value":"/ See [`.unique()`](../trait.Itertools.html#method.unique) for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":90472,"byte_end":90554,"line_start":1337,"line_end":1337,"column_start":1,"column_end":83}}]},{"kind":"Struct","id":{"krate":0,"index":1801},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":91205,"byte_end":91212,"line_start":1367,"line_end":1367,"column_start":12,"column_end":19},"name":"Flatten","qualname":"::adaptors::Flatten","value":"Flatten {  }","parent":null,"children":[{"krate":0,"index":1804},{"krate":0,"index":1805}],"decl_id":null,"docs":" An iterator adapter to simply flatten a structure.","sig":null,"attributes":[{"value":"/ An iterator adapter to simply flatten a structure.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":91026,"byte_end":91080,"line_start":1363,"line_end":1363,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":91081,"byte_end":91084,"line_start":1364,"line_end":1364,"column_start":1,"column_end":4}},{"value":"/ See [`.flatten()`](../trait.Itertools.html#method.flatten) for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":91085,"byte_end":91169,"line_start":1365,"line_end":1365,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":91586,"byte_end":91590,"line_start":1386,"line_end":1386,"column_start":8,"column_end":12},"name":"next","qualname":"<Flatten<I, J> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":92121,"byte_end":92125,"line_start":1404,"line_end":1404,"column_start":8,"column_end":12},"name":"fold","qualname":"<Flatten<I, J> as std::iter::Iterator>::fold","value":"fn fold<Acc, G>(Self, Acc, G) -> Acc where G: FnMut(Acc, Self::Item) -> Acc","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8710},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":592},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":92619,"byte_end":92629,"line_start":1418,"line_end":1418,"column_start":12,"column_end":22},"name":"MapResults","qualname":"::adaptors::MapResults","value":"MapResults {  }","parent":null,"children":[{"krate":0,"index":595},{"krate":0,"index":596}],"decl_id":null,"docs":" An iterator adapter to apply a transformation within a nested `Result`.","sig":null,"attributes":[{"value":"/ An iterator adapter to apply a transformation within a nested `Result`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":92435,"byte_end":92510,"line_start":1415,"line_end":1415,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":92511,"byte_end":92514,"line_start":1416,"line_end":1416,"column_start":1,"column_end":4}},{"value":"/ See [`.map_results()`](../trait.Itertools.html#method.map_results) for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":92515,"byte_end":92607,"line_start":1417,"line_end":1417,"column_start":1,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":610},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":93068,"byte_end":93072,"line_start":1440,"line_end":1440,"column_start":8,"column_end":12},"name":"next","qualname":"<MapResults<I, F> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":93175,"byte_end":93184,"line_start":1444,"line_end":1444,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<MapResults<I, F> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":613},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":93450,"byte_end":93459,"line_start":1452,"line_end":1452,"column_start":12,"column_end":21},"name":"Positions","qualname":"::adaptors::Positions","value":"Positions {  }","parent":null,"children":[{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":618}],"decl_id":null,"docs":" An iterator adapter to get the positions of each element that matches a predicate.","sig":null,"attributes":[{"value":"/ An iterator adapter to get the positions of each element that matches a predicate.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":93259,"byte_end":93345,"line_start":1449,"line_end":1449,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":93346,"byte_end":93349,"line_start":1450,"line_end":1450,"column_start":1,"column_end":4}},{"value":"/ See [`.positions()`](../trait.Itertools.html#method.positions) for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":93350,"byte_end":93438,"line_start":1451,"line_end":1451,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":93879,"byte_end":93883,"line_start":1476,"line_end":1476,"column_start":8,"column_end":12},"name":"next","qualname":"<Positions<I, F> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":94142,"byte_end":94151,"line_start":1487,"line_end":1487,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<Positions<I, F> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":631},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":94384,"byte_end":94393,"line_start":1496,"line_end":1496,"column_start":8,"column_end":17},"name":"next_back","qualname":"<Positions<I, F> as std::iter::DoubleEndedIterator>::next_back","value":"fn next_back<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8449},"children":[],"decl_id":{"krate":2,"index":8450},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":632},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"free","qualname":"::free","value":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","parent":null,"children":[{"krate":0,"index":633},{"krate":0,"index":636},{"krate":0,"index":637},{"krate":0,"index":640},{"krate":0,"index":643},{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":650},{"krate":0,"index":653},{"krate":0,"index":656},{"krate":0,"index":659},{"krate":0,"index":662},{"krate":0,"index":665},{"krate":0,"index":668},{"krate":0,"index":671},{"krate":0,"index":673},{"krate":0,"index":675},{"krate":0,"index":678},{"krate":0,"index":681},{"krate":0,"index":685},{"krate":0,"index":689},{"krate":0,"index":692},{"krate":0,"index":695},{"krate":0,"index":697},{"krate":0,"index":699},{"krate":0,"index":701}],"decl_id":null,"docs":" Free functions that create iterator adaptors or call iterator methods.","sig":null,"attributes":[{"value":"/ Free functions that create iterator adaptors or call iterator methods.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":96523,"byte_end":96597,"line_start":1,"line_end":1,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":96598,"byte_end":96601,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The benefit of free functions is that they accept any `IntoIterator` as","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":96602,"byte_end":96677,"line_start":3,"line_end":3,"column_start":1,"column_end":76}},{"value":"/ argument, so the resulting code may be easier to read.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":96678,"byte_end":96736,"line_start":4,"line_end":4,"column_start":1,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":671},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":97251,"byte_end":97260,"line_start":32,"line_end":32,"column_start":8,"column_end":17},"name":"enumerate","qualname":"::free::enumerate","value":"fn enumerate<I>(I) -> iter::Enumerate<I::IntoIter> where I: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" Iterate `iterable` with a running index.","sig":null,"attributes":[{"value":"/ Iterate `iterable` with a running index.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":97013,"byte_end":97057,"line_start":21,"line_end":21,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":97058,"byte_end":97061,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `.enumerate()`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":97062,"byte_end":97115,"line_start":23,"line_end":23,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":97116,"byte_end":97119,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":97120,"byte_end":97127,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/ use itertools::enumerate;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":97128,"byte_end":97157,"line_start":26,"line_end":26,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":97158,"byte_end":97161,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ for (i, elt) in enumerate(&[1, 2, 3]) {","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":97162,"byte_end":97205,"line_start":28,"line_end":28,"column_start":1,"column_end":44}},{"value":"/     /* loop body */","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":97206,"byte_end":97229,"line_start":29,"line_end":29,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":97230,"byte_end":97235,"line_start":30,"line_end":30,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":97236,"byte_end":97243,"line_start":31,"line_end":31,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":673},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":97582,"byte_end":97585,"line_start":49,"line_end":49,"column_start":8,"column_end":11},"name":"rev","qualname":"::free::rev","value":"fn rev<I>(I) -> iter::Rev<I::IntoIter> where I: IntoIterator,\nI::IntoIter: DoubleEndedIterator","parent":null,"children":[],"decl_id":null,"docs":" Iterate `iterable` in reverse.","sig":null,"attributes":[{"value":"/ Iterate `iterable` in reverse.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":97377,"byte_end":97411,"line_start":38,"line_end":38,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":97412,"byte_end":97415,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `.rev()`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":97416,"byte_end":97463,"line_start":40,"line_end":40,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":97464,"byte_end":97467,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":97468,"byte_end":97475,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/ use itertools::rev;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":97476,"byte_end":97499,"line_start":43,"line_end":43,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":97500,"byte_end":97503,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ for elt in rev(&[1, 2, 3]) {","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":97504,"byte_end":97536,"line_start":45,"line_end":45,"column_start":1,"column_end":33}},{"value":"/     /* loop body */","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":97537,"byte_end":97560,"line_start":46,"line_end":46,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":97561,"byte_end":97566,"line_start":47,"line_end":47,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":97567,"byte_end":97574,"line_start":48,"line_end":48,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":675},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":97986,"byte_end":97989,"line_start":68,"line_end":68,"column_start":8,"column_end":11},"name":"zip","qualname":"::free::zip","value":"fn zip<I, J>(I, J) -> Zip<I::IntoIter, J::IntoIter> where I: IntoIterator,\nJ: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" Iterate `i` and `j` in lock step.","sig":null,"attributes":[{"value":"/ Iterate `i` and `j` in lock step.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":97734,"byte_end":97771,"line_start":56,"line_end":56,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":97772,"byte_end":97775,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `i.zip(j)`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":97776,"byte_end":97825,"line_start":58,"line_end":58,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":97826,"byte_end":97829,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":97830,"byte_end":97837,"line_start":60,"line_end":60,"column_start":1,"column_end":8}},{"value":"/ use itertools::zip;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":97838,"byte_end":97861,"line_start":61,"line_end":61,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":97862,"byte_end":97865,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ let data = [1, 2, 3, 4, 5];","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":97866,"byte_end":97897,"line_start":63,"line_end":63,"column_start":1,"column_end":32}},{"value":"/ for (a, b) in zip(&data, &data[1..]) {","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":97898,"byte_end":97940,"line_start":64,"line_end":64,"column_start":1,"column_end":43}},{"value":"/     /* loop body */","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":97941,"byte_end":97964,"line_start":65,"line_end":65,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":97965,"byte_end":97970,"line_start":66,"line_end":66,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":97971,"byte_end":97978,"line_start":67,"line_end":67,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":678},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":98369,"byte_end":98374,"line_start":86,"line_end":86,"column_start":8,"column_end":13},"name":"chain","qualname":"::free::chain","value":"fn chain<I, J>(I, J)\n-> iter::Chain<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter>\nwhere I: IntoIterator, J: IntoIterator<Item = I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that first iterates `i` and then `j`.","sig":null,"attributes":[{"value":"/ Create an iterator that first iterates `i` and then `j`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":98124,"byte_end":98184,"line_start":75,"line_end":75,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":98185,"byte_end":98188,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `i.chain(j)`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":98189,"byte_end":98240,"line_start":77,"line_end":77,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":98241,"byte_end":98244,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":98245,"byte_end":98252,"line_start":79,"line_end":79,"column_start":1,"column_end":8}},{"value":"/ use itertools::chain;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":98253,"byte_end":98278,"line_start":80,"line_end":80,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":98279,"byte_end":98282,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ for elt in chain(&[1, 2, 3], &[4]) {","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":98283,"byte_end":98323,"line_start":82,"line_end":82,"column_start":1,"column_end":41}},{"value":"/     /* loop body */","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":98324,"byte_end":98347,"line_start":83,"line_end":83,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":98348,"byte_end":98353,"line_start":84,"line_end":84,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":98354,"byte_end":98361,"line_start":85,"line_end":85,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":681},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":98797,"byte_end":98803,"line_start":102,"line_end":102,"column_start":8,"column_end":14},"name":"cloned","qualname":"::free::cloned","value":"fn cloned<'a, I, T>(I) -> iter::Cloned<I::IntoIter> where T: 'a,\nI: IntoIterator<Item = &'a T>, T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that clones each element from &T to T","sig":null,"attributes":[{"value":"/ Create an iterator that clones each element from &T to T","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":98571,"byte_end":98631,"line_start":93,"line_end":93,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":98632,"byte_end":98635,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `i.cloned()`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":98636,"byte_end":98687,"line_start":95,"line_end":95,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":98688,"byte_end":98691,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":98692,"byte_end":98699,"line_start":97,"line_end":97,"column_start":1,"column_end":8}},{"value":"/ use itertools::cloned;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":98700,"byte_end":98726,"line_start":98,"line_end":98,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":98727,"byte_end":98730,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(cloned(b\"abc\").next(), Some(b'a'));","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":98731,"byte_end":98781,"line_start":100,"line_end":100,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":98782,"byte_end":98789,"line_start":101,"line_end":101,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":685},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":99191,"byte_end":99195,"line_start":118,"line_end":118,"column_start":8,"column_end":12},"name":"fold","qualname":"::free::fold","value":"fn fold<I, B, F>(I, B, F) -> B where I: IntoIterator, F: FnMut(B, I::Item) ->\nB","parent":null,"children":[],"decl_id":null,"docs":" Perform a fold operation over the iterable.","sig":null,"attributes":[{"value":"/ Perform a fold operation over the iterable.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":98958,"byte_end":99005,"line_start":109,"line_end":109,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":99006,"byte_end":99009,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `i.fold(init, f)`","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":99010,"byte_end":99065,"line_start":111,"line_end":111,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":99066,"byte_end":99069,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":99070,"byte_end":99077,"line_start":113,"line_end":113,"column_start":1,"column_end":8}},{"value":"/ use itertools::fold;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":99078,"byte_end":99102,"line_start":114,"line_end":114,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":99103,"byte_end":99106,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(fold(&[1., 2., 3.], 0., |a, &b| f32::max(a, b)), 3.);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":99107,"byte_end":99175,"line_start":116,"line_end":116,"column_start":1,"column_end":69}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":99176,"byte_end":99183,"line_start":117,"line_end":117,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":689},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":99570,"byte_end":99573,"line_start":134,"line_end":134,"column_start":8,"column_end":11},"name":"all","qualname":"::free::all","value":"fn all<I, F>(I, F) -> bool where I: IntoIterator, F: FnMut(I::Item) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the predicate holds for all elements in the iterable.","sig":null,"attributes":[{"value":"/ Test whether the predicate holds for all elements in the iterable.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":99345,"byte_end":99415,"line_start":125,"line_end":125,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":99416,"byte_end":99419,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `i.all(f)`","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":99420,"byte_end":99468,"line_start":127,"line_end":127,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":99469,"byte_end":99472,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":99473,"byte_end":99480,"line_start":129,"line_end":129,"column_start":1,"column_end":8}},{"value":"/ use itertools::all;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":99481,"byte_end":99504,"line_start":130,"line_end":130,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":99505,"byte_end":99508,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ assert!(all(&[1, 2, 3], |elt| *elt > 0));","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":99509,"byte_end":99554,"line_start":132,"line_end":132,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":99555,"byte_end":99562,"line_start":133,"line_end":133,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":692},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":99933,"byte_end":99936,"line_start":150,"line_end":150,"column_start":8,"column_end":11},"name":"any","qualname":"::free::any","value":"fn any<I, F>(I, F) -> bool where I: IntoIterator, F: FnMut(I::Item) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the predicate holds for any elements in the iterable.","sig":null,"attributes":[{"value":"/ Test whether the predicate holds for any elements in the iterable.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":99707,"byte_end":99777,"line_start":141,"line_end":141,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":99778,"byte_end":99781,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `i.any(f)`","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":99782,"byte_end":99830,"line_start":143,"line_end":143,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":99831,"byte_end":99834,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":99835,"byte_end":99842,"line_start":145,"line_end":145,"column_start":1,"column_end":8}},{"value":"/ use itertools::any;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":99843,"byte_end":99866,"line_start":146,"line_end":146,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":99867,"byte_end":99870,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ assert!(any(&[0, -1, 2], |elt| *elt > 0));","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":99871,"byte_end":99917,"line_start":148,"line_end":148,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":99918,"byte_end":99925,"line_start":149,"line_end":149,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":695},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":100261,"byte_end":100264,"line_start":166,"line_end":166,"column_start":8,"column_end":11},"name":"max","qualname":"::free::max","value":"fn max<I>(I) -> Option<I::Item> where I: IntoIterator, I::Item: Ord","parent":null,"children":[],"decl_id":null,"docs":" Return the maximum value of the iterable.","sig":null,"attributes":[{"value":"/ Return the maximum value of the iterable.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":100070,"byte_end":100115,"line_start":157,"line_end":157,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":100116,"byte_end":100119,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `i.max()`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":100120,"byte_end":100168,"line_start":159,"line_end":159,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":100169,"byte_end":100172,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":100173,"byte_end":100180,"line_start":161,"line_end":161,"column_start":1,"column_end":8}},{"value":"/ use itertools::max;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":100181,"byte_end":100204,"line_start":162,"line_end":162,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":100205,"byte_end":100208,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(max(0..10), Some(9));","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":100209,"byte_end":100245,"line_start":164,"line_end":164,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":100246,"byte_end":100253,"line_start":165,"line_end":165,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":697},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":100577,"byte_end":100580,"line_start":182,"line_end":182,"column_start":8,"column_end":11},"name":"min","qualname":"::free::min","value":"fn min<I>(I) -> Option<I::Item> where I: IntoIterator, I::Item: Ord","parent":null,"children":[],"decl_id":null,"docs":" Return the minimum value of the iterable.","sig":null,"attributes":[{"value":"/ Return the minimum value of the iterable.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":100386,"byte_end":100431,"line_start":173,"line_end":173,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":100432,"byte_end":100435,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `i.min()`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":100436,"byte_end":100484,"line_start":175,"line_end":175,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":100485,"byte_end":100488,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":100489,"byte_end":100496,"line_start":177,"line_end":177,"column_start":1,"column_end":8}},{"value":"/ use itertools::min;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":100497,"byte_end":100520,"line_start":178,"line_end":178,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":100521,"byte_end":100524,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(min(0..10), Some(0));","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":100525,"byte_end":100561,"line_start":180,"line_end":180,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":100562,"byte_end":100569,"line_start":181,"line_end":181,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":699},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":100945,"byte_end":100949,"line_start":199,"line_end":199,"column_start":8,"column_end":12},"name":"join","qualname":"::free::join","value":"fn join<I, '_>(I, &'_ str) -> String where I: IntoIterator, I::Item: Display","parent":null,"children":[],"decl_id":null,"docs":" Combine all iterator elements into one String, seperated by `sep`.","sig":null,"attributes":[{"value":"/ Combine all iterator elements into one String, seperated by `sep`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":100703,"byte_end":100773,"line_start":190,"line_end":190,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":100774,"byte_end":100777,"line_start":191,"line_end":191,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `iterable.join(sep)`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":100778,"byte_end":100837,"line_start":192,"line_end":192,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":100838,"byte_end":100841,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":100842,"byte_end":100849,"line_start":194,"line_end":194,"column_start":1,"column_end":8}},{"value":"/ use itertools::join;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":100850,"byte_end":100874,"line_start":195,"line_end":195,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":100875,"byte_end":100878,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(join(&[1, 2, 3], \", \"), \"1, 2, 3\");","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":100879,"byte_end":100929,"line_start":197,"line_end":197,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":100930,"byte_end":100937,"line_start":198,"line_end":198,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":701},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":101374,"byte_end":101380,"line_start":216,"line_end":216,"column_start":8,"column_end":14},"name":"sorted","qualname":"::free::sorted","value":"fn sorted<I>(I) -> Vec<I::Item> where I: IntoIterator, I::Item: Ord","parent":null,"children":[],"decl_id":null,"docs":" Collect all the iterable's elements into a sorted vector in ascending order.","sig":null,"attributes":[{"value":"/ Collect all the iterable's elements into a sorted vector in ascending order.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":101081,"byte_end":101161,"line_start":206,"line_end":206,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":101162,"byte_end":101165,"line_start":207,"line_end":207,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `iterable.sorted()`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":101166,"byte_end":101224,"line_start":208,"line_end":208,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":101225,"byte_end":101228,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":101229,"byte_end":101236,"line_start":210,"line_end":210,"column_start":1,"column_end":8}},{"value":"/ use itertools::sorted;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":101237,"byte_end":101263,"line_start":211,"line_end":211,"column_start":1,"column_end":27}},{"value":"/ use itertools::assert_equal;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":101264,"byte_end":101296,"line_start":212,"line_end":212,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":101297,"byte_end":101300,"line_start":213,"line_end":213,"column_start":1,"column_end":4}},{"value":"/ assert_equal(sorted(\"rust\".chars()), \"rstu\".chars());","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":101301,"byte_end":101358,"line_start":214,"line_end":214,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/free.rs","byte_start":101359,"byte_end":101366,"line_start":215,"line_end":215,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":708},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/concat_impl.rs","byte_start":102005,"byte_end":102011,"line_start":17,"line_end":17,"column_start":8,"column_end":14},"name":"concat","qualname":"::concat_impl::concat","value":"fn concat<I>(I) -> I::Item where I: IntoIterator,\nI::Item: Extend<<<I as IntoIterator>::Item as IntoIterator>::Item> +\nIntoIterator + Default","parent":null,"children":[],"decl_id":null,"docs":" Combine all an iterator's elements into one element by using `Extend`.","sig":null,"attributes":[{"value":"/ Combine all an iterator's elements into one element by using `Extend`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/concat_impl.rs","byte_start":101519,"byte_end":101593,"line_start":3,"line_end":3,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/concat_impl.rs","byte_start":101594,"byte_end":101597,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator`-enabled version of `.concat()`","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/concat_impl.rs","byte_start":101598,"byte_end":101647,"line_start":5,"line_end":5,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/concat_impl.rs","byte_start":101648,"byte_end":101651,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This combinator will extend the first item with each of the rest of the","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/concat_impl.rs","byte_start":101652,"byte_end":101727,"line_start":7,"line_end":7,"column_start":1,"column_end":76}},{"value":"/ items of the iterator. If the iterator is empty, the default value of","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/concat_impl.rs","byte_start":101728,"byte_end":101801,"line_start":8,"line_end":8,"column_start":1,"column_end":74}},{"value":"/ `I::Item` is returned.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/concat_impl.rs","byte_start":101802,"byte_end":101828,"line_start":9,"line_end":9,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/concat_impl.rs","byte_start":101829,"byte_end":101832,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/concat_impl.rs","byte_start":101833,"byte_end":101844,"line_start":11,"line_end":11,"column_start":1,"column_end":12}},{"value":"/ use itertools::concat;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/concat_impl.rs","byte_start":101845,"byte_end":101871,"line_start":12,"line_end":12,"column_start":1,"column_end":27}},{"value":"/ ","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/concat_impl.rs","byte_start":101872,"byte_end":101876,"line_start":13,"line_end":13,"column_start":1,"column_end":5}},{"value":"/ let input = vec![vec![1], vec![2, 3], vec![4, 5, 6]];","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/concat_impl.rs","byte_start":101877,"byte_end":101934,"line_start":14,"line_end":14,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(concat(input), vec![1, 2, 3, 4, 5, 6]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/concat_impl.rs","byte_start":101935,"byte_end":101989,"line_start":15,"line_end":15,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/concat_impl.rs","byte_start":101990,"byte_end":101997,"line_start":16,"line_end":16,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":714},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/cons_tuples_impl.rs","byte_start":103696,"byte_end":103706,"line_start":44,"line_end":44,"column_start":12,"column_end":22},"name":"ConsTuples","qualname":"::cons_tuples_impl::ConsTuples","value":"ConsTuples {  }","parent":null,"children":[{"krate":0,"index":717}],"decl_id":null,"docs":" An iterator that maps an iterator of tuples like\n `((A, B), C)` to an iterator of `(A, B, C)`.","sig":null,"attributes":[{"value":"/ An iterator that maps an iterator of tuples like","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/cons_tuples_impl.rs","byte_start":103542,"byte_end":103594,"line_start":40,"line_end":40,"column_start":1,"column_end":53}},{"value":"/ `((A, B), C)` to an iterator of `(A, B, C)`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/cons_tuples_impl.rs","byte_start":103595,"byte_end":103643,"line_start":41,"line_end":41,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/cons_tuples_impl.rs","byte_start":103644,"byte_end":103647,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Used by the `iproduct!()` macro.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/cons_tuples_impl.rs","byte_start":103648,"byte_end":103684,"line_start":43,"line_end":43,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":721},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/cons_tuples_impl.rs","byte_start":103848,"byte_end":103853,"line_start":53,"line_end":53,"column_start":8,"column_end":13},"name":"clone","qualname":"<ConsTuples<I, J> as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> Self","parent":{"krate":2,"index":2882},"children":[],"decl_id":{"krate":2,"index":2883},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":722},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/cons_tuples_impl.rs","byte_start":104047,"byte_end":104058,"line_start":62,"line_end":62,"column_start":8,"column_end":19},"name":"cons_tuples","qualname":"::cons_tuples_impl::cons_tuples","value":"fn cons_tuples<I, J>(I) -> ConsTuples<I, J> where I: Iterator<Item = J>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that maps for example iterators of\n `((A, B), C)` to `(A, B, C)`.\n","sig":null,"attributes":[{"value":"/ Create an iterator that maps for example iterators of","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/cons_tuples_impl.rs","byte_start":103948,"byte_end":104005,"line_start":60,"line_end":60,"column_start":1,"column_end":58}},{"value":"/ `((A, B), C)` to `(A, B, C)`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/cons_tuples_impl.rs","byte_start":104006,"byte_end":104039,"line_start":61,"line_end":61,"column_start":1,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":735},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/diff.rs","byte_start":104990,"byte_end":105003,"line_start":21,"line_end":21,"column_start":5,"column_end":18},"name":"FirstMismatch","qualname":"::diff::Diff::FirstMismatch","value":"Diff::FirstMismatch(usize, PutBack<I>, PutBack<J>)","parent":{"krate":0,"index":732},"children":[],"decl_id":null,"docs":" The index of the first non-matching element along with both iterator's remaining elements\n starting with the first mis-match.\n","sig":null,"attributes":[{"value":"/ The index of the first non-matching element along with both iterator's remaining elements","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/diff.rs","byte_start":104849,"byte_end":104942,"line_start":19,"line_end":19,"column_start":5,"column_end":98}},{"value":"/ starting with the first mis-match.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/diff.rs","byte_start":104947,"byte_end":104985,"line_start":20,"line_end":20,"column_start":5,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":737},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/diff.rs","byte_start":105004,"byte_end":105009,"line_start":21,"line_end":21,"column_start":19,"column_end":24},"name":"0","qualname":"::diff::Diff::FirstMismatch::0","value":"usize","parent":{"krate":0,"index":735},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":738},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/diff.rs","byte_start":105011,"byte_end":105021,"line_start":21,"line_end":21,"column_start":26,"column_end":36},"name":"1","qualname":"::diff::Diff::FirstMismatch::1","value":"adaptors::PutBack<I>","parent":{"krate":0,"index":735},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":739},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/diff.rs","byte_start":105023,"byte_end":105033,"line_start":21,"line_end":21,"column_start":38,"column_end":48},"name":"2","qualname":"::diff::Diff::FirstMismatch::2","value":"adaptors::PutBack<J>","parent":{"krate":0,"index":735},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":740},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/diff.rs","byte_start":105136,"byte_end":105143,"line_start":23,"line_end":23,"column_start":5,"column_end":12},"name":"Shorter","qualname":"::diff::Diff::Shorter","value":"Diff::Shorter(usize, PutBack<I>)","parent":{"krate":0,"index":732},"children":[],"decl_id":null,"docs":" The total number of elements that were in `J` along with the remaining elements of `I`.\n","sig":null,"attributes":[{"value":"/ The total number of elements that were in `J` along with the remaining elements of `I`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/diff.rs","byte_start":105040,"byte_end":105131,"line_start":22,"line_end":22,"column_start":5,"column_end":96}}]},{"kind":"Field","id":{"krate":0,"index":742},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/diff.rs","byte_start":105144,"byte_end":105149,"line_start":23,"line_end":23,"column_start":13,"column_end":18},"name":"0","qualname":"::diff::Diff::Shorter::0","value":"usize","parent":{"krate":0,"index":740},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":743},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/diff.rs","byte_start":105151,"byte_end":105161,"line_start":23,"line_end":23,"column_start":20,"column_end":30},"name":"1","qualname":"::diff::Diff::Shorter::1","value":"adaptors::PutBack<I>","parent":{"krate":0,"index":740},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":744},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/diff.rs","byte_start":105264,"byte_end":105270,"line_start":25,"line_end":25,"column_start":5,"column_end":11},"name":"Longer","qualname":"::diff::Diff::Longer","value":"Diff::Longer(usize, PutBack<J>)","parent":{"krate":0,"index":732},"children":[],"decl_id":null,"docs":" The total number of elements that were in `I` along with the remaining elements of `J`.\n","sig":null,"attributes":[{"value":"/ The total number of elements that were in `I` along with the remaining elements of `J`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/diff.rs","byte_start":105168,"byte_end":105259,"line_start":24,"line_end":24,"column_start":5,"column_end":96}}]},{"kind":"Field","id":{"krate":0,"index":746},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/diff.rs","byte_start":105271,"byte_end":105276,"line_start":25,"line_end":25,"column_start":12,"column_end":17},"name":"0","qualname":"::diff::Diff::Longer::0","value":"usize","parent":{"krate":0,"index":744},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":747},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/diff.rs","byte_start":105278,"byte_end":105288,"line_start":25,"line_end":25,"column_start":19,"column_end":29},"name":"1","qualname":"::diff::Diff::Longer::1","value":"adaptors::PutBack<J>","parent":{"krate":0,"index":744},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":732},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/diff.rs","byte_start":104787,"byte_end":104791,"line_start":15,"line_end":15,"column_start":10,"column_end":14},"name":"Diff","qualname":"::diff::Diff","value":"enum Diff<I, J> where I: Iterator, J: Iterator {\n    FirstMismatch(usize, PutBack<I>, PutBack<J>),\n    Shorter(usize, PutBack<I>),\n    Longer(usize, PutBack<J>),\n}","parent":null,"children":[{"krate":0,"index":735},{"krate":0,"index":740},{"krate":0,"index":744}],"decl_id":null,"docs":" A type returned by the [`diff_with`](./fn.diff_with.html) function.","sig":null,"attributes":[{"value":"/ A type returned by the [`diff_with`](./fn.diff_with.html) function.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/diff.rs","byte_start":104589,"byte_end":104660,"line_start":11,"line_end":11,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/diff.rs","byte_start":104661,"byte_end":104664,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ `Diff` represents the way in which the elements yielded by the iterator `I` differ to some","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/diff.rs","byte_start":104665,"byte_end":104759,"line_start":13,"line_end":13,"column_start":1,"column_end":95}},{"value":"/ iterator `J`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/diff.rs","byte_start":104760,"byte_end":104777,"line_start":14,"line_end":14,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":748},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/diff.rs","byte_start":106019,"byte_end":106028,"line_start":40,"line_end":40,"column_start":8,"column_end":17},"name":"diff_with","qualname":"::diff::diff_with","value":"fn diff_with<I, J, F>(I, J, F) -> Option<Diff<I::IntoIter, J::IntoIter>> where\nI: IntoIterator, J: IntoIterator, F: for<'_, '_> Fn(&'_ I::Item, &'_ J::Item)\n-> bool","parent":null,"children":[],"decl_id":null,"docs":" Compares every element yielded by both `i` and `j` with the given function in lock-step and\n returns a `Diff` which describes how `j` differs from `i`.","sig":null,"attributes":[{"value":"/ Compares every element yielded by both `i` and `j` with the given function in lock-step and","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/diff.rs","byte_start":105294,"byte_end":105389,"line_start":28,"line_end":28,"column_start":1,"column_end":96}},{"value":"/ returns a `Diff` which describes how `j` differs from `i`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/diff.rs","byte_start":105390,"byte_end":105452,"line_start":29,"line_end":29,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/diff.rs","byte_start":105453,"byte_end":105456,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ If the number of elements yielded by `j` is less than the number of elements yielded by `i`,","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/diff.rs","byte_start":105457,"byte_end":105553,"line_start":31,"line_end":31,"column_start":1,"column_end":97}},{"value":"/ the number of `j` elements yielded will be returned along with `i`'s remaining elements as","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/diff.rs","byte_start":105554,"byte_end":105648,"line_start":32,"line_end":32,"column_start":1,"column_end":95}},{"value":"/ `Diff::Shorter`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/diff.rs","byte_start":105649,"byte_end":105669,"line_start":33,"line_end":33,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/diff.rs","byte_start":105670,"byte_end":105673,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ If the two elements of a step differ, the index of those elements along with the remaining","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/diff.rs","byte_start":105674,"byte_end":105768,"line_start":35,"line_end":35,"column_start":1,"column_end":95}},{"value":"/ elements of both `i` and `j` are returned as `Diff::FirstMismatch`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/diff.rs","byte_start":105769,"byte_end":105840,"line_start":36,"line_end":36,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/diff.rs","byte_start":105841,"byte_end":105844,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ If `i` becomes exhausted before `j` becomes exhausted, the number of elements in `i` along with","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/diff.rs","byte_start":105845,"byte_end":105944,"line_start":38,"line_end":38,"column_start":1,"column_end":100}},{"value":"/ the remaining `j` elements will be returned as `Diff::Longer`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/diff.rs","byte_start":105945,"byte_end":106011,"line_start":39,"line_end":39,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":760},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/format.rs","byte_start":107148,"byte_end":107158,"line_start":10,"line_end":10,"column_start":12,"column_end":22},"name":"FormatWith","qualname":"::format::FormatWith","value":"FormatWith {  }","parent":null,"children":[{"krate":0,"index":764},{"krate":0,"index":765}],"decl_id":null,"docs":" Format all iterator elements lazily, separated by `sep`.","sig":null,"attributes":[{"value":"/ Format all iterator elements lazily, separated by `sep`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/format.rs","byte_start":106884,"byte_end":106944,"line_start":4,"line_end":4,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/format.rs","byte_start":106945,"byte_end":106948,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ The format value can only be formatted once, after that the iterator is","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/format.rs","byte_start":106949,"byte_end":107024,"line_start":6,"line_end":6,"column_start":1,"column_end":76}},{"value":"/ exhausted.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/format.rs","byte_start":107025,"byte_end":107039,"line_start":7,"line_end":7,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/format.rs","byte_start":107040,"byte_end":107043,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ See [`.format_with()`](../trait.Itertools.html#method.format_with) for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/format.rs","byte_start":107044,"byte_end":107136,"line_start":9,"line_end":9,"column_start":1,"column_end":93}}]},{"kind":"Struct","id":{"krate":0,"index":1964},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/format.rs","byte_start":107581,"byte_end":107587,"line_start":24,"line_end":24,"column_start":12,"column_end":18},"name":"Format","qualname":"::format::Format","value":"Format {  }","parent":null,"children":[{"krate":0,"index":1967},{"krate":0,"index":1968}],"decl_id":null,"docs":" Format all iterator elements lazily, separated by `sep`.","sig":null,"attributes":[{"value":"/ Format all iterator elements lazily, separated by `sep`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/format.rs","byte_start":107306,"byte_end":107366,"line_start":16,"line_end":16,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/format.rs","byte_start":107367,"byte_end":107370,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ The format value can only be formatted once, after that the iterator is","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/format.rs","byte_start":107371,"byte_end":107446,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/ exhausted.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/format.rs","byte_start":107447,"byte_end":107461,"line_start":19,"line_end":19,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/format.rs","byte_start":107462,"byte_end":107465,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ See [`.format()`](../trait.Itertools.html#method.format)","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/format.rs","byte_start":107466,"byte_end":107526,"line_start":21,"line_end":21,"column_start":1,"column_end":61}},{"value":"/ for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/format.rs","byte_start":107527,"byte_end":107552,"line_start":22,"line_end":22,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":777},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/format.rs","byte_start":108377,"byte_end":108380,"line_start":53,"line_end":53,"column_start":8,"column_end":11},"name":"fmt","qualname":"<FormatWith as std::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10302},"children":[],"decl_id":{"krate":2,"index":10303},"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":797},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":110300,"byte_end":110303,"line_start":6,"line_end":6,"column_start":10,"column_end":13},"name":"Key","qualname":"::groupbylazy::KeyFunction::Key","value":"type Key;","parent":{"krate":0,"index":795},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":851},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":119678,"byte_end":119685,"line_start":287,"line_end":287,"column_start":12,"column_end":19},"name":"GroupBy","qualname":"::groupbylazy::GroupBy","value":"GroupBy {  }","parent":null,"children":[{"krate":0,"index":855},{"krate":0,"index":856}],"decl_id":null,"docs":" `GroupBy` is the storage for the lazy grouping operation.","sig":null,"attributes":[{"value":"/ `GroupBy` is the storage for the lazy grouping operation.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":119051,"byte_end":119112,"line_start":274,"line_end":274,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":119113,"byte_end":119116,"line_start":275,"line_end":275,"column_start":1,"column_end":4}},{"value":"/ If the groups are consumed in their original order, or if each","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":119117,"byte_end":119183,"line_start":276,"line_end":276,"column_start":1,"column_end":67}},{"value":"/ group is dropped without keeping it around, then `GroupBy` uses","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":119184,"byte_end":119251,"line_start":277,"line_end":277,"column_start":1,"column_end":68}},{"value":"/ no allocations. It needs allocations only if several group iterators","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":119252,"byte_end":119324,"line_start":278,"line_end":278,"column_start":1,"column_end":73}},{"value":"/ are alive at the same time.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":119325,"byte_end":119356,"line_start":279,"line_end":279,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":119357,"byte_end":119360,"line_start":280,"line_end":280,"column_start":1,"column_end":4}},{"value":"/ This type implements `IntoIterator` (it is **not** an iterator","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":119361,"byte_end":119427,"line_start":281,"line_end":281,"column_start":1,"column_end":67}},{"value":"/ itself), because the group iterators need to borrow from this","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":119428,"byte_end":119493,"line_start":282,"line_end":282,"column_start":1,"column_end":66}},{"value":"/ value. It should be stored in a local variable or temporary and","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":119494,"byte_end":119561,"line_start":283,"line_end":283,"column_start":1,"column_end":68}},{"value":"/ iterated.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":119562,"byte_end":119575,"line_start":284,"line_end":284,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":119576,"byte_end":119579,"line_start":285,"line_end":285,"column_start":1,"column_end":4}},{"value":"/ See [`.group_by()`](../trait.Itertools.html#method.group_by) for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":119580,"byte_end":119666,"line_start":286,"line_end":286,"column_start":1,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":874},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":121152,"byte_end":121161,"line_start":344,"line_end":344,"column_start":8,"column_end":17},"name":"into_iter","qualname":"<&'a GroupBy<K, I, F> as std::iter::IntoIterator>::into_iter","value":"fn into_iter(Self) -> Self::IntoIter","parent":{"krate":2,"index":8405},"children":[],"decl_id":{"krate":2,"index":8408},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":875},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":121478,"byte_end":121484,"line_start":356,"line_end":356,"column_start":12,"column_end":18},"name":"Groups","qualname":"::groupbylazy::Groups","value":"Groups {  }","parent":null,"children":[{"krate":0,"index":880}],"decl_id":null,"docs":" An iterator that yields the Group iterators.","sig":null,"attributes":[{"value":"/ An iterator that yields the Group iterators.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":121230,"byte_end":121278,"line_start":350,"line_end":350,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":121279,"byte_end":121282,"line_start":351,"line_end":351,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `(K, Group)`:","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":121283,"byte_end":121325,"line_start":352,"line_end":352,"column_start":1,"column_end":43}},{"value":"/ the group's key `K` and the group's iterator.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":121326,"byte_end":121375,"line_start":353,"line_end":353,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":121376,"byte_end":121379,"line_start":354,"line_end":354,"column_start":1,"column_end":4}},{"value":"/ See [`.group_by()`](../trait.Itertools.html#method.group_by) for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":121380,"byte_end":121466,"line_start":355,"line_end":355,"column_start":1,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":887},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":121814,"byte_end":121818,"line_start":372,"line_end":372,"column_start":8,"column_end":12},"name":"next","qualname":"<Groups as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":121797,"byte_end":121806,"line_start":371,"line_end":371,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":889},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":122352,"byte_end":122357,"line_start":390,"line_end":390,"column_start":12,"column_end":17},"name":"Group","qualname":"::groupbylazy::Group","value":"Group {  }","parent":null,"children":[{"krate":0,"index":894},{"krate":0,"index":895},{"krate":0,"index":896}],"decl_id":null,"docs":" An iterator for the elements in a single group.","sig":null,"attributes":[{"value":"/ An iterator for the elements in a single group.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":122245,"byte_end":122296,"line_start":387,"line_end":387,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":122297,"byte_end":122300,"line_start":388,"line_end":388,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":122301,"byte_end":122340,"line_start":389,"line_end":389,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":902},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":122615,"byte_end":122619,"line_start":403,"line_end":403,"column_start":8,"column_end":12},"name":"drop","qualname":"<Group as std::ops::Drop>::drop","value":"fn drop<'_>(&'_ mut Self)","parent":{"krate":2,"index":3510},"children":[],"decl_id":{"krate":2,"index":3511},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":909},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":122889,"byte_end":122893,"line_start":416,"line_end":416,"column_start":8,"column_end":12},"name":"next","qualname":"<Group as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":122872,"byte_end":122881,"line_start":415,"line_end":415,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":912},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":124218,"byte_end":124228,"line_start":461,"line_end":461,"column_start":12,"column_end":22},"name":"IntoChunks","qualname":"::groupbylazy::IntoChunks","value":"IntoChunks {  }","parent":null,"children":[{"krate":0,"index":914},{"krate":0,"index":915}],"decl_id":null,"docs":" `ChunkLazy` is the storage for a lazy chunking operation.","sig":null,"attributes":[{"value":"/ `ChunkLazy` is the storage for a lazy chunking operation.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":123629,"byte_end":123690,"line_start":448,"line_end":448,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":123691,"byte_end":123694,"line_start":449,"line_end":449,"column_start":1,"column_end":4}},{"value":"/ `IntoChunks` behaves just like `GroupBy`: it is iterable, and","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":123695,"byte_end":123760,"line_start":450,"line_end":450,"column_start":1,"column_end":66}},{"value":"/ it only buffers if several chunk iterators are alive at the same time.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":123761,"byte_end":123835,"line_start":451,"line_end":451,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":123836,"byte_end":123839,"line_start":452,"line_end":452,"column_start":1,"column_end":4}},{"value":"/ This type implements `IntoIterator` (it is **not** an iterator","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":123840,"byte_end":123906,"line_start":453,"line_end":453,"column_start":1,"column_end":67}},{"value":"/ itself), because the chunk iterators need to borrow from this","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":123907,"byte_end":123972,"line_start":454,"line_end":454,"column_start":1,"column_end":66}},{"value":"/ value. It should be stored in a local variable or temporary and","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":123973,"byte_end":124040,"line_start":455,"line_end":455,"column_start":1,"column_end":68}},{"value":"/ iterated.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":124041,"byte_end":124054,"line_start":456,"line_end":456,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":124055,"byte_end":124058,"line_start":457,"line_end":457,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `Chunk`, each chunk's iterator.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":124059,"byte_end":124119,"line_start":458,"line_end":458,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":124120,"byte_end":124123,"line_start":459,"line_end":459,"column_start":1,"column_end":4}},{"value":"/ See [`.chunks()`](../trait.Itertools.html#method.chunks) for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":124124,"byte_end":124206,"line_start":460,"line_end":460,"column_start":1,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":925},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":124989,"byte_end":124998,"line_start":492,"line_end":492,"column_start":8,"column_end":17},"name":"into_iter","qualname":"<&'a IntoChunks<I> as std::iter::IntoIterator>::into_iter","value":"fn into_iter(Self) -> Self::IntoIter","parent":{"krate":2,"index":8405},"children":[],"decl_id":{"krate":2,"index":8408},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":926},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":125277,"byte_end":125283,"line_start":505,"line_end":505,"column_start":12,"column_end":18},"name":"Chunks","qualname":"::groupbylazy::Chunks","value":"Chunks {  }","parent":null,"children":[{"krate":0,"index":929}],"decl_id":null,"docs":" An iterator that yields the Chunk iterators.","sig":null,"attributes":[{"value":"/ An iterator that yields the Chunk iterators.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":125088,"byte_end":125136,"line_start":500,"line_end":500,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":125137,"byte_end":125140,"line_start":501,"line_end":501,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `Chunk`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":125141,"byte_end":125178,"line_start":502,"line_end":502,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":125179,"byte_end":125182,"line_start":503,"line_end":503,"column_start":1,"column_end":4}},{"value":"/ See [`.chunks()`](../trait.Itertools.html#method.chunks) for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":125183,"byte_end":125265,"line_start":504,"line_end":504,"column_start":1,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":934},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":125516,"byte_end":125520,"line_start":519,"line_end":519,"column_start":8,"column_end":12},"name":"next","qualname":"<Chunks as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":125499,"byte_end":125508,"line_start":518,"line_end":518,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":936},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":126001,"byte_end":126006,"line_start":536,"line_end":536,"column_start":12,"column_end":17},"name":"Chunk","qualname":"::groupbylazy::Chunk","value":"Chunk {  }","parent":null,"children":[{"krate":0,"index":939},{"krate":0,"index":940},{"krate":0,"index":941}],"decl_id":null,"docs":" An iterator for the elements in a single chunk.","sig":null,"attributes":[{"value":"/ An iterator for the elements in a single chunk.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":125894,"byte_end":125945,"line_start":533,"line_end":533,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":125946,"byte_end":125949,"line_start":534,"line_end":534,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":125950,"byte_end":125989,"line_start":535,"line_end":535,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":945},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":126235,"byte_end":126239,"line_start":549,"line_end":549,"column_start":8,"column_end":12},"name":"drop","qualname":"<Chunk as std::ops::Drop>::drop","value":"fn drop<'_>(&'_ mut Self)","parent":{"krate":2,"index":3510},"children":[],"decl_id":{"krate":2,"index":3511},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":950},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":126438,"byte_end":126442,"line_start":560,"line_end":560,"column_start":8,"column_end":12},"name":"next","qualname":"<Chunk as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":126421,"byte_end":126430,"line_start":559,"line_end":559,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2011},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/intersperse.rs","byte_start":126959,"byte_end":126970,"line_start":13,"line_end":13,"column_start":12,"column_end":23},"name":"Intersperse","qualname":"::intersperse::Intersperse","value":"Intersperse {  }","parent":null,"children":[{"krate":0,"index":2013},{"krate":0,"index":2014},{"krate":0,"index":2015}],"decl_id":null,"docs":" An iterator adaptor to insert a particular value\n between each element of the adapted iterator.","sig":null,"attributes":[{"value":"/ An iterator adaptor to insert a particular value","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/intersperse.rs","byte_start":126671,"byte_end":126723,"line_start":5,"line_end":5,"column_start":1,"column_end":53}},{"value":"/ between each element of the adapted iterator.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/intersperse.rs","byte_start":126724,"byte_end":126773,"line_start":6,"line_end":6,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/intersperse.rs","byte_start":126774,"byte_end":126777,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/intersperse.rs","byte_start":126778,"byte_end":126816,"line_start":8,"line_end":8,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/intersperse.rs","byte_start":126817,"byte_end":126820,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/intersperse.rs","byte_start":126821,"byte_end":126850,"line_start":10,"line_end":10,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/intersperse.rs","byte_start":126851,"byte_end":126854,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ See [`.intersperse()`](../trait.Itertools.html#method.intersperse) for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/intersperse.rs","byte_start":126855,"byte_end":126947,"line_start":12,"line_end":12,"column_start":1,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":963},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/intersperse.rs","byte_start":127454,"byte_end":127458,"line_start":39,"line_end":39,"column_start":8,"column_end":12},"name":"next","qualname":"<Intersperse<I> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<I::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/intersperse.rs","byte_start":127437,"byte_end":127446,"line_start":38,"line_end":38,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":964},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/intersperse.rs","byte_start":127772,"byte_end":127781,"line_start":52,"line_end":52,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<Intersperse<I> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":995},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":131066,"byte_end":131072,"line_start":112,"line_end":112,"column_start":12,"column_end":18},"name":"KMerge","qualname":"::kmerge_impl::KMerge","value":"KMerge {  }","parent":null,"children":[{"krate":0,"index":997}],"decl_id":null,"docs":" An iterator adaptor that merges an abitrary number of base iterators in ascending order.\n If all base iterators are sorted (ascending), the result is sorted.","sig":null,"attributes":[{"value":"/ An iterator adaptor that merges an abitrary number of base iterators in ascending order.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":130759,"byte_end":130851,"line_start":106,"line_end":106,"column_start":1,"column_end":93}},{"value":"/ If all base iterators are sorted (ascending), the result is sorted.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":130852,"byte_end":130923,"line_start":107,"line_end":107,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":130924,"byte_end":130927,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":130928,"byte_end":130967,"line_start":109,"line_end":109,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":130968,"byte_end":130971,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ See [`.kmerge()`](../trait.Itertools.html#method.kmerge) for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":130972,"byte_end":131054,"line_start":111,"line_end":111,"column_start":1,"column_end":83}}]},{"kind":"Function","id":{"krate":0,"index":998},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":131450,"byte_end":131456,"line_start":130,"line_end":130,"column_start":8,"column_end":14},"name":"kmerge","qualname":"::kmerge_impl::kmerge","value":"fn kmerge<I>(I) -> KMerge<<I::Item as IntoIterator>::IntoIter> where\nI: IntoIterator, I::Item: IntoIterator,\n<<I as IntoIterator>::Item as IntoIterator>::Item: PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that merges elements of the contained iterators using\n the ordering function.","sig":null,"attributes":[{"value":"/ Create an iterator that merges elements of the contained iterators using","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":131131,"byte_end":131207,"line_start":118,"line_end":118,"column_start":1,"column_end":77}},{"value":"/ the ordering function.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":131208,"byte_end":131234,"line_start":119,"line_end":119,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":131235,"byte_end":131238,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ Equivalent to `iterable.into_iter().kmerge()`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":131239,"byte_end":131289,"line_start":121,"line_end":121,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":131290,"byte_end":131293,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":131294,"byte_end":131301,"line_start":123,"line_end":123,"column_start":1,"column_end":8}},{"value":"/ use itertools::kmerge;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":131302,"byte_end":131328,"line_start":124,"line_end":124,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":131329,"byte_end":131332,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ for elt in kmerge(vec![vec![0, 2, 4], vec![1, 3, 5], vec![6, 7]]) {","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":131333,"byte_end":131404,"line_start":126,"line_end":126,"column_start":1,"column_end":72}},{"value":"/     /* loop body */","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":131405,"byte_end":131428,"line_start":127,"line_end":127,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":131429,"byte_end":131434,"line_start":128,"line_end":128,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":131435,"byte_end":131442,"line_start":129,"line_end":129,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1004},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":132016,"byte_end":132021,"line_start":147,"line_end":147,"column_start":8,"column_end":13},"name":"clone","qualname":"<KMerge<I> as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> KMerge<I>","parent":{"krate":2,"index":2882},"children":[],"decl_id":{"krate":2,"index":2883},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1008},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":132214,"byte_end":132218,"line_start":158,"line_end":158,"column_start":8,"column_end":12},"name":"next","qualname":"<KMerge<I> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1010},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":132570,"byte_end":132579,"line_start":171,"line_end":171,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<KMerge<I> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1012},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":133036,"byte_end":133044,"line_start":186,"line_end":186,"column_start":12,"column_end":20},"name":"KMergeBy","qualname":"::kmerge_impl::KMergeBy","value":"KMergeBy {  }","parent":null,"children":[{"krate":0,"index":1015},{"krate":0,"index":1016}],"decl_id":null,"docs":" An iterator adaptor that merges an abitrary number of base iterators\n according to an ordering function.","sig":null,"attributes":[{"value":"/ An iterator adaptor that merges an abitrary number of base iterators","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":132772,"byte_end":132844,"line_start":179,"line_end":179,"column_start":1,"column_end":73}},{"value":"/ according to an ordering function.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":132845,"byte_end":132883,"line_start":180,"line_end":180,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":132884,"byte_end":132887,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":132888,"byte_end":132927,"line_start":182,"line_end":182,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":132928,"byte_end":132931,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ See [`.kmerge_by()`](../trait.Itertools.html#method.kmerge_by) for more","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":132932,"byte_end":133007,"line_start":184,"line_end":184,"column_start":1,"column_end":76}},{"value":"/ information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":133008,"byte_end":133024,"line_start":185,"line_end":185,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":1017},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":133271,"byte_end":133280,"line_start":196,"line_end":196,"column_start":8,"column_end":17},"name":"kmerge_by","qualname":"::kmerge_impl::kmerge_by","value":"fn kmerge_by<I, F>(I, F) -> KMergeBy<<I::Item as IntoIterator>::IntoIter, F>\nwhere I: IntoIterator, I::Item: IntoIterator,\nF: for<'_,\n'_> FnMut(&'_ <<I as IntoIterator>::Item as IntoIterator>::Item,\n&'_ <<I as IntoIterator>::Item as IntoIterator>::Item) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that merges elements of the contained iterators.","sig":null,"attributes":[{"value":"/ Create an iterator that merges elements of the contained iterators.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":133125,"byte_end":133196,"line_start":193,"line_end":193,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":133197,"byte_end":133200,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/ Equivalent to `iterable.into_iter().kmerge_by(less_than)`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":133201,"byte_end":133263,"line_start":195,"line_end":195,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1026},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":134044,"byte_end":134048,"line_start":218,"line_end":218,"column_start":8,"column_end":12},"name":"next","qualname":"<KMergeBy<I, F> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1028},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":134457,"byte_end":134466,"line_start":232,"line_end":232,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<KMergeBy<I, F> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2021},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/minmax.rs","byte_start":134854,"byte_end":134864,"line_start":7,"line_end":7,"column_start":5,"column_end":15},"name":"NoElements","qualname":"::minmax::MinMaxResult::NoElements","value":"MinMaxResult::NoElements","parent":{"krate":0,"index":2019},"children":[],"decl_id":null,"docs":" Empty iterator\n","sig":null,"attributes":[{"value":"/ Empty iterator","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/minmax.rs","byte_start":134831,"byte_end":134849,"line_start":6,"line_end":6,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2023},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/minmax.rs","byte_start":134946,"byte_end":134956,"line_start":10,"line_end":10,"column_start":5,"column_end":15},"name":"OneElement","qualname":"::minmax::MinMaxResult::OneElement","value":"MinMaxResult::OneElement(T)","parent":{"krate":0,"index":2019},"children":[],"decl_id":null,"docs":" Iterator with one element, so the minimum and maximum are the same\n","sig":null,"attributes":[{"value":"/ Iterator with one element, so the minimum and maximum are the same","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/minmax.rs","byte_start":134871,"byte_end":134941,"line_start":9,"line_end":9,"column_start":5,"column_end":75}}]},{"kind":"Field","id":{"krate":0,"index":2025},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/minmax.rs","byte_start":134957,"byte_end":134958,"line_start":10,"line_end":10,"column_start":16,"column_end":17},"name":"0","qualname":"::minmax::MinMaxResult::OneElement::0","value":"T","parent":{"krate":0,"index":2023},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2026},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/minmax.rs","byte_start":135069,"byte_end":135075,"line_start":14,"line_end":14,"column_start":5,"column_end":11},"name":"MinMax","qualname":"::minmax::MinMaxResult::MinMax","value":"MinMaxResult::MinMax(T, T)","parent":{"krate":0,"index":2019},"children":[],"decl_id":null,"docs":" More than one element in the iterator, the first element is not larger\n than the second\n","sig":null,"attributes":[{"value":"/ More than one element in the iterator, the first element is not larger","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/minmax.rs","byte_start":134966,"byte_end":135040,"line_start":12,"line_end":12,"column_start":5,"column_end":79}},{"value":"/ than the second","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/minmax.rs","byte_start":135045,"byte_end":135064,"line_start":13,"line_end":13,"column_start":5,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":2028},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/minmax.rs","byte_start":135076,"byte_end":135077,"line_start":14,"line_end":14,"column_start":12,"column_end":13},"name":"0","qualname":"::minmax::MinMaxResult::MinMax::0","value":"T","parent":{"krate":0,"index":2026},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2029},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/minmax.rs","byte_start":135079,"byte_end":135080,"line_start":14,"line_end":14,"column_start":15,"column_end":16},"name":"1","qualname":"::minmax::MinMaxResult::MinMax::1","value":"T","parent":{"krate":0,"index":2026},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2019},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/minmax.rs","byte_start":134809,"byte_end":134821,"line_start":5,"line_end":5,"column_start":10,"column_end":22},"name":"MinMaxResult","qualname":"::minmax::MinMaxResult","value":"enum MinMaxResult<T> { NoElements, OneElement(T), MinMax(T, T), }","parent":null,"children":[{"krate":0,"index":2021},{"krate":0,"index":2023},{"krate":0,"index":2026}],"decl_id":null,"docs":" `MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for\n more detail.\n","sig":null,"attributes":[{"value":"/ `MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/minmax.rs","byte_start":134660,"byte_end":134741,"line_start":2,"line_end":2,"column_start":1,"column_end":82}},{"value":"/ more detail.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/minmax.rs","byte_start":134742,"byte_end":134758,"line_start":3,"line_end":3,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1033},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/minmax.rs","byte_start":135893,"byte_end":135904,"line_start":38,"line_end":38,"column_start":12,"column_end":23},"name":"into_option","qualname":"<MinMaxResult<T>>::into_option","value":"fn into_option(Self) -> Option<(T, T)>","parent":null,"children":[],"decl_id":null,"docs":" `into_option` creates an `Option` of type `(T, T)`. The returned `Option`\n has variant `None` if and only if the `MinMaxResult` has variant\n `NoElements`. Otherwise `Some((x, y))` is returned where `x <= y`.\n If the `MinMaxResult` has variant `OneElement(x)`, performing this\n operation will make one clone of `x`.","sig":null,"attributes":[{"value":"/ `into_option` creates an `Option` of type `(T, T)`. The returned `Option`","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/minmax.rs","byte_start":135122,"byte_end":135199,"line_start":18,"line_end":18,"column_start":5,"column_end":82}},{"value":"/ has variant `None` if and only if the `MinMaxResult` has variant","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/minmax.rs","byte_start":135204,"byte_end":135272,"line_start":19,"line_end":19,"column_start":5,"column_end":73}},{"value":"/ `NoElements`. Otherwise `Some((x, y))` is returned where `x <= y`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/minmax.rs","byte_start":135277,"byte_end":135347,"line_start":20,"line_end":20,"column_start":5,"column_end":75}},{"value":"/ If the `MinMaxResult` has variant `OneElement(x)`, performing this","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/minmax.rs","byte_start":135352,"byte_end":135422,"line_start":21,"line_end":21,"column_start":5,"column_end":75}},{"value":"/ operation will make one clone of `x`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/minmax.rs","byte_start":135427,"byte_end":135468,"line_start":22,"line_end":22,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/minmax.rs","byte_start":135473,"byte_end":135476,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/minmax.rs","byte_start":135481,"byte_end":135495,"line_start":24,"line_end":24,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/minmax.rs","byte_start":135500,"byte_end":135503,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/minmax.rs","byte_start":135508,"byte_end":135515,"line_start":26,"line_end":26,"column_start":5,"column_end":12}},{"value":"/ use itertools::MinMaxResult::{self, NoElements, OneElement, MinMax};","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/minmax.rs","byte_start":135520,"byte_end":135592,"line_start":27,"line_end":27,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/minmax.rs","byte_start":135597,"byte_end":135600,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ let r: MinMaxResult<i32> = NoElements;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/minmax.rs","byte_start":135605,"byte_end":135647,"line_start":29,"line_end":29,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(r.into_option(), None);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/minmax.rs","byte_start":135652,"byte_end":135690,"line_start":30,"line_end":30,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/minmax.rs","byte_start":135695,"byte_end":135698,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ let r = OneElement(1);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/minmax.rs","byte_start":135703,"byte_end":135729,"line_start":32,"line_end":32,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(r.into_option(), Some((1, 1)));","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/minmax.rs","byte_start":135734,"byte_end":135780,"line_start":33,"line_end":33,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/minmax.rs","byte_start":135785,"byte_end":135788,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ let r = MinMax(1, 2);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/minmax.rs","byte_start":135793,"byte_end":135818,"line_start":35,"line_end":35,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(r.into_option(), Some((1, 2)));","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/minmax.rs","byte_start":135823,"byte_end":135869,"line_start":36,"line_end":36,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/minmax.rs","byte_start":135874,"byte_end":135881,"line_start":37,"line_end":37,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":2044},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/pad_tail.rs","byte_start":138829,"byte_end":138837,"line_start":11,"line_end":11,"column_start":12,"column_end":20},"name":"PadUsing","qualname":"::pad_tail::PadUsing","value":"PadUsing {  }","parent":null,"children":[{"krate":0,"index":2047},{"krate":0,"index":2048},{"krate":0,"index":2049},{"krate":0,"index":2050}],"decl_id":null,"docs":" An iterator adaptor that pads a sequence to a minimum length by filling\n missing elements using a closure.","sig":null,"attributes":[{"value":"/ An iterator adaptor that pads a sequence to a minimum length by filling","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/pad_tail.rs","byte_start":138550,"byte_end":138625,"line_start":4,"line_end":4,"column_start":1,"column_end":76}},{"value":"/ missing elements using a closure.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/pad_tail.rs","byte_start":138626,"byte_end":138663,"line_start":5,"line_end":5,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/pad_tail.rs","byte_start":138664,"byte_end":138667,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/pad_tail.rs","byte_start":138668,"byte_end":138707,"line_start":7,"line_end":7,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/pad_tail.rs","byte_start":138708,"byte_end":138711,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ See [`.pad_using()`](../trait.Itertools.html#method.pad_using) for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/pad_tail.rs","byte_start":138712,"byte_end":138800,"line_start":9,"line_end":9,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1053},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/pad_tail.rs","byte_start":139347,"byte_end":139351,"line_start":38,"line_end":38,"column_start":8,"column_end":12},"name":"next","qualname":"<PadUsing<I, F> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<I::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/pad_tail.rs","byte_start":139330,"byte_end":139339,"line_start":37,"line_end":37,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1054},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/pad_tail.rs","byte_start":139785,"byte_end":139794,"line_start":56,"line_end":56,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<PadUsing<I, F> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1058},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/pad_tail.rs","byte_start":140109,"byte_end":140118,"line_start":66,"line_end":66,"column_start":8,"column_end":17},"name":"next_back","qualname":"<PadUsing<I, F> as std::iter::DoubleEndedIterator>::next_back","value":"fn next_back<'_>(&'_ mut Self) -> Option<I::Item>","parent":{"krate":2,"index":8449},"children":[],"decl_id":{"krate":2,"index":8450},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1072},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/peeking_take_while.rs","byte_start":141007,"byte_end":141018,"line_start":14,"line_end":14,"column_start":11,"column_end":22},"name":"PeekingNext","qualname":"::peeking_take_while::PeekingNext","value":"PeekingNext: Iterator","parent":null,"children":[{"krate":0,"index":1073}],"decl_id":null,"docs":" An iterator that allows peeking at an element before deciding to accept it.","sig":null,"attributes":[{"value":"/ An iterator that allows peeking at an element before deciding to accept it.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/peeking_take_while.rs","byte_start":140601,"byte_end":140680,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/peeking_take_while.rs","byte_start":140681,"byte_end":140684,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ See [`.peeking_take_while()`](trait.Itertools.html#method.peeking_take_while)","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/peeking_take_while.rs","byte_start":140685,"byte_end":140766,"line_start":8,"line_end":8,"column_start":1,"column_end":82}},{"value":"/ for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/peeking_take_while.rs","byte_start":140767,"byte_end":140792,"line_start":9,"line_end":9,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/peeking_take_while.rs","byte_start":140793,"byte_end":140796,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This is implemented by peeking adaptors like peekable and put back,","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/peeking_take_while.rs","byte_start":140797,"byte_end":140868,"line_start":11,"line_end":11,"column_start":1,"column_end":72}},{"value":"/ but also by a few iterators that can be peeked natively, like the slice’s","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/peeking_take_while.rs","byte_start":140869,"byte_end":140948,"line_start":12,"line_end":12,"column_start":1,"column_end":78}},{"value":"/ by reference iterator (`std::slice::Iter`).","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/peeking_take_while.rs","byte_start":140949,"byte_end":140996,"line_start":13,"line_end":13,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1073},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/peeking_take_while.rs","byte_start":141202,"byte_end":141214,"line_start":18,"line_end":18,"column_start":8,"column_end":20},"name":"peeking_next","qualname":"::peeking_take_while::PeekingNext::peeking_next","value":"fn peeking_next<F, '_>(&'_ mut Self, F) -> Option<Self::Item> where\nF: for<'_> FnOnce(&'_ Self::Item) -> bool","parent":{"krate":0,"index":1072},"children":[],"decl_id":null,"docs":" Pass a reference to the next iterator element to the closure `accept`;\n if `accept` returns true, return it as the next element,\n else None.\n","sig":null,"attributes":[{"value":"/ Pass a reference to the next iterator element to the closure `accept`;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/peeking_take_while.rs","byte_start":141036,"byte_end":141110,"line_start":15,"line_end":15,"column_start":5,"column_end":79}},{"value":"/ if `accept` returns true, return it as the next element,","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/peeking_take_while.rs","byte_start":141115,"byte_end":141175,"line_start":16,"line_end":16,"column_start":5,"column_end":65}},{"value":"/ else None.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/peeking_take_while.rs","byte_start":141180,"byte_end":141194,"line_start":17,"line_end":17,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":1077},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/peeking_take_while.rs","byte_start":141379,"byte_end":141391,"line_start":25,"line_end":25,"column_start":8,"column_end":20},"name":"peeking_next","qualname":"<Peekable<I> as peeking_take_while::PeekingNext>::peeking_next","value":"fn peeking_next<F, '_>(&'_ mut Self, F) -> Option<Self::Item> where\nF: for<'_> FnOnce(&'_ Self::Item) -> bool","parent":{"krate":0,"index":1072},"children":[],"decl_id":{"krate":0,"index":1073},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1081},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/peeking_take_while.rs","byte_start":141706,"byte_end":141718,"line_start":40,"line_end":40,"column_start":8,"column_end":20},"name":"peeking_next","qualname":"<PutBack<I> as peeking_take_while::PeekingNext>::peeking_next","value":"fn peeking_next<F, '_>(&'_ mut Self, F) -> Option<Self::Item> where\nF: for<'_> FnOnce(&'_ Self::Item) -> bool","parent":{"krate":0,"index":1072},"children":[],"decl_id":{"krate":0,"index":1073},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1085},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/peeking_take_while.rs","byte_start":142103,"byte_end":142115,"line_start":58,"line_end":58,"column_start":8,"column_end":20},"name":"peeking_next","qualname":"<PutBackN<I> as peeking_take_while::PeekingNext>::peeking_next","value":"fn peeking_next<F, '_>(&'_ mut Self, F) -> Option<Self::Item> where\nF: for<'_> FnOnce(&'_ Self::Item) -> bool","parent":{"krate":0,"index":1072},"children":[],"decl_id":{"krate":0,"index":1073},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1087},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/peeking_take_while.rs","byte_start":142631,"byte_end":142647,"line_start":77,"line_end":77,"column_start":12,"column_end":28},"name":"PeekingTakeWhile","qualname":"::peeking_take_while::PeekingTakeWhile","value":"PeekingTakeWhile {  }","parent":null,"children":[{"krate":0,"index":1091},{"krate":0,"index":1092}],"decl_id":null,"docs":" An iterator adaptor that takes items while a closure returns `true`.","sig":null,"attributes":[{"value":"/ An iterator adaptor that takes items while a closure returns `true`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/peeking_take_while.rs","byte_start":142432,"byte_end":142504,"line_start":73,"line_end":73,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/peeking_take_while.rs","byte_start":142505,"byte_end":142508,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ See [`.peeking_take_while()`](../trait.Itertools.html#method.peeking_take_while)","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/peeking_take_while.rs","byte_start":142509,"byte_end":142593,"line_start":75,"line_end":75,"column_start":1,"column_end":85}},{"value":"/ for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/peeking_take_while.rs","byte_start":142594,"byte_end":142619,"line_start":76,"line_end":76,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1101},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/peeking_take_while.rs","byte_start":143074,"byte_end":143078,"line_start":100,"line_end":100,"column_start":8,"column_end":12},"name":"next","qualname":"<PeekingTakeWhile as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1102},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/peeking_take_while.rs","byte_start":143172,"byte_end":143181,"line_start":104,"line_end":104,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<PeekingTakeWhile as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1105},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":144986,"byte_end":145000,"line_start":7,"line_end":7,"column_start":12,"column_end":26},"name":"ProcessResults","qualname":"::process_results_impl::ProcessResults","value":"ProcessResults {  }","parent":null,"children":[{"krate":0,"index":1109},{"krate":0,"index":1110}],"decl_id":null,"docs":" An iterator that produces only the `T` values as long as the\n inner iterator produces `Ok(T)`.","sig":null,"attributes":[{"value":"/ An iterator that produces only the `T` values as long as the","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":144769,"byte_end":144833,"line_start":2,"line_end":2,"column_start":1,"column_end":65}},{"value":"/ inner iterator produces `Ok(T)`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":144834,"byte_end":144870,"line_start":3,"line_end":3,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":144871,"byte_end":144874,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ Used by [`process_results`](../fn.process_results.html), see its docs","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":144875,"byte_end":144948,"line_start":5,"line_end":5,"column_start":1,"column_end":74}},{"value":"/ for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":144949,"byte_end":144974,"line_start":6,"line_end":6,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1117},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":145195,"byte_end":145199,"line_start":17,"line_end":17,"column_start":8,"column_end":12},"name":"next","qualname":"<ProcessResults as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1118},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":145457,"byte_end":145466,"line_start":28,"line_end":28,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<ProcessResults as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1119},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":146905,"byte_end":146920,"line_start":69,"line_end":69,"column_start":8,"column_end":23},"name":"process_results","qualname":"::process_results_impl::process_results","value":"fn process_results<I, F, T, E, R>(I, F) -> Result<R, E> where\nI: IntoIterator<Item = Result<T, E>>, F: for<'_> FnOnce(ProcessResults) -> R","parent":null,"children":[],"decl_id":null,"docs":" “Lift” a function of the values of an iterator so that it can process\n an iterator of `Result` values instead.","sig":null,"attributes":[{"value":"/ “Lift” a function of the values of an iterator so that it can process","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":145572,"byte_end":145649,"line_start":34,"line_end":34,"column_start":1,"column_end":74}},{"value":"/ an iterator of `Result` values instead.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":145650,"byte_end":145693,"line_start":35,"line_end":35,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":145694,"byte_end":145697,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ `iterable` is an iterator or iterable with `Result<T, E>` elements, where","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":145698,"byte_end":145775,"line_start":37,"line_end":37,"column_start":1,"column_end":78}},{"value":"/ `T` is the value type and `E` the error type.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":145776,"byte_end":145825,"line_start":38,"line_end":38,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":145826,"byte_end":145829,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ `processor` is a closure that receives an adapted version of the iterable","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":145830,"byte_end":145907,"line_start":40,"line_end":40,"column_start":1,"column_end":78}},{"value":"/ as the only argument — the adapted iterator produces elements of type `T`,","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":145908,"byte_end":145988,"line_start":41,"line_end":41,"column_start":1,"column_end":79}},{"value":"/ as long as the original iterator produces `Ok` values.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":145989,"byte_end":146047,"line_start":42,"line_end":42,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":146048,"byte_end":146051,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ If the original iterable produces an error at any point, the adapted","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":146052,"byte_end":146124,"line_start":44,"line_end":44,"column_start":1,"column_end":73}},{"value":"/ iterator ends and the `process_results` function will return the","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":146125,"byte_end":146193,"line_start":45,"line_end":45,"column_start":1,"column_end":69}},{"value":"/ error iself.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":146194,"byte_end":146210,"line_start":46,"line_end":46,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":146211,"byte_end":146214,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Otherwise, the return value from the closure is returned wrapped","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":146215,"byte_end":146283,"line_start":48,"line_end":48,"column_start":1,"column_end":69}},{"value":"/ inside `Ok`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":146284,"byte_end":146300,"line_start":49,"line_end":49,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":146301,"byte_end":146304,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":146305,"byte_end":146318,"line_start":51,"line_end":51,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":146319,"byte_end":146322,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":146323,"byte_end":146330,"line_start":53,"line_end":53,"column_start":1,"column_end":8}},{"value":"/ use itertools::process_results;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":146331,"byte_end":146366,"line_start":54,"line_end":54,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":146367,"byte_end":146370,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ type R = Result<i32, &'static str>;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":146371,"byte_end":146410,"line_start":56,"line_end":56,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":146411,"byte_end":146414,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ let first_values: Vec<R> = vec![Ok(1), Ok(0), Ok(3)];","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":146415,"byte_end":146472,"line_start":58,"line_end":58,"column_start":1,"column_end":58}},{"value":"/ let second_values: Vec<R> = vec![Ok(2), Ok(1), Err(\"overflow\")];","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":146473,"byte_end":146541,"line_start":59,"line_end":59,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":146542,"byte_end":146545,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ // “Lift” the iterator .max() method to work on the values in Results using process_results","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":146546,"byte_end":146645,"line_start":61,"line_end":61,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":146646,"byte_end":146649,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ let first_max = process_results(first_values, |iter| iter.max().unwrap_or(0));","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":146650,"byte_end":146732,"line_start":63,"line_end":63,"column_start":1,"column_end":83}},{"value":"/ let second_max = process_results(second_values, |iter| iter.max().unwrap_or(0));","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":146733,"byte_end":146817,"line_start":64,"line_end":64,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":146818,"byte_end":146821,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(first_max, Ok(3));","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":146822,"byte_end":146855,"line_start":66,"line_end":66,"column_start":1,"column_end":34}},{"value":"/ assert!(second_max.is_err());","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":146856,"byte_end":146889,"line_start":67,"line_end":67,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":146890,"byte_end":146897,"line_start":68,"line_end":68,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":1136},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":147417,"byte_end":147423,"line_start":7,"line_end":7,"column_start":12,"column_end":18},"name":"RcIter","qualname":"::rciter_impl::RcIter","value":"RcIter { rciter }","parent":null,"children":[{"krate":0,"index":1138}],"decl_id":null,"docs":" A wrapper for `Rc<RefCell<I>>`, that implements the `Iterator` trait.\n","sig":null,"attributes":[{"value":"/ A wrapper for `Rc<RefCell<I>>`, that implements the `Iterator` trait.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":147332,"byte_end":147405,"line_start":6,"line_end":6,"column_start":1,"column_end":74}}]},{"kind":"Field","id":{"krate":0,"index":1138},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":147465,"byte_end":147471,"line_start":9,"line_end":9,"column_start":9,"column_end":15},"name":"rciter","qualname":"::rciter_impl::RcIter::rciter","value":"std::rc::Rc<std::cell::RefCell<I>>","parent":{"krate":0,"index":1136},"children":[],"decl_id":null,"docs":" The boxed iterator.\n","sig":null,"attributes":[{"value":"/ The boxed iterator.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":147433,"byte_end":147456,"line_start":8,"line_end":8,"column_start":5,"column_end":28}}]},{"kind":"Function","id":{"krate":0,"index":1139},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":148740,"byte_end":148746,"line_start":46,"line_end":46,"column_start":8,"column_end":14},"name":"rciter","qualname":"::rciter_impl::rciter","value":"fn rciter<I>(I) -> RcIter<I::IntoIter> where I: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator inside a `Rc<RefCell<_>>` wrapper.","sig":null,"attributes":[{"value":"/ Return an iterator inside a `Rc<RefCell<_>>` wrapper.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":147492,"byte_end":147549,"line_start":12,"line_end":12,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":147550,"byte_end":147553,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ The returned `RcIter` can be cloned, and each clone will refer back to the","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":147554,"byte_end":147632,"line_start":14,"line_end":14,"column_start":1,"column_end":79}},{"value":"/ same original iterator.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":147633,"byte_end":147660,"line_start":15,"line_end":15,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":147661,"byte_end":147664,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ `RcIter` allows doing interesting things like using `.zip()` on an iterator with","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":147665,"byte_end":147749,"line_start":17,"line_end":17,"column_start":1,"column_end":85}},{"value":"/ itself, at the cost of runtime borrow checking which may have a performance","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":147750,"byte_end":147829,"line_start":18,"line_end":18,"column_start":1,"column_end":80}},{"value":"/ penalty.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":147830,"byte_end":147842,"line_start":19,"line_end":19,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":147843,"byte_end":147846,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":147847,"byte_end":147889,"line_start":21,"line_end":21,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":147890,"byte_end":147893,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":147894,"byte_end":147901,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"/ use itertools::rciter;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":147902,"byte_end":147928,"line_start":24,"line_end":24,"column_start":1,"column_end":27}},{"value":"/ use itertools::zip;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":147929,"byte_end":147952,"line_start":25,"line_end":25,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":147953,"byte_end":147956,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ // In this example a range iterator is created and we iterate it using","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":147957,"byte_end":148031,"line_start":27,"line_end":27,"column_start":1,"column_end":75}},{"value":"/ // three separate handles (two of them given to zip).","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":148032,"byte_end":148089,"line_start":28,"line_end":28,"column_start":1,"column_end":58}},{"value":"/ // We also use the IntoIterator implementation for `&RcIter`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":148090,"byte_end":148155,"line_start":29,"line_end":29,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":148156,"byte_end":148159,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ let mut iter = rciter(0..9);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":148160,"byte_end":148192,"line_start":31,"line_end":31,"column_start":1,"column_end":33}},{"value":"/ let mut z = zip(&iter, &iter);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":148193,"byte_end":148227,"line_start":32,"line_end":32,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":148228,"byte_end":148231,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(z.next(), Some((0, 1)));","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":148232,"byte_end":148271,"line_start":34,"line_end":34,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(z.next(), Some((2, 3)));","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":148272,"byte_end":148311,"line_start":35,"line_end":35,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(z.next(), Some((4, 5)));","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":148312,"byte_end":148351,"line_start":36,"line_end":36,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(iter.next(), Some(6));","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":148352,"byte_end":148389,"line_start":37,"line_end":37,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(z.next(), Some((7, 8)));","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":148390,"byte_end":148429,"line_start":38,"line_end":38,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(z.next(), None);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":148430,"byte_end":148461,"line_start":39,"line_end":39,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":148462,"byte_end":148469,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":148470,"byte_end":148473,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ **Panics** in iterator methods if a borrow error is encountered in the","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":148474,"byte_end":148548,"line_start":42,"line_end":42,"column_start":1,"column_end":75}},{"value":"/ iterator methods. It can only happen if the `RcIter` is reentered in","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":148549,"byte_end":148621,"line_start":43,"line_end":43,"column_start":1,"column_end":73}},{"value":"/ `.next()`, i.e. if it somehow participates in an “iterator knot”","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":148622,"byte_end":148694,"line_start":44,"line_end":44,"column_start":1,"column_end":69}},{"value":"/ where it is an adaptor of itself.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":148695,"byte_end":148732,"line_start":45,"line_end":45,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1143},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":148935,"byte_end":148940,"line_start":54,"line_end":54,"column_start":8,"column_end":13},"name":"clone","qualname":"<RcIter<I> as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> RcIter<I>","parent":{"krate":2,"index":2882},"children":[],"decl_id":{"krate":2,"index":2883},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":148918,"byte_end":148927,"line_start":53,"line_end":53,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1148},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":149127,"byte_end":149131,"line_start":64,"line_end":64,"column_start":8,"column_end":12},"name":"next","qualname":"<RcIter<I> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<A>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":149110,"byte_end":149119,"line_start":63,"line_end":63,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1149},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":149226,"byte_end":149235,"line_start":69,"line_end":69,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<RcIter<I> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":149209,"byte_end":149218,"line_start":68,"line_end":68,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1152},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":149674,"byte_end":149683,"line_start":82,"line_end":82,"column_start":8,"column_end":17},"name":"next_back","qualname":"<RcIter<I> as std::iter::DoubleEndedIterator>::next_back","value":"fn next_back<'_>(&'_ mut Self) -> Option<I::Item>","parent":{"krate":2,"index":8449},"children":[],"decl_id":{"krate":2,"index":8450},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":149657,"byte_end":149666,"line_start":81,"line_end":81,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1158},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":149966,"byte_end":149975,"line_start":94,"line_end":94,"column_start":8,"column_end":17},"name":"into_iter","qualname":"<&'a RcIter<I> as std::iter::IntoIterator>::into_iter","value":"fn into_iter(Self) -> RcIter<I>","parent":{"krate":2,"index":8405},"children":[],"decl_id":{"krate":2,"index":8408},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1160},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/repeatn.rs","byte_start":150170,"byte_end":150177,"line_start":5,"line_end":5,"column_start":12,"column_end":19},"name":"RepeatN","qualname":"::repeatn::RepeatN","value":"RepeatN {  }","parent":null,"children":[{"krate":0,"index":1162},{"krate":0,"index":1163}],"decl_id":null,"docs":" An iterator that produces *n* repetitions of an element.","sig":null,"attributes":[{"value":"/ An iterator that produces *n* repetitions of an element.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/repeatn.rs","byte_start":150028,"byte_end":150088,"line_start":2,"line_end":2,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/repeatn.rs","byte_start":150089,"byte_end":150092,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ See [`repeat_n()`](../fn.repeat_n.html) for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/repeatn.rs","byte_start":150093,"byte_end":150158,"line_start":4,"line_end":4,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":1164},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/repeatn.rs","byte_start":150294,"byte_end":150302,"line_start":11,"line_end":11,"column_start":8,"column_end":16},"name":"repeat_n","qualname":"::repeatn::repeat_n","value":"fn repeat_n<A>(A, usize) -> RepeatN<A> where A: Clone","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that produces `n` repetitions of `element`.\n","sig":null,"attributes":[{"value":"/ Create an iterator that produces `n` repetitions of `element`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/repeatn.rs","byte_start":150220,"byte_end":150286,"line_start":10,"line_end":10,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1169},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/repeatn.rs","byte_start":150565,"byte_end":150569,"line_start":26,"line_end":26,"column_start":8,"column_end":12},"name":"next","qualname":"<RepeatN<A> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1170},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/repeatn.rs","byte_start":150786,"byte_end":150795,"line_start":36,"line_end":36,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<RepeatN<A> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1173},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/repeatn.rs","byte_start":150956,"byte_end":150965,"line_start":45,"line_end":45,"column_start":8,"column_end":17},"name":"next_back","qualname":"<RepeatN<A> as std::iter::DoubleEndedIterator>::next_back","value":"fn next_back<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8449},"children":[],"decl_id":{"krate":2,"index":8450},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/repeatn.rs","byte_start":150939,"byte_end":150948,"line_start":44,"line_end":44,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1201},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":153913,"byte_end":153923,"line_start":8,"line_end":8,"column_start":12,"column_end":22},"name":"RepeatCall","qualname":"::sources::RepeatCall","value":"RepeatCall {  }","parent":null,"children":[{"krate":0,"index":1203}],"decl_id":null,"docs":" See [`repeat_call`](../fn.repeat_call.html) for more information.\n","sig":null,"attributes":[{"value":"/ See [`repeat_call`](../fn.repeat_call.html) for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":153832,"byte_end":153901,"line_start":7,"line_end":7,"column_start":1,"column_end":70}}]},{"kind":"Function","id":{"krate":0,"index":1206},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":154615,"byte_end":154626,"line_start":39,"line_end":39,"column_start":8,"column_end":19},"name":"repeat_call","qualname":"::sources::repeat_call","value":"fn repeat_call<F>(F) -> RepeatCall<F>","parent":null,"children":[],"decl_id":null,"docs":" An iterator source that produces elements indefinitely by calling\n a given closure.","sig":null,"attributes":[{"value":"/ An iterator source that produces elements indefinitely by calling","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":154021,"byte_end":154090,"line_start":17,"line_end":17,"column_start":1,"column_end":70}},{"value":"/ a given closure.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":154091,"byte_end":154111,"line_start":18,"line_end":18,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":154112,"byte_end":154115,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is the return type of the closure.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":154116,"byte_end":154176,"line_start":20,"line_end":20,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":154177,"byte_end":154180,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":154181,"byte_end":154188,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/ use itertools::repeat_call;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":154189,"byte_end":154220,"line_start":23,"line_end":23,"column_start":1,"column_end":32}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":154221,"byte_end":154250,"line_start":24,"line_end":24,"column_start":1,"column_end":30}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":154251,"byte_end":154288,"line_start":25,"line_end":25,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":154289,"byte_end":154292,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ let mut heap = BinaryHeap::from(vec![2, 5, 3, 7, 8]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":154293,"byte_end":154350,"line_start":27,"line_end":27,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":154351,"byte_end":154354,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ // extract each element in sorted order","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":154355,"byte_end":154398,"line_start":29,"line_end":29,"column_start":1,"column_end":44}},{"value":"/ for element in repeat_call(|| heap.pop()).while_some() {","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":154399,"byte_end":154459,"line_start":30,"line_end":30,"column_start":1,"column_end":61}},{"value":"/     print!(\"{}\", element);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":154460,"byte_end":154490,"line_start":31,"line_end":31,"column_start":1,"column_end":31}},{"value":"/ }","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":154491,"byte_end":154496,"line_start":32,"line_end":32,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":154497,"byte_end":154500,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ itertools::assert_equal(","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":154501,"byte_end":154529,"line_start":34,"line_end":34,"column_start":1,"column_end":29}},{"value":"/     repeat_call(|| 1).take(5),","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":154530,"byte_end":154564,"line_start":35,"line_end":35,"column_start":1,"column_end":35}},{"value":"/     vec![1, 1, 1, 1, 1]","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":154565,"byte_end":154592,"line_start":36,"line_end":36,"column_start":1,"column_end":28}},{"value":"/ );","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":154593,"byte_end":154599,"line_start":37,"line_end":37,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":154600,"byte_end":154607,"line_start":38,"line_end":38,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1212},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":154803,"byte_end":154807,"line_start":49,"line_end":49,"column_start":8,"column_end":12},"name":"next","qualname":"<RepeatCall<F> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<A>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":154786,"byte_end":154795,"line_start":48,"line_end":48,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1213},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":154873,"byte_end":154882,"line_start":53,"line_end":53,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<RepeatCall<F> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1214},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":156204,"byte_end":156210,"line_start":95,"line_end":95,"column_start":8,"column_end":14},"name":"unfold","qualname":"::sources::unfold","value":"fn unfold<A, St, F>(St, F) -> Unfold<St, F> where F: for<'_> FnMut(&'_ mut St)\n-> Option<A>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new unfold source with the specified closure as the \"iterator\n function\" and an initial state to eventually pass to the closure","sig":null,"attributes":[{"value":"/ Creates a new unfold source with the specified closure as the \"iterator","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":154962,"byte_end":155037,"line_start":58,"line_end":58,"column_start":1,"column_end":76}},{"value":"/ function\" and an initial state to eventually pass to the closure","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":155038,"byte_end":155106,"line_start":59,"line_end":59,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":155107,"byte_end":155110,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ `unfold` is a general iterator builder: it has a mutable state value,","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":155111,"byte_end":155184,"line_start":61,"line_end":61,"column_start":1,"column_end":74}},{"value":"/ and a closure with access to the state that produces the next value.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":155185,"byte_end":155257,"line_start":62,"line_end":62,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":155258,"byte_end":155261,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ This more or less equivalent to a regular struct with an `Iterator`","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":155262,"byte_end":155333,"line_start":64,"line_end":64,"column_start":1,"column_end":72}},{"value":"/ implementation, and is useful for one-off iterators.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":155334,"byte_end":155390,"line_start":65,"line_end":65,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":155391,"byte_end":155394,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":155395,"byte_end":155402,"line_start":67,"line_end":67,"column_start":1,"column_end":8}},{"value":"/ // an iterator that yields sequential Fibonacci numbers,","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":155403,"byte_end":155463,"line_start":68,"line_end":68,"column_start":1,"column_end":61}},{"value":"/ // and stops at the maximum representable value.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":155464,"byte_end":155516,"line_start":69,"line_end":69,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":155517,"byte_end":155520,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ use itertools::unfold;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":155521,"byte_end":155547,"line_start":71,"line_end":71,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":155548,"byte_end":155551,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ let (mut x1, mut x2) = (1u32, 1u32);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":155552,"byte_end":155592,"line_start":73,"line_end":73,"column_start":1,"column_end":41}},{"value":"/ let mut fibonacci = unfold((), move |_| {","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":155593,"byte_end":155638,"line_start":74,"line_end":74,"column_start":1,"column_end":46}},{"value":"/     // Attempt to get the next Fibonacci number","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":155639,"byte_end":155690,"line_start":75,"line_end":75,"column_start":1,"column_end":52}},{"value":"/     let next = x1.saturating_add(x2);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":155691,"byte_end":155732,"line_start":76,"line_end":76,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":155733,"byte_end":155736,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/     // Shift left: ret <- x1 <- x2 <- next","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":155737,"byte_end":155783,"line_start":78,"line_end":78,"column_start":1,"column_end":47}},{"value":"/     let ret = x1;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":155784,"byte_end":155805,"line_start":79,"line_end":79,"column_start":1,"column_end":22}},{"value":"/     x1 = x2;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":155806,"byte_end":155822,"line_start":80,"line_end":80,"column_start":1,"column_end":17}},{"value":"/     x2 = next;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":155823,"byte_end":155841,"line_start":81,"line_end":81,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":155842,"byte_end":155845,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/     // If addition has saturated at the maximum, we are finished","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":155846,"byte_end":155914,"line_start":83,"line_end":83,"column_start":1,"column_end":69}},{"value":"/     if ret == x1 && ret > 1 {","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":155915,"byte_end":155948,"line_start":84,"line_end":84,"column_start":1,"column_end":34}},{"value":"/         return None;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":155949,"byte_end":155973,"line_start":85,"line_end":85,"column_start":1,"column_end":25}},{"value":"/     }","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":155974,"byte_end":155983,"line_start":86,"line_end":86,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":155984,"byte_end":155987,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/     Some(ret)","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":155988,"byte_end":156005,"line_start":88,"line_end":88,"column_start":1,"column_end":18}},{"value":"/ });","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":156006,"byte_end":156013,"line_start":89,"line_end":89,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":156014,"byte_end":156017,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ itertools::assert_equal(fibonacci.by_ref().take(8),","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":156018,"byte_end":156073,"line_start":91,"line_end":91,"column_start":1,"column_end":56}},{"value":"/                         vec![1, 1, 2, 3, 5, 8, 13, 21]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":156074,"byte_end":156134,"line_start":92,"line_end":92,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(fibonacci.last(), Some(2_971_215_073))","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":156135,"byte_end":156188,"line_start":93,"line_end":93,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":156189,"byte_end":156196,"line_start":94,"line_end":94,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":2102},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":156570,"byte_end":156576,"line_start":112,"line_end":112,"column_start":12,"column_end":18},"name":"Unfold","qualname":"::sources::Unfold","value":"Unfold { state }","parent":null,"children":[{"krate":0,"index":2105},{"krate":0,"index":2106}],"decl_id":null,"docs":" See [`unfold`](../fn.unfold.html) for more information.\n","sig":null,"attributes":[{"value":"/ See [`unfold`](../fn.unfold.html) for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":156482,"byte_end":156541,"line_start":110,"line_end":110,"column_start":1,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":2106},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":156684,"byte_end":156689,"line_start":115,"line_end":115,"column_start":9,"column_end":14},"name":"state","qualname":"::sources::Unfold::state","value":"St","parent":{"krate":0,"index":2102},"children":[],"decl_id":null,"docs":" Internal state that will be passed to the closure on the next iteration\n","sig":null,"attributes":[{"value":"/ Internal state that will be passed to the closure on the next iteration","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":156600,"byte_end":156675,"line_start":114,"line_end":114,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1226},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":156824,"byte_end":156828,"line_start":124,"line_end":124,"column_start":8,"column_end":12},"name":"next","qualname":"<Unfold<St, F> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<A>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":156807,"byte_end":156816,"line_start":123,"line_end":123,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1227},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":156917,"byte_end":156926,"line_start":129,"line_end":129,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<Unfold<St, F> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":156900,"byte_end":156909,"line_start":128,"line_end":128,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2111},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":157283,"byte_end":157290,"line_start":141,"line_end":141,"column_start":12,"column_end":19},"name":"Iterate","qualname":"::sources::Iterate","value":"Iterate {  }","parent":null,"children":[{"krate":0,"index":2114},{"krate":0,"index":2115}],"decl_id":null,"docs":" An iterator that infinitely applies function to value and yields results.","sig":null,"attributes":[{"value":"/ An iterator that infinitely applies function to value and yields results.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":157039,"byte_end":157116,"line_start":135,"line_end":135,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":157117,"byte_end":157120,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iterate()`] function. See its documentation for more.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":157121,"byte_end":157212,"line_start":137,"line_end":137,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":157213,"byte_end":157216,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ [`iterate()`]: ../fn.iterate.html","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":157217,"byte_end":157254,"line_start":139,"line_end":139,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1235},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":157554,"byte_end":157558,"line_start":158,"line_end":158,"column_start":8,"column_end":12},"name":"next","qualname":"<Iterate<St, F> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":157537,"byte_end":157546,"line_start":157,"line_end":157,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1236},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":157726,"byte_end":157735,"line_start":164,"line_end":164,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<Iterate<St, F> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":157709,"byte_end":157718,"line_start":163,"line_end":163,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":1237},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":158047,"byte_end":158054,"line_start":176,"line_end":176,"column_start":8,"column_end":15},"name":"iterate","qualname":"::sources::iterate","value":"fn iterate<St, F>(St, F) -> Iterate<St, F> where F: for<'_> FnMut(&'_ St) ->\nSt","parent":null,"children":[],"decl_id":null,"docs":" Creates a new iterator that infinitely applies function to value and yields results.","sig":null,"attributes":[{"value":"/ Creates a new iterator that infinitely applies function to value and yields results.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":157815,"byte_end":157903,"line_start":169,"line_end":169,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":157904,"byte_end":157907,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":157908,"byte_end":157915,"line_start":171,"line_end":171,"column_start":1,"column_end":8}},{"value":"/ use itertools::iterate;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":157916,"byte_end":157943,"line_start":172,"line_end":172,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":157944,"byte_end":157947,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ itertools::assert_equal(iterate(1, |&i| i * 3).take(5), vec![1, 3, 9, 27, 81]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":157948,"byte_end":158031,"line_start":174,"line_end":174,"column_start":1,"column_end":84}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":158032,"byte_end":158039,"line_start":175,"line_end":175,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":1259},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tee.rs","byte_start":158667,"byte_end":158670,"line_start":18,"line_end":18,"column_start":12,"column_end":15},"name":"Tee","qualname":"::tee::Tee","value":"Tee {  }","parent":null,"children":[{"krate":0,"index":1261},{"krate":0,"index":1262}],"decl_id":null,"docs":" One half of an iterator pair where both return the same elements.","sig":null,"attributes":[{"value":"/ One half of an iterator pair where both return the same elements.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tee.rs","byte_start":158505,"byte_end":158574,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tee.rs","byte_start":158575,"byte_end":158578,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ See [`.tee()`](../trait.Itertools.html#method.tee) for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tee.rs","byte_start":158579,"byte_end":158655,"line_start":17,"line_end":17,"column_start":1,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1268},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tee.rs","byte_start":159167,"byte_end":159171,"line_start":39,"line_end":39,"column_start":8,"column_end":12},"name":"next","qualname":"<Tee<I> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<I::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1269},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tee.rs","byte_start":159832,"byte_end":159841,"line_start":59,"line_end":59,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<Tee<I> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1276},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":160499,"byte_end":160510,"line_start":9,"line_end":9,"column_start":12,"column_end":23},"name":"TupleBuffer","qualname":"::tuple_impl::TupleBuffer","value":"TupleBuffer {  }","parent":null,"children":[{"krate":0,"index":1278},{"krate":0,"index":1279}],"decl_id":null,"docs":" An iterator over a incomplete tuple.","sig":null,"attributes":[{"value":"/ An iterator over a incomplete tuple.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":160308,"byte_end":160348,"line_start":5,"line_end":5,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":160349,"byte_end":160352,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ See [`.tuples()`](../trait.Itertools.html#method.tuples) and","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":160353,"byte_end":160417,"line_start":7,"line_end":7,"column_start":1,"column_end":65}},{"value":"/ [`Tuples::into_buffer()`](struct.Tuples.html#method.into_buffer).","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":160418,"byte_end":160487,"line_start":8,"line_end":8,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1286},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":160849,"byte_end":160853,"line_start":32,"line_end":32,"column_start":8,"column_end":12},"name":"next","qualname":"<TupleBuffer<T> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1287},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":161091,"byte_end":161100,"line_start":42,"line_end":42,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<TupleBuffer<T> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1291},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":161662,"byte_end":161668,"line_start":63,"line_end":63,"column_start":12,"column_end":18},"name":"Tuples","qualname":"::tuple_impl::Tuples","value":"Tuples {  }","parent":null,"children":[{"krate":0,"index":1294},{"krate":0,"index":1295}],"decl_id":null,"docs":" An iterator that groups the items in tuples of a specific size.","sig":null,"attributes":[{"value":"/ An iterator that groups the items in tuples of a specific size.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":161496,"byte_end":161563,"line_start":60,"line_end":60,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":161564,"byte_end":161567,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ See [`.tuples()`](../trait.Itertools.html#method.tuples) for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":161568,"byte_end":161650,"line_start":62,"line_end":62,"column_start":1,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1303},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":162143,"byte_end":162147,"line_start":88,"line_end":88,"column_start":8,"column_end":12},"name":"next","qualname":"<Tuples<I, T> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<T>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1307},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":162707,"byte_end":162718,"line_start":107,"line_end":107,"column_start":12,"column_end":23},"name":"into_buffer","qualname":"<Tuples<I, T>>::into_buffer","value":"fn into_buffer(Self) -> TupleBuffer<T>","parent":null,"children":[],"decl_id":null,"docs":" Return a buffer with the produced items that was not enough to be grouped in a tuple.","sig":null,"attributes":[{"value":"/ Return a buffer with the produced items that was not enough to be grouped in a tuple.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":162338,"byte_end":162427,"line_start":97,"line_end":97,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":162432,"byte_end":162435,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":162440,"byte_end":162447,"line_start":99,"line_end":99,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":162452,"byte_end":162481,"line_start":100,"line_end":100,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":162486,"byte_end":162489,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ let mut iter = (0..5).tuples();","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":162494,"byte_end":162529,"line_start":102,"line_end":102,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Some((0, 1, 2)), iter.next());","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":162534,"byte_end":162579,"line_start":103,"line_end":103,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(None, iter.next());","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":162584,"byte_end":162618,"line_start":104,"line_end":104,"column_start":5,"column_end":39}},{"value":"/ itertools::assert_equal(vec![3, 4], iter.into_buffer());","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":162623,"byte_end":162683,"line_start":105,"line_end":105,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":162688,"byte_end":162695,"line_start":106,"line_end":106,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1308},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":162991,"byte_end":163003,"line_start":117,"line_end":117,"column_start":12,"column_end":24},"name":"TupleWindows","qualname":"::tuple_impl::TupleWindows","value":"TupleWindows {  }","parent":null,"children":[{"krate":0,"index":1311},{"krate":0,"index":1312}],"decl_id":null,"docs":" An iterator over all contiguous windows that produces tuples of a specific size.","sig":null,"attributes":[{"value":"/ An iterator over all contiguous windows that produces tuples of a specific size.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":162790,"byte_end":162874,"line_start":113,"line_end":113,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":162875,"byte_end":162878,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ See [`.tuple_windows()`](../trait.Itertools.html#method.tuple_windows) for more","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":162879,"byte_end":162962,"line_start":115,"line_end":115,"column_start":1,"column_end":84}},{"value":"/ information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":162963,"byte_end":162979,"line_start":116,"line_end":116,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1323},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":163923,"byte_end":163927,"line_start":156,"line_end":156,"column_start":8,"column_end":12},"name":"next","qualname":"<TupleWindows<I, T> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<T>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1324},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":164300,"byte_end":164312,"line_start":170,"line_end":170,"column_start":11,"column_end":23},"name":"TupleCollect","qualname":"::tuple_impl::TupleCollect","value":"TupleCollect: Sized","parent":null,"children":[{"krate":0,"index":1325},{"krate":0,"index":1326},{"krate":0,"index":1327},{"krate":0,"index":1329},{"krate":0,"index":1331},{"krate":0,"index":1332}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1325},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":164331,"byte_end":164335,"line_start":171,"line_end":171,"column_start":10,"column_end":14},"name":"Item","qualname":"::tuple_impl::TupleCollect::Item","value":"type Item;","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1326},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":164346,"byte_end":164352,"line_start":172,"line_end":172,"column_start":10,"column_end":16},"name":"Buffer","qualname":"::tuple_impl::TupleCollect::Buffer","value":"type Buffer: Default + AsRef<[Option<Self::Item>]> + AsMut<[Option<Self::Item>]>;","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1327},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":164431,"byte_end":164448,"line_start":174,"line_end":174,"column_start":8,"column_end":25},"name":"collect_from_iter","qualname":"::tuple_impl::TupleCollect::collect_from_iter","value":"fn collect_from_iter<I, '_>(I, &'_ mut Self::Buffer) -> Option<Self> where\nI: IntoIterator<Item = Self::Item>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1329},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":164559,"byte_end":164583,"line_start":177,"line_end":177,"column_start":8,"column_end":32},"name":"collect_from_iter_no_buf","qualname":"::tuple_impl::TupleCollect::collect_from_iter_no_buf","value":"fn collect_from_iter_no_buf<I>(I) -> Option<Self> where I: IntoIterator<Item =\nSelf::Item>","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1331},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":164670,"byte_end":164679,"line_start":180,"line_end":180,"column_start":8,"column_end":17},"name":"num_items","qualname":"::tuple_impl::TupleCollect::num_items","value":"fn num_items() -> usize","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1332},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":164700,"byte_end":164715,"line_start":182,"line_end":182,"column_start":8,"column_end":23},"name":"left_shift_push","qualname":"::tuple_impl::TupleCollect::left_shift_push","value":"fn left_shift_push<'_>(&'_ mut Self, Self::Item)","parent":{"krate":0,"index":1324},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1342},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/with_position.rs","byte_start":167373,"byte_end":167385,"line_start":8,"line_end":8,"column_start":12,"column_end":24},"name":"WithPosition","qualname":"::with_position::WithPosition","value":"WithPosition {  }","parent":null,"children":[{"krate":0,"index":1344},{"krate":0,"index":1345}],"decl_id":null,"docs":" An iterator adaptor that wraps each element in an [`Position`](../enum.Position.html).","sig":null,"attributes":[{"value":"/ An iterator adaptor that wraps each element in an [`Position`](../enum.Position.html).","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/with_position.rs","byte_start":167116,"byte_end":167206,"line_start":3,"line_end":3,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/with_position.rs","byte_start":167207,"byte_end":167210,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `Position<I::Item>`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/with_position.rs","byte_start":167211,"byte_end":167260,"line_start":5,"line_end":5,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/with_position.rs","byte_start":167261,"byte_end":167264,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ See [`.with_position()`](../trait.Itertools.html#method.with_position) for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/with_position.rs","byte_start":167265,"byte_end":167361,"line_start":7,"line_end":7,"column_start":1,"column_end":97}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2179},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/with_position.rs","byte_start":168002,"byte_end":168007,"line_start":32,"line_end":32,"column_start":5,"column_end":10},"name":"First","qualname":"::with_position::Position::First","value":"Position::First(T)","parent":{"krate":0,"index":2177},"children":[],"decl_id":null,"docs":" This is the first element.\n","sig":null,"attributes":[{"value":"/ This is the first element.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/with_position.rs","byte_start":167967,"byte_end":167997,"line_start":31,"line_end":31,"column_start":5,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":2181},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/with_position.rs","byte_start":168008,"byte_end":168009,"line_start":32,"line_end":32,"column_start":11,"column_end":12},"name":"0","qualname":"::with_position::Position::First::0","value":"T","parent":{"krate":0,"index":2179},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2182},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/with_position.rs","byte_start":168072,"byte_end":168078,"line_start":34,"line_end":34,"column_start":5,"column_end":11},"name":"Middle","qualname":"::with_position::Position::Middle","value":"Position::Middle(T)","parent":{"krate":0,"index":2177},"children":[],"decl_id":null,"docs":" This is neither the first nor the last element.\n","sig":null,"attributes":[{"value":"/ This is neither the first nor the last element.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/with_position.rs","byte_start":168016,"byte_end":168067,"line_start":33,"line_end":33,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":2184},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/with_position.rs","byte_start":168079,"byte_end":168080,"line_start":34,"line_end":34,"column_start":12,"column_end":13},"name":"0","qualname":"::with_position::Position::Middle::0","value":"T","parent":{"krate":0,"index":2182},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2185},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/with_position.rs","byte_start":168121,"byte_end":168125,"line_start":36,"line_end":36,"column_start":5,"column_end":9},"name":"Last","qualname":"::with_position::Position::Last","value":"Position::Last(T)","parent":{"krate":0,"index":2177},"children":[],"decl_id":null,"docs":" This is the last element.\n","sig":null,"attributes":[{"value":"/ This is the last element.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/with_position.rs","byte_start":168087,"byte_end":168116,"line_start":35,"line_end":35,"column_start":5,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":2187},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/with_position.rs","byte_start":168126,"byte_end":168127,"line_start":36,"line_end":36,"column_start":10,"column_end":11},"name":"0","qualname":"::with_position::Position::Last::0","value":"T","parent":{"krate":0,"index":2185},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2188},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/with_position.rs","byte_start":168168,"byte_end":168172,"line_start":38,"line_end":38,"column_start":5,"column_end":9},"name":"Only","qualname":"::with_position::Position::Only","value":"Position::Only(T)","parent":{"krate":0,"index":2177},"children":[],"decl_id":null,"docs":" This is the only element.\n","sig":null,"attributes":[{"value":"/ This is the only element.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/with_position.rs","byte_start":168134,"byte_end":168163,"line_start":37,"line_end":37,"column_start":5,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":2190},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/with_position.rs","byte_start":168173,"byte_end":168174,"line_start":38,"line_end":38,"column_start":10,"column_end":11},"name":"0","qualname":"::with_position::Position::Only::0","value":"T","parent":{"krate":0,"index":2188},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2177},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/with_position.rs","byte_start":167949,"byte_end":167957,"line_start":30,"line_end":30,"column_start":10,"column_end":18},"name":"Position","qualname":"::with_position::Position","value":"enum Position<T> { First(T), Middle(T), Last(T), Only(T), }","parent":null,"children":[{"krate":0,"index":2179},{"krate":0,"index":2182},{"krate":0,"index":2185},{"krate":0,"index":2188}],"decl_id":null,"docs":" A value yielded by `WithPosition`.\n Indicates the position of this element in the iterator results.","sig":null,"attributes":[{"value":"/ A value yielded by `WithPosition`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/with_position.rs","byte_start":167694,"byte_end":167732,"line_start":25,"line_end":25,"column_start":1,"column_end":39}},{"value":"/ Indicates the position of this element in the iterator results.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/with_position.rs","byte_start":167733,"byte_end":167800,"line_start":26,"line_end":26,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/with_position.rs","byte_start":167801,"byte_end":167804,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ See [`.with_position()`](trait.Itertools.html#method.with_position) for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/with_position.rs","byte_start":167805,"byte_end":167898,"line_start":28,"line_end":28,"column_start":1,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":1350},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/with_position.rs","byte_start":168245,"byte_end":168255,"line_start":43,"line_end":43,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Position<T>>::into_inner","value":"fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the inner value.\n","sig":null,"attributes":[{"value":"/ Return the inner value.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/with_position.rs","byte_start":168206,"byte_end":168233,"line_start":42,"line_end":42,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1354},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/with_position.rs","byte_start":168536,"byte_end":168540,"line_start":56,"line_end":56,"column_start":8,"column_end":12},"name":"next","qualname":"<WithPosition<I> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1355},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/with_position.rs","byte_start":169605,"byte_end":169614,"line_start":82,"line_end":82,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<WithPosition<I> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2205},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_eq_impl.rs","byte_start":170054,"byte_end":170059,"line_start":8,"line_end":8,"column_start":12,"column_end":17},"name":"ZipEq","qualname":"::zip_eq_impl::ZipEq","value":"ZipEq {  }","parent":null,"children":[{"krate":0,"index":2208},{"krate":0,"index":2209}],"decl_id":null,"docs":" An iterator which iterates two other iterators simultaneously","sig":null,"attributes":[{"value":"/ An iterator which iterates two other iterators simultaneously","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_eq_impl.rs","byte_start":169799,"byte_end":169864,"line_start":3,"line_end":3,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_eq_impl.rs","byte_start":169865,"byte_end":169868,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ See [`.zip_eq()`](../trait.Itertools.html#method.zip_eq) for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_eq_impl.rs","byte_start":169869,"byte_end":169951,"line_start":5,"line_end":5,"column_start":1,"column_end":83}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_eq_impl.rs","byte_start":169969,"byte_end":170042,"line_start":7,"line_end":7,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":1362},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_eq_impl.rs","byte_start":170434,"byte_end":170440,"line_start":27,"line_end":27,"column_start":8,"column_end":14},"name":"zip_eq","qualname":"::zip_eq_impl::zip_eq","value":"fn zip_eq<I, J>(I, J) -> ZipEq<I::IntoIter, J::IntoIter> where\nI: IntoIterator, J: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" Iterate `i` and `j` in lock step.","sig":null,"attributes":[{"value":"/ Iterate `i` and `j` in lock step.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_eq_impl.rs","byte_start":170091,"byte_end":170128,"line_start":13,"line_end":13,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_eq_impl.rs","byte_start":170129,"byte_end":170132,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ **Panics** if the iterators are not of the same length.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_eq_impl.rs","byte_start":170133,"byte_end":170192,"line_start":15,"line_end":15,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_eq_impl.rs","byte_start":170193,"byte_end":170196,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ `IntoIterator` enabled version of `i.zip_eq(j)`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_eq_impl.rs","byte_start":170197,"byte_end":170249,"line_start":17,"line_end":17,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_eq_impl.rs","byte_start":170250,"byte_end":170253,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_eq_impl.rs","byte_start":170254,"byte_end":170261,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ use itertools::zip_eq;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_eq_impl.rs","byte_start":170262,"byte_end":170288,"line_start":20,"line_end":20,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_eq_impl.rs","byte_start":170289,"byte_end":170292,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ let data = [1, 2, 3, 4, 5];","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_eq_impl.rs","byte_start":170293,"byte_end":170324,"line_start":22,"line_end":22,"column_start":1,"column_end":32}},{"value":"/ for (a, b) in zip_eq(&data[..data.len() - 1], &data[1..]) {","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_eq_impl.rs","byte_start":170325,"byte_end":170388,"line_start":23,"line_end":23,"column_start":1,"column_end":64}},{"value":"/     /* loop body */","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_eq_impl.rs","byte_start":170389,"byte_end":170412,"line_start":24,"line_end":24,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_eq_impl.rs","byte_start":170413,"byte_end":170418,"line_start":25,"line_end":25,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_eq_impl.rs","byte_start":170419,"byte_end":170426,"line_start":26,"line_end":26,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1369},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_eq_impl.rs","byte_start":170749,"byte_end":170753,"line_start":43,"line_end":43,"column_start":8,"column_end":12},"name":"next","qualname":"<ZipEq<I, J> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1370},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_eq_impl.rs","byte_start":171079,"byte_end":171088,"line_start":52,"line_end":52,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<ZipEq<I, J> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2214},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_longest.rs","byte_start":171868,"byte_end":171878,"line_start":16,"line_end":16,"column_start":12,"column_end":22},"name":"ZipLongest","qualname":"::zip_longest::ZipLongest","value":"ZipLongest {  }","parent":null,"children":[{"krate":0,"index":2217},{"krate":0,"index":2218}],"decl_id":null,"docs":" An iterator which iterates two other iterators simultaneously","sig":null,"attributes":[{"value":"/ An iterator which iterates two other iterators simultaneously","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_longest.rs","byte_start":171569,"byte_end":171634,"line_start":9,"line_end":9,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_longest.rs","byte_start":171635,"byte_end":171638,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_longest.rs","byte_start":171639,"byte_end":171668,"line_start":11,"line_end":11,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_longest.rs","byte_start":171669,"byte_end":171672,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ See [`.zip_longest()`](../trait.Itertools.html#method.zip_longest) for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_longest.rs","byte_start":171673,"byte_end":171765,"line_start":13,"line_end":13,"column_start":1,"column_end":93}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_longest.rs","byte_start":171783,"byte_end":171856,"line_start":15,"line_end":15,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1408},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_longest.rs","byte_start":172293,"byte_end":172297,"line_start":39,"line_end":39,"column_start":8,"column_end":12},"name":"next","qualname":"<ZipLongest<T, U> as std::iter::Iterator>::next","value":"fn next<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8605},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_longest.rs","byte_start":172276,"byte_end":172285,"line_start":38,"line_end":38,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1409},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_longest.rs","byte_start":172597,"byte_end":172606,"line_start":49,"line_end":49,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<ZipLongest<T, U> as std::iter::Iterator>::size_hint","value":"fn size_hint<'_>(&'_ Self) -> (usize, Option<usize>)","parent":{"krate":2,"index":8603},"children":[],"decl_id":{"krate":2,"index":8609},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_longest.rs","byte_start":172580,"byte_end":172589,"line_start":48,"line_end":48,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1413},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_longest.rs","byte_start":172896,"byte_end":172905,"line_start":59,"line_end":59,"column_start":8,"column_end":17},"name":"next_back","qualname":"<ZipLongest<T, U> as std::iter::DoubleEndedIterator>::next_back","value":"fn next_back<'_>(&'_ mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8449},"children":[],"decl_id":{"krate":2,"index":8450},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_longest.rs","byte_start":172879,"byte_end":172888,"line_start":58,"line_end":58,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2226},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_longest.rs","byte_start":173958,"byte_end":173962,"line_start":87,"line_end":87,"column_start":5,"column_end":9},"name":"Both","qualname":"::zip_longest::EitherOrBoth::Both","value":"EitherOrBoth::Both(A, B)","parent":{"krate":0,"index":2223},"children":[],"decl_id":null,"docs":" Neither input iterator is exhausted yet, yielding two values.\n","sig":null,"attributes":[{"value":"/ Neither input iterator is exhausted yet, yielding two values.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_longest.rs","byte_start":173888,"byte_end":173953,"line_start":86,"line_end":86,"column_start":5,"column_end":70}}]},{"kind":"Field","id":{"krate":0,"index":2228},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_longest.rs","byte_start":173963,"byte_end":173964,"line_start":87,"line_end":87,"column_start":10,"column_end":11},"name":"0","qualname":"::zip_longest::EitherOrBoth::Both::0","value":"A","parent":{"krate":0,"index":2226},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2229},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_longest.rs","byte_start":173966,"byte_end":173967,"line_start":87,"line_end":87,"column_start":13,"column_end":14},"name":"1","qualname":"::zip_longest::EitherOrBoth::Both::1","value":"B","parent":{"krate":0,"index":2226},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2230},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_longest.rs","byte_start":174095,"byte_end":174099,"line_start":90,"line_end":90,"column_start":5,"column_end":9},"name":"Left","qualname":"::zip_longest::EitherOrBoth::Left","value":"EitherOrBoth::Left(A)","parent":{"krate":0,"index":2223},"children":[],"decl_id":null,"docs":" The parameter iterator of `.zip_longest()` is exhausted,\n only yielding a value from the `self` iterator.\n","sig":null,"attributes":[{"value":"/ The parameter iterator of `.zip_longest()` is exhausted,","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_longest.rs","byte_start":173974,"byte_end":174034,"line_start":88,"line_end":88,"column_start":5,"column_end":65}},{"value":"/ only yielding a value from the `self` iterator.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_longest.rs","byte_start":174039,"byte_end":174090,"line_start":89,"line_end":89,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":2232},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_longest.rs","byte_start":174100,"byte_end":174101,"line_start":90,"line_end":90,"column_start":10,"column_end":11},"name":"0","qualname":"::zip_longest::EitherOrBoth::Left::0","value":"A","parent":{"krate":0,"index":2230},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2233},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_longest.rs","byte_start":174229,"byte_end":174234,"line_start":93,"line_end":93,"column_start":5,"column_end":10},"name":"Right","qualname":"::zip_longest::EitherOrBoth::Right","value":"EitherOrBoth::Right(B)","parent":{"krate":0,"index":2223},"children":[],"decl_id":null,"docs":" The `self` iterator of `.zip_longest()` is exhausted,\n only yielding a value from the parameter iterator.\n","sig":null,"attributes":[{"value":"/ The `self` iterator of `.zip_longest()` is exhausted,","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_longest.rs","byte_start":174108,"byte_end":174165,"line_start":91,"line_end":91,"column_start":5,"column_end":62}},{"value":"/ only yielding a value from the parameter iterator.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_longest.rs","byte_start":174170,"byte_end":174224,"line_start":92,"line_end":92,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":2235},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_longest.rs","byte_start":174235,"byte_end":174236,"line_start":93,"line_end":93,"column_start":11,"column_end":12},"name":"0","qualname":"::zip_longest::EitherOrBoth::Right::0","value":"B","parent":{"krate":0,"index":2233},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2223},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_longest.rs","byte_start":173863,"byte_end":173875,"line_start":85,"line_end":85,"column_start":10,"column_end":22},"name":"EitherOrBoth","qualname":"::zip_longest::EitherOrBoth","value":"enum EitherOrBoth<A, B> { Both(A, B), Left(A), Right(B), }","parent":null,"children":[{"krate":0,"index":2226},{"krate":0,"index":2230},{"krate":0,"index":2233}],"decl_id":null,"docs":" A value yielded by `ZipLongest`.\n Contains one or two values, depending on which of the input iterators are exhausted.","sig":null,"attributes":[{"value":"/ A value yielded by `ZipLongest`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_longest.rs","byte_start":173595,"byte_end":173631,"line_start":80,"line_end":80,"column_start":1,"column_end":37}},{"value":"/ Contains one or two values, depending on which of the input iterators are exhausted.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_longest.rs","byte_start":173632,"byte_end":173720,"line_start":81,"line_end":81,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_longest.rs","byte_start":173721,"byte_end":173724,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ See [`.zip_longest()`](trait.Itertools.html#method.zip_longest) for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_longest.rs","byte_start":173725,"byte_end":173814,"line_start":83,"line_end":83,"column_start":1,"column_end":90}}]},{"kind":"Struct","id":{"krate":0,"index":2259},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/ziptuple.rs","byte_start":174357,"byte_end":174360,"line_start":5,"line_end":5,"column_start":12,"column_end":15},"name":"Zip","qualname":"::ziptuple::Zip","value":"Zip {  }","parent":null,"children":[{"krate":0,"index":2261}],"decl_id":null,"docs":" See [`multizip`](../fn.multizip.html) for more information.\n","sig":null,"attributes":[{"value":"/ See [`multizip`](../fn.multizip.html) for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/ziptuple.rs","byte_start":174265,"byte_end":174328,"line_start":3,"line_end":3,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1423},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/ziptuple.rs","byte_start":174495,"byte_end":174498,"line_start":12,"line_end":12,"column_start":12,"column_end":15},"name":"new","qualname":"<Zip<T>>::new","value":"fn new<U>(U) -> Zip<T> where Zip<T>: From<U>, Zip<T>: Iterator","parent":null,"children":[],"decl_id":null,"docs":" Deprecated: renamed to multizip\n","sig":null,"attributes":[{"value":"/ Deprecated: renamed to multizip","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/ziptuple.rs","byte_start":174400,"byte_end":174435,"line_start":10,"line_end":10,"column_start":5,"column_end":40}},{"value":"deprecated(note = \"Renamed to multizip\")","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/ziptuple.rs","byte_start":174440,"byte_end":174483,"line_start":11,"line_end":11,"column_start":5,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":1425},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/ziptuple.rs","byte_start":175330,"byte_end":175338,"line_start":42,"line_end":42,"column_start":8,"column_end":16},"name":"multizip","qualname":"::ziptuple::multizip","value":"fn multizip<T, U>(U) -> Zip<T> where Zip<T>: From<U>, Zip<T>: Iterator","parent":null,"children":[],"decl_id":null,"docs":" An iterator that generalizes *.zip()* and allows running multiple iterators in lockstep.","sig":null,"attributes":[{"value":"/ An iterator that generalizes *.zip()* and allows running multiple iterators in lockstep.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/ziptuple.rs","byte_start":174616,"byte_end":174708,"line_start":20,"line_end":20,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/ziptuple.rs","byte_start":174709,"byte_end":174712,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ The iterator `Zip<(I, J, ..., M)>` is formed from a tuple of iterators (or values that","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/ziptuple.rs","byte_start":174713,"byte_end":174803,"line_start":22,"line_end":22,"column_start":1,"column_end":91}},{"value":"/ implement `IntoIterator`) and yields elements","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/ziptuple.rs","byte_start":174804,"byte_end":174853,"line_start":23,"line_end":23,"column_start":1,"column_end":50}},{"value":"/ until any of the subiterators yields `None`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/ziptuple.rs","byte_start":174854,"byte_end":174902,"line_start":24,"line_end":24,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/ziptuple.rs","byte_start":174903,"byte_end":174906,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ The iterator element type is a tuple like like `(A, B, ..., E)` where `A` to `E` are the","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/ziptuple.rs","byte_start":174907,"byte_end":174999,"line_start":26,"line_end":26,"column_start":1,"column_end":93}},{"value":"/ element types of the subiterator.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/ziptuple.rs","byte_start":175000,"byte_end":175037,"line_start":27,"line_end":27,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/ziptuple.rs","byte_start":175038,"byte_end":175041,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/ziptuple.rs","byte_start":175042,"byte_end":175049,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ use itertools::multizip;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/ziptuple.rs","byte_start":175050,"byte_end":175078,"line_start":30,"line_end":30,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/ziptuple.rs","byte_start":175079,"byte_end":175082,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ // Iterate over three sequences side-by-side","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/ziptuple.rs","byte_start":175083,"byte_end":175131,"line_start":32,"line_end":32,"column_start":1,"column_end":49}},{"value":"/ let mut xs = [0, 0, 0];","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/ziptuple.rs","byte_start":175132,"byte_end":175159,"line_start":33,"line_end":33,"column_start":1,"column_end":28}},{"value":"/ let ys = [69, 107, 101];","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/ziptuple.rs","byte_start":175160,"byte_end":175188,"line_start":34,"line_end":34,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/ziptuple.rs","byte_start":175189,"byte_end":175192,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ for (i, a, b) in multizip((0..100, &mut xs, &ys)) {","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/ziptuple.rs","byte_start":175193,"byte_end":175248,"line_start":36,"line_end":36,"column_start":1,"column_end":56}},{"value":"/    *a = i ^ *b;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/ziptuple.rs","byte_start":175249,"byte_end":175268,"line_start":37,"line_end":37,"column_start":1,"column_end":20}},{"value":"/ }","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/ziptuple.rs","byte_start":175269,"byte_end":175274,"line_start":38,"line_end":38,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/ziptuple.rs","byte_start":175275,"byte_end":175278,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(xs, [69, 106, 103]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/ziptuple.rs","byte_start":175279,"byte_end":175314,"line_start":40,"line_end":40,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/ziptuple.rs","byte_start":175315,"byte_end":175322,"line_start":41,"line_end":41,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":1431},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":5527,"byte_end":5536,"line_start":211,"line_end":211,"column_start":11,"column_end":20},"name":"Itertools","qualname":"::Itertools","value":"Itertools: Iterator","parent":null,"children":[{"krate":0,"index":1432},{"krate":0,"index":1434},{"krate":0,"index":1436},{"krate":0,"index":1437},{"krate":0,"index":1439},{"krate":0,"index":1441},{"krate":0,"index":1444},{"krate":0,"index":1447},{"krate":0,"index":1448},{"krate":0,"index":1450},{"krate":0,"index":1452},{"krate":0,"index":1453},{"krate":0,"index":1454},{"krate":0,"index":1459},{"krate":0,"index":1461},{"krate":0,"index":1464},{"krate":0,"index":1465},{"krate":0,"index":1467},{"krate":0,"index":1469},{"krate":0,"index":1471},{"krate":0,"index":1472},{"krate":0,"index":1473},{"krate":0,"index":1476},{"krate":0,"index":1478},{"krate":0,"index":1480},{"krate":0,"index":1482},{"krate":0,"index":1484},{"krate":0,"index":1485},{"krate":0,"index":1487},{"krate":0,"index":1488},{"krate":0,"index":1489},{"krate":0,"index":1491},{"krate":0,"index":1493},{"krate":0,"index":1495},{"krate":0,"index":1496},{"krate":0,"index":1497},{"krate":0,"index":1498},{"krate":0,"index":1501},{"krate":0,"index":1502},{"krate":0,"index":1503},{"krate":0,"index":1507},{"krate":0,"index":1508},{"krate":0,"index":1509},{"krate":0,"index":1511},{"krate":0,"index":1516},{"krate":0,"index":1520},{"krate":0,"index":1523},{"krate":0,"index":1526},{"krate":0,"index":1527},{"krate":0,"index":1529},{"krate":0,"index":1535},{"krate":0,"index":1538},{"krate":0,"index":1542}],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[{"value":"/ The trait `Itertools`: extra iterator adaptors and methods for iterators.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":4924,"byte_end":5001,"line_start":199,"line_end":199,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":5002,"byte_end":5005,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ This trait defines a number of methods. They are divided into two groups:","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":5006,"byte_end":5083,"line_start":201,"line_end":201,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":5084,"byte_end":5087,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ * *Adaptors* take an iterator and parameter as input, and return","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":5088,"byte_end":5156,"line_start":203,"line_end":203,"column_start":1,"column_end":69}},{"value":"/ a new iterator value. These are listed first in the trait. An example","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":5157,"byte_end":5230,"line_start":204,"line_end":204,"column_start":1,"column_end":74}},{"value":"/ of an adaptor is [`.interleave()`](#method.interleave)","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":5231,"byte_end":5289,"line_start":205,"line_end":205,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":5290,"byte_end":5293,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ * *Regular methods* are those that don't return iterators and instead","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":5294,"byte_end":5367,"line_start":207,"line_end":207,"column_start":1,"column_end":74}},{"value":"/ return a regular value of some other kind.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":5368,"byte_end":5414,"line_start":208,"line_end":208,"column_start":1,"column_end":47}},{"value":"/ [`.next_tuple()`](#method.next_tuple) is an example and the first regular","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":5415,"byte_end":5492,"line_start":209,"line_end":209,"column_start":1,"column_end":78}},{"value":"/ method in the list.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":5493,"byte_end":5516,"line_start":210,"line_end":210,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":1432},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":5935,"byte_end":5945,"line_start":226,"line_end":226,"column_start":8,"column_end":18},"name":"interleave","qualname":"::Itertools::interleave","value":"fn interleave<J>(Self, J) -> Interleave<Self, J::IntoIter> where\nJ: IntoIterator<Item = Self::Item>, Self: Sized","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Alternate elements from two iterators until both have run out.","sig":null,"attributes":[{"value":"/ Alternate elements from two iterators until both have run out.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":5571,"byte_end":5637,"line_start":214,"line_end":214,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":5642,"byte_end":5645,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":5650,"byte_end":5692,"line_start":216,"line_end":216,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":5697,"byte_end":5700,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":5705,"byte_end":5734,"line_start":218,"line_end":218,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":5739,"byte_end":5742,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":5747,"byte_end":5754,"line_start":220,"line_end":220,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":5759,"byte_end":5788,"line_start":221,"line_end":221,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":5793,"byte_end":5796,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ let it = (1..7).interleave(vec![-1, -2]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":5801,"byte_end":5846,"line_start":223,"line_end":223,"column_start":5,"column_end":50}},{"value":"/ itertools::assert_equal(it, vec![1, -1, 2, -2, 3, 4, 5, 6]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":5851,"byte_end":5915,"line_start":224,"line_end":224,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":5920,"byte_end":5927,"line_start":225,"line_end":225,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1434},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":6468,"byte_end":6487,"line_start":244,"line_end":244,"column_start":8,"column_end":27},"name":"interleave_shortest","qualname":"::Itertools::interleave_shortest","value":"fn interleave_shortest<J>(Self, J) -> InterleaveShortest<Self, J::IntoIter>\nwhere J: IntoIterator<Item = Self::Item>, Self: Sized","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Alternate elements from two iterators until at least one of them has run\n out.","sig":null,"attributes":[{"value":"/ Alternate elements from two iterators until at least one of them has run","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":6123,"byte_end":6199,"line_start":233,"line_end":233,"column_start":5,"column_end":81}},{"value":"/ out.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":6204,"byte_end":6212,"line_start":234,"line_end":234,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":6217,"byte_end":6220,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":6225,"byte_end":6267,"line_start":236,"line_end":236,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":6272,"byte_end":6275,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":6280,"byte_end":6287,"line_start":238,"line_end":238,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":6292,"byte_end":6321,"line_start":239,"line_end":239,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":6326,"byte_end":6329,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ let it = (1..7).interleave_shortest(vec![-1, -2]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":6334,"byte_end":6388,"line_start":241,"line_end":241,"column_start":5,"column_end":59}},{"value":"/ itertools::assert_equal(it, vec![1, -1, 2, -2, 3]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":6393,"byte_end":6448,"line_start":242,"line_end":242,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":6453,"byte_end":6460,"line_start":243,"line_end":243,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1436},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":7066,"byte_end":7077,"line_start":263,"line_end":263,"column_start":8,"column_end":19},"name":"intersperse","qualname":"::Itertools::intersperse","value":"fn intersperse(Self, Self::Item) -> Intersperse<Self> where Self: Sized,\nSelf::Item: Clone","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" An iterator adaptor to insert a particular value\n between each element of the adapted iterator.","sig":null,"attributes":[{"value":"/ An iterator adaptor to insert a particular value","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":6704,"byte_end":6756,"line_start":251,"line_end":251,"column_start":5,"column_end":57}},{"value":"/ between each element of the adapted iterator.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":6761,"byte_end":6810,"line_start":252,"line_end":252,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":6815,"byte_end":6818,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":6823,"byte_end":6865,"line_start":254,"line_end":254,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":6870,"byte_end":6873,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":6878,"byte_end":6907,"line_start":256,"line_end":256,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":6912,"byte_end":6915,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":6920,"byte_end":6927,"line_start":258,"line_end":258,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":6932,"byte_end":6961,"line_start":259,"line_end":259,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":6966,"byte_end":6969,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal((0..3).intersperse(8), vec![0, 8, 1, 8, 2]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":6974,"byte_end":7046,"line_start":261,"line_end":261,"column_start":5,"column_end":77}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":7051,"byte_end":7058,"line_start":262,"line_end":262,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1437},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":7916,"byte_end":7927,"line_start":288,"line_end":288,"column_start":8,"column_end":19},"name":"zip_longest","qualname":"::Itertools::zip_longest","value":"fn zip_longest<J>(Self, J) -> ZipLongest<Self, J::IntoIter> where\nJ: IntoIterator, Self: Sized","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Create an iterator which iterates over both this and the specified\n iterator simultaneously, yielding pairs of two optional elements.","sig":null,"attributes":[{"value":"/ Create an iterator which iterates over both this and the specified","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":7250,"byte_end":7320,"line_start":270,"line_end":270,"column_start":5,"column_end":75}},{"value":"/ iterator simultaneously, yielding pairs of two optional elements.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":7325,"byte_end":7394,"line_start":271,"line_end":271,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":7399,"byte_end":7402,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":7407,"byte_end":7436,"line_start":273,"line_end":273,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":7441,"byte_end":7444,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ When both iterators return `None`, all further invocations of `.next()`","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":7449,"byte_end":7524,"line_start":275,"line_end":275,"column_start":5,"column_end":80}},{"value":"/ will return `None`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":7529,"byte_end":7552,"line_start":276,"line_end":276,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":7557,"byte_end":7560,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":7565,"byte_end":7593,"line_start":278,"line_end":278,"column_start":5,"column_end":33}},{"value":"/ [`EitherOrBoth<Self::Item, J::Item>`](enum.EitherOrBoth.html).","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":7598,"byte_end":7664,"line_start":279,"line_end":279,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":7669,"byte_end":7672,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":7677,"byte_end":7688,"line_start":281,"line_end":281,"column_start":5,"column_end":16}},{"value":"/ use itertools::EitherOrBoth::{Both, Right};","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":7693,"byte_end":7740,"line_start":282,"line_end":282,"column_start":5,"column_end":52}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":7745,"byte_end":7774,"line_start":283,"line_end":283,"column_start":5,"column_end":34}},{"value":"/ let it = (0..1).zip_longest(1..3);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":7779,"byte_end":7817,"line_start":284,"line_end":284,"column_start":5,"column_end":43}},{"value":"/ itertools::assert_equal(it, vec![Both(0, 1), Right(2)]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":7822,"byte_end":7882,"line_start":285,"line_end":285,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":7887,"byte_end":7894,"line_start":286,"line_end":286,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":7899,"byte_end":7908,"line_start":287,"line_end":287,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1439},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":8365,"byte_end":8371,"line_start":301,"line_end":301,"column_start":8,"column_end":14},"name":"zip_eq","qualname":"::Itertools::zip_eq","value":"fn zip_eq<J>(Self, J) -> ZipEq<Self, J::IntoIter> where J: IntoIterator,\nSelf: Sized","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Create an iterator which iterates over both this and the specified\n iterator simultaneously, yielding pairs of elements.","sig":null,"attributes":[{"value":"/ Create an iterator which iterates over both this and the specified","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":8112,"byte_end":8182,"line_start":295,"line_end":295,"column_start":5,"column_end":75}},{"value":"/ iterator simultaneously, yielding pairs of elements.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":8187,"byte_end":8243,"line_start":296,"line_end":296,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":8248,"byte_end":8251,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the iterators reach an end and they are not of equal","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":8256,"byte_end":8326,"line_start":298,"line_end":298,"column_start":5,"column_end":75}},{"value":"/ lengths.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":8331,"byte_end":8343,"line_start":299,"line_end":299,"column_start":5,"column_end":17}},{"value":"inline","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":8348,"byte_end":8357,"line_start":300,"line_end":300,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1441},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":9286,"byte_end":9294,"line_start":331,"line_end":331,"column_start":8,"column_end":16},"name":"batching","qualname":"::Itertools::batching","value":"fn batching<B, F>(Self, F) -> Batching<Self, F> where\nF: for<'_> FnMut(&'_ mut Self) -> Option<B>, Self: Sized","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" A “meta iterator adaptor”. Its closure recives a reference to the\n iterator and may pick off as many elements as it likes, to produce the\n next iterator element.","sig":null,"attributes":[{"value":"/ A “meta iterator adaptor”. Its closure recives a reference to the","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":8521,"byte_end":8594,"line_start":308,"line_end":308,"column_start":5,"column_end":74}},{"value":"/ iterator and may pick off as many elements as it likes, to produce the","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":8599,"byte_end":8673,"line_start":309,"line_end":309,"column_start":5,"column_end":79}},{"value":"/ next iterator element.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":8678,"byte_end":8704,"line_start":310,"line_end":310,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":8709,"byte_end":8712,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `B`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":8717,"byte_end":8750,"line_start":312,"line_end":312,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":8755,"byte_end":8758,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":8763,"byte_end":8770,"line_start":314,"line_end":314,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":8775,"byte_end":8804,"line_start":315,"line_end":315,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":8809,"byte_end":8812,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ // An adaptor that gathers elements in pairs","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":8817,"byte_end":8865,"line_start":317,"line_end":317,"column_start":5,"column_end":53}},{"value":"/ let pit = (0..4).batching(|it| {","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":8870,"byte_end":8906,"line_start":318,"line_end":318,"column_start":5,"column_end":41}},{"value":"/            match it.next() {","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":8911,"byte_end":8943,"line_start":319,"line_end":319,"column_start":5,"column_end":37}},{"value":"/                None => None,","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":8948,"byte_end":8980,"line_start":320,"line_end":320,"column_start":5,"column_end":37}},{"value":"/                Some(x) => match it.next() {","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":8985,"byte_end":9032,"line_start":321,"line_end":321,"column_start":5,"column_end":52}},{"value":"/                    None => None,","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":9037,"byte_end":9073,"line_start":322,"line_end":322,"column_start":5,"column_end":41}},{"value":"/                    Some(y) => Some((x, y)),","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":9078,"byte_end":9125,"line_start":323,"line_end":323,"column_start":5,"column_end":52}},{"value":"/                }","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":9130,"byte_end":9150,"line_start":324,"line_end":324,"column_start":5,"column_end":25}},{"value":"/            }","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":9155,"byte_end":9171,"line_start":325,"line_end":325,"column_start":5,"column_end":21}},{"value":"/        });","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":9176,"byte_end":9190,"line_start":326,"line_end":326,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":9195,"byte_end":9198,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(pit, vec![(0, 1), (2, 3)]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":9203,"byte_end":9258,"line_start":328,"line_end":328,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":9263,"byte_end":9270,"line_start":329,"line_end":329,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":9275,"byte_end":9278,"line_start":330,"line_end":330,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1444},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":10893,"byte_end":10901,"line_start":371,"line_end":371,"column_start":8,"column_end":16},"name":"group_by","qualname":"::Itertools::group_by","value":"fn group_by<K, F>(Self, F) -> GroupBy<K, Self, F> where Self: Sized,\nF: for<'_> FnMut(&'_ Self::Item) -> K","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Return an *iterable* that can group iterator elements.\n Consecutive elements that map to the same key (“runs”), are assigned\n to the same group.","sig":null,"attributes":[{"value":"/ Return an *iterable* that can group iterator elements.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":9461,"byte_end":9519,"line_start":338,"line_end":338,"column_start":5,"column_end":63}},{"value":"/ Consecutive elements that map to the same key (“runs”), are assigned","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":9524,"byte_end":9600,"line_start":339,"line_end":339,"column_start":5,"column_end":77}},{"value":"/ to the same group.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":9605,"byte_end":9627,"line_start":340,"line_end":340,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":9632,"byte_end":9635,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ `GroupBy` is the storage for the lazy grouping operation.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":9640,"byte_end":9701,"line_start":342,"line_end":342,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":9706,"byte_end":9709,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ If the groups are consumed in order, or if each group's iterator is","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":9714,"byte_end":9785,"line_start":344,"line_end":344,"column_start":5,"column_end":76}},{"value":"/ dropped without keeping it around, then `GroupBy` uses no","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":9790,"byte_end":9851,"line_start":345,"line_end":345,"column_start":5,"column_end":66}},{"value":"/ allocations.  It needs allocations only if several group iterators","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":9856,"byte_end":9926,"line_start":346,"line_end":346,"column_start":5,"column_end":75}},{"value":"/ are alive at the same time.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":9931,"byte_end":9962,"line_start":347,"line_end":347,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":9967,"byte_end":9970,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ This type implements `IntoIterator` (it is **not** an iterator","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":9975,"byte_end":10041,"line_start":349,"line_end":349,"column_start":5,"column_end":71}},{"value":"/ itself), because the group iterators need to borrow from this","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":10046,"byte_end":10111,"line_start":350,"line_end":350,"column_start":5,"column_end":70}},{"value":"/ value. It should be stored in a local variable or temporary and","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":10116,"byte_end":10183,"line_start":351,"line_end":351,"column_start":5,"column_end":72}},{"value":"/ iterated.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":10188,"byte_end":10201,"line_start":352,"line_end":352,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":10206,"byte_end":10209,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `(K, Group)`: the group's key and the","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":10214,"byte_end":10280,"line_start":354,"line_end":354,"column_start":5,"column_end":71}},{"value":"/ group iterator.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":10285,"byte_end":10304,"line_start":355,"line_end":355,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":10309,"byte_end":10312,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":10317,"byte_end":10324,"line_start":357,"line_end":357,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":10329,"byte_end":10358,"line_start":358,"line_end":358,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":10363,"byte_end":10366,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ // group data into runs of larger than zero or not.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":10371,"byte_end":10426,"line_start":360,"line_end":360,"column_start":5,"column_end":60}},{"value":"/ let data = vec![1, 3, -2, -2, 1, 0, 1, 2];","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":10431,"byte_end":10477,"line_start":361,"line_end":361,"column_start":5,"column_end":51}},{"value":"/ // groups:     |---->|------>|--------->|","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":10482,"byte_end":10527,"line_start":362,"line_end":362,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":10532,"byte_end":10535,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ // Note: The `&` is significant here, `GroupBy` is iterable","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":10540,"byte_end":10603,"line_start":364,"line_end":364,"column_start":5,"column_end":68}},{"value":"/ // only by reference. You can also call `.into_iter()` explicitly.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":10608,"byte_end":10678,"line_start":365,"line_end":365,"column_start":5,"column_end":75}},{"value":"/ for (key, group) in &data.into_iter().group_by(|elt| *elt >= 0) {","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":10683,"byte_end":10752,"line_start":366,"line_end":366,"column_start":5,"column_end":74}},{"value":"/     // Check that the sum of each group is +/- 4.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":10757,"byte_end":10810,"line_start":367,"line_end":367,"column_start":5,"column_end":58}},{"value":"/     assert_eq!(4, group.sum::<i32>().abs());","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":10815,"byte_end":10863,"line_start":368,"line_end":368,"column_start":5,"column_end":53}},{"value":"/ }","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":10868,"byte_end":10873,"line_start":369,"line_end":369,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":10878,"byte_end":10885,"line_start":370,"line_end":370,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1447},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":12120,"byte_end":12126,"line_start":405,"line_end":405,"column_start":8,"column_end":14},"name":"chunks","qualname":"::Itertools::chunks","value":"fn chunks(Self, usize) -> IntoChunks<Self> where Self: Sized","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Return an *iterable* that can chunk the iterator.","sig":null,"attributes":[{"value":"/ Return an *iterable* that can chunk the iterator.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":11067,"byte_end":11120,"line_start":378,"line_end":378,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":11125,"byte_end":11128,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ Yield subiterators (chunks) that each yield a fixed number elements,","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":11133,"byte_end":11205,"line_start":380,"line_end":380,"column_start":5,"column_end":77}},{"value":"/ determined by `size`. The last chunk will be shorter if there aren't","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":11210,"byte_end":11282,"line_start":381,"line_end":381,"column_start":5,"column_end":77}},{"value":"/ enough elements.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":11287,"byte_end":11307,"line_start":382,"line_end":382,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":11312,"byte_end":11315,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ `IntoChunks` is based on `GroupBy`: it is iterable (implements","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":11320,"byte_end":11386,"line_start":384,"line_end":384,"column_start":5,"column_end":71}},{"value":"/ `IntoIterator`, **not** `Iterator`), and it only buffers if several","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":11391,"byte_end":11462,"line_start":385,"line_end":385,"column_start":5,"column_end":76}},{"value":"/ chunk iterators are alive at the same time.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":11467,"byte_end":11514,"line_start":386,"line_end":386,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":11519,"byte_end":11522,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Chunk`, each chunk's iterator.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":11527,"byte_end":11587,"line_start":388,"line_end":388,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":11592,"byte_end":11595,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `size` is 0.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":11600,"byte_end":11630,"line_start":390,"line_end":390,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":11635,"byte_end":11638,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":11643,"byte_end":11650,"line_start":392,"line_end":392,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":11655,"byte_end":11684,"line_start":393,"line_end":393,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":11689,"byte_end":11692,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ let data = vec![1, 1, 2, -2, 6, 0, 3, 1];","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":11697,"byte_end":11742,"line_start":395,"line_end":395,"column_start":5,"column_end":50}},{"value":"/ //chunk size=3 |------->|-------->|--->|","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":11747,"byte_end":11791,"line_start":396,"line_end":396,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":11796,"byte_end":11799,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ // Note: The `&` is significant here, `IntoChunks` is iterable","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":11804,"byte_end":11870,"line_start":398,"line_end":398,"column_start":5,"column_end":71}},{"value":"/ // only by reference. You can also call `.into_iter()` explicitly.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":11875,"byte_end":11945,"line_start":399,"line_end":399,"column_start":5,"column_end":75}},{"value":"/ for chunk in &data.into_iter().chunks(3) {","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":11950,"byte_end":11996,"line_start":400,"line_end":400,"column_start":5,"column_end":51}},{"value":"/     // Check that the sum of each chunk is 4.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":12001,"byte_end":12050,"line_start":401,"line_end":401,"column_start":5,"column_end":54}},{"value":"/     assert_eq!(4, chunk.sum());","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":12055,"byte_end":12090,"line_start":402,"line_end":402,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":12095,"byte_end":12100,"line_start":403,"line_end":403,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":12105,"byte_end":12112,"line_start":404,"line_end":404,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1448},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":13482,"byte_end":13495,"line_start":443,"line_end":443,"column_start":8,"column_end":21},"name":"tuple_windows","qualname":"::Itertools::tuple_windows","value":"fn tuple_windows<T>(Self) -> TupleWindows<Self, T> where Self: Sized +\nIterator<Item = T::Item>, T: tuple_impl::TupleCollect, T::Item: Clone","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Return an iterator over all contiguous windows producing tuples of\n a specific size (up to 4).","sig":null,"attributes":[{"value":"/ Return an iterator over all contiguous windows producing tuples of","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":12282,"byte_end":12352,"line_start":412,"line_end":412,"column_start":5,"column_end":75}},{"value":"/ a specific size (up to 4).","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":12357,"byte_end":12387,"line_start":413,"line_end":413,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":12392,"byte_end":12395,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ `tuple_windows` clones the iterator elements so that they can be","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":12400,"byte_end":12468,"line_start":415,"line_end":415,"column_start":5,"column_end":73}},{"value":"/ part of successive windows, this makes it most suited for iterators","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":12473,"byte_end":12544,"line_start":416,"line_end":416,"column_start":5,"column_end":76}},{"value":"/ of references and other values that are cheap to copy.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":12549,"byte_end":12607,"line_start":417,"line_end":417,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":12612,"byte_end":12615,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":12620,"byte_end":12627,"line_start":419,"line_end":419,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":12632,"byte_end":12661,"line_start":420,"line_end":420,"column_start":5,"column_end":34}},{"value":"/ let mut v = Vec::new();","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":12666,"byte_end":12693,"line_start":421,"line_end":421,"column_start":5,"column_end":32}},{"value":"/ for (a, b) in (1..5).tuple_windows() {","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":12698,"byte_end":12740,"line_start":422,"line_end":422,"column_start":5,"column_end":47}},{"value":"/     v.push((a, b));","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":12745,"byte_end":12768,"line_start":423,"line_end":423,"column_start":5,"column_end":28}},{"value":"/ }","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":12773,"byte_end":12778,"line_start":424,"line_end":424,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(v, vec![(1, 2), (2, 3), (3, 4)]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":12783,"byte_end":12831,"line_start":425,"line_end":425,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":12836,"byte_end":12839,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ let mut it = (1..5).tuple_windows();","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":12844,"byte_end":12884,"line_start":427,"line_end":427,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(Some((1, 2, 3)), it.next());","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":12889,"byte_end":12932,"line_start":428,"line_end":428,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some((2, 3, 4)), it.next());","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":12937,"byte_end":12980,"line_start":429,"line_end":429,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(None, it.next());","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":12985,"byte_end":13017,"line_start":430,"line_end":430,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":13022,"byte_end":13025,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ // this requires a type hint","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":13030,"byte_end":13062,"line_start":432,"line_end":432,"column_start":5,"column_end":37}},{"value":"/ let it = (1..5).tuple_windows::<(_, _, _)>();","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":13067,"byte_end":13116,"line_start":433,"line_end":433,"column_start":5,"column_end":54}},{"value":"/ itertools::assert_equal(it, vec![(1, 2, 3), (2, 3, 4)]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":13121,"byte_end":13181,"line_start":434,"line_end":434,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":13186,"byte_end":13189,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ // you can also specify the complete type","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":13194,"byte_end":13239,"line_start":436,"line_end":436,"column_start":5,"column_end":50}},{"value":"/ use itertools::TupleWindows;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":13244,"byte_end":13276,"line_start":437,"line_end":437,"column_start":5,"column_end":37}},{"value":"/ use std::ops::Range;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":13281,"byte_end":13305,"line_start":438,"line_end":438,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":13310,"byte_end":13313,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ let it: TupleWindows<Range<u32>, (u32, u32, u32)> = (1..5).tuple_windows();","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":13318,"byte_end":13397,"line_start":440,"line_end":440,"column_start":5,"column_end":84}},{"value":"/ itertools::assert_equal(it, vec![(1, 2, 3), (2, 3, 4)]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":13402,"byte_end":13462,"line_start":441,"line_end":441,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":13467,"byte_end":13474,"line_start":442,"line_end":442,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1450},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":14804,"byte_end":14810,"line_start":482,"line_end":482,"column_start":8,"column_end":14},"name":"tuples","qualname":"::Itertools::tuples","value":"fn tuples<T>(Self) -> Tuples<Self, T> where Self: Sized + Iterator<Item =\nT::Item>, T: tuple_impl::TupleCollect","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Return an iterator that groups the items in tuples of a specific size\n (up to 4).","sig":null,"attributes":[{"value":"/ Return an iterator that groups the items in tuples of a specific size","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":13713,"byte_end":13786,"line_start":451,"line_end":451,"column_start":5,"column_end":78}},{"value":"/ (up to 4).","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":13791,"byte_end":13805,"line_start":452,"line_end":452,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":13810,"byte_end":13813,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ See also the method [`.next_tuple()`](#method.next_tuple).","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":13818,"byte_end":13880,"line_start":454,"line_end":454,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":13885,"byte_end":13888,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":13893,"byte_end":13900,"line_start":456,"line_end":456,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":13905,"byte_end":13934,"line_start":457,"line_end":457,"column_start":5,"column_end":34}},{"value":"/ let mut v = Vec::new();","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":13939,"byte_end":13966,"line_start":458,"line_end":458,"column_start":5,"column_end":32}},{"value":"/ for (a, b) in (1..5).tuples() {","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":13971,"byte_end":14006,"line_start":459,"line_end":459,"column_start":5,"column_end":40}},{"value":"/     v.push((a, b));","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":14011,"byte_end":14034,"line_start":460,"line_end":460,"column_start":5,"column_end":28}},{"value":"/ }","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":14039,"byte_end":14044,"line_start":461,"line_end":461,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(v, vec![(1, 2), (3, 4)]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":14049,"byte_end":14089,"line_start":462,"line_end":462,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":14094,"byte_end":14097,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ let mut it = (1..7).tuples();","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":14102,"byte_end":14135,"line_start":464,"line_end":464,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(Some((1, 2, 3)), it.next());","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":14140,"byte_end":14183,"line_start":465,"line_end":465,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some((4, 5, 6)), it.next());","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":14188,"byte_end":14231,"line_start":466,"line_end":466,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(None, it.next());","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":14236,"byte_end":14268,"line_start":467,"line_end":467,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":14273,"byte_end":14276,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ // this requires a type hint","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":14281,"byte_end":14313,"line_start":469,"line_end":469,"column_start":5,"column_end":37}},{"value":"/ let it = (1..7).tuples::<(_, _, _)>();","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":14318,"byte_end":14360,"line_start":470,"line_end":470,"column_start":5,"column_end":47}},{"value":"/ itertools::assert_equal(it, vec![(1, 2, 3), (4, 5, 6)]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":14365,"byte_end":14425,"line_start":471,"line_end":471,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":14430,"byte_end":14433,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ // you can also specify the complete type","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":14438,"byte_end":14483,"line_start":473,"line_end":473,"column_start":5,"column_end":50}},{"value":"/ use itertools::Tuples;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":14488,"byte_end":14514,"line_start":474,"line_end":474,"column_start":5,"column_end":31}},{"value":"/ use std::ops::Range;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":14519,"byte_end":14543,"line_start":475,"line_end":475,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":14548,"byte_end":14551,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ let it: Tuples<Range<u32>, (u32, u32, u32)> = (1..7).tuples();","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":14556,"byte_end":14622,"line_start":477,"line_end":477,"column_start":5,"column_end":71}},{"value":"/ itertools::assert_equal(it, vec![(1, 2, 3), (4, 5, 6)]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":14627,"byte_end":14687,"line_start":478,"line_end":478,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":14692,"byte_end":14699,"line_start":479,"line_end":479,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":14704,"byte_end":14707,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ See also [`Tuples::into_buffer`](structs/struct.Tuples.html#method.into_buffer).","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":14712,"byte_end":14796,"line_start":481,"line_end":481,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1452},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":15587,"byte_end":15590,"line_start":506,"line_end":506,"column_start":8,"column_end":11},"name":"tee","qualname":"::Itertools::tee","value":"fn tee(Self) -> (Tee<Self>, Tee<Self>) where Self: Sized, Self::Item: Clone","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Split into an iterator pair that both yield all elements from\n the original iterator.","sig":null,"attributes":[{"value":"/ Split into an iterator pair that both yield all elements from","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":14985,"byte_end":15050,"line_start":489,"line_end":489,"column_start":5,"column_end":70}},{"value":"/ the original iterator.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":15055,"byte_end":15081,"line_start":490,"line_end":490,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":15086,"byte_end":15089,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ **Note:** If the iterator is clonable, prefer using that instead","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":15094,"byte_end":15162,"line_start":492,"line_end":492,"column_start":5,"column_end":73}},{"value":"/ of using this method. It is likely to be more efficient.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":15167,"byte_end":15227,"line_start":493,"line_end":493,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":15232,"byte_end":15235,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":15240,"byte_end":15282,"line_start":495,"line_end":495,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":15287,"byte_end":15290,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":15295,"byte_end":15302,"line_start":497,"line_end":497,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":15307,"byte_end":15336,"line_start":498,"line_end":498,"column_start":5,"column_end":34}},{"value":"/ let xs = vec![0, 1, 2, 3];","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":15341,"byte_end":15371,"line_start":499,"line_end":499,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":15376,"byte_end":15379,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ let (mut t1, t2) = xs.into_iter().tee();","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":15384,"byte_end":15428,"line_start":501,"line_end":501,"column_start":5,"column_end":49}},{"value":"/ itertools::assert_equal(t1.next(), Some(0));","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":15433,"byte_end":15481,"line_start":502,"line_end":502,"column_start":5,"column_end":53}},{"value":"/ itertools::assert_equal(t2, 0..4);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":15486,"byte_end":15524,"line_start":503,"line_end":503,"column_start":5,"column_end":43}},{"value":"/ itertools::assert_equal(t1, 1..4);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":15529,"byte_end":15567,"line_start":504,"line_end":504,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":15572,"byte_end":15579,"line_start":505,"line_end":505,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1453},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":16228,"byte_end":16232,"line_start":529,"line_end":529,"column_start":8,"column_end":12},"name":"step","qualname":"::Itertools::step","value":"fn step(Self, usize) -> Step<Self> where Self: Sized","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that steps `n` elements in the base iterator\n for each iteration.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that steps `n` elements in the base iterator","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":15722,"byte_end":15797,"line_start":513,"line_end":513,"column_start":5,"column_end":80}},{"value":"/ for each iteration.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":15802,"byte_end":15825,"line_start":514,"line_end":514,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":15830,"byte_end":15833,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ The iterator steps by yielding the next element from the base iterator,","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":15838,"byte_end":15913,"line_start":516,"line_end":516,"column_start":5,"column_end":80}},{"value":"/ then skipping forward `n - 1` elements.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":15918,"byte_end":15961,"line_start":517,"line_end":517,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":15966,"byte_end":15969,"line_start":518,"line_end":518,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":15974,"byte_end":16016,"line_start":519,"line_end":519,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":16021,"byte_end":16024,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the step is 0.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":16029,"byte_end":16061,"line_start":521,"line_end":521,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":16066,"byte_end":16069,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":16074,"byte_end":16081,"line_start":523,"line_end":523,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":16086,"byte_end":16115,"line_start":524,"line_end":524,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":16120,"byte_end":16123,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ let it = (0..8).step(3);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":16128,"byte_end":16156,"line_start":526,"line_end":526,"column_start":5,"column_end":33}},{"value":"/ itertools::assert_equal(it, vec![0, 3, 6]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":16161,"byte_end":16208,"line_start":527,"line_end":527,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":16213,"byte_end":16220,"line_start":528,"line_end":528,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1454},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":16749,"byte_end":16760,"line_start":546,"line_end":546,"column_start":8,"column_end":19},"name":"map_results","qualname":"::Itertools::map_results","value":"fn map_results<F, T, U, E>(Self, F) -> MapResults<Self, F> where\nSelf: Iterator<Item = Result<T, E>> + Sized, F: FnMut(T) -> U","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that applies the provided closure\n to every `Result::Ok` value. `Result::Err` values are\n unchanged.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that applies the provided closure","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":16338,"byte_end":16402,"line_start":535,"line_end":535,"column_start":5,"column_end":69}},{"value":"/ to every `Result::Ok` value. `Result::Err` values are","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":16407,"byte_end":16464,"line_start":536,"line_end":536,"column_start":5,"column_end":62}},{"value":"/ unchanged.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":16469,"byte_end":16483,"line_start":537,"line_end":537,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":16488,"byte_end":16491,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":16496,"byte_end":16503,"line_start":539,"line_end":539,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":16508,"byte_end":16537,"line_start":540,"line_end":540,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":16542,"byte_end":16545,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ let input = vec![Ok(41), Err(false), Ok(11)];","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":16550,"byte_end":16599,"line_start":542,"line_end":542,"column_start":5,"column_end":54}},{"value":"/ let it = input.into_iter().map_results(|i| i + 1);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":16604,"byte_end":16658,"line_start":543,"line_end":543,"column_start":5,"column_end":59}},{"value":"/ itertools::assert_equal(it, vec![Ok(42), Err(false), Ok(12)]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":16663,"byte_end":16729,"line_start":544,"line_end":544,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":16734,"byte_end":16741,"line_start":545,"line_end":545,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1459},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":17423,"byte_end":17428,"line_start":567,"line_end":567,"column_start":8,"column_end":13},"name":"merge","qualname":"::Itertools::merge","value":"fn merge<J>(Self, J) -> Merge<Self, J::IntoIter> where Self: Sized,\nSelf::Item: PartialOrd, J: IntoIterator<Item = Self::Item>","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that merges the two base iterators in\n ascending order.  If both base iterators are sorted (ascending), the\n result is sorted.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that merges the two base iterators in","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":16955,"byte_end":17023,"line_start":553,"line_end":553,"column_start":5,"column_end":73}},{"value":"/ ascending order.  If both base iterators are sorted (ascending), the","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":17028,"byte_end":17100,"line_start":554,"line_end":554,"column_start":5,"column_end":77}},{"value":"/ result is sorted.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":17105,"byte_end":17126,"line_start":555,"line_end":555,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":17131,"byte_end":17134,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":17139,"byte_end":17181,"line_start":557,"line_end":557,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":17186,"byte_end":17189,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":17194,"byte_end":17201,"line_start":559,"line_end":559,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":17206,"byte_end":17235,"line_start":560,"line_end":560,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":17240,"byte_end":17243,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ let a = (0..11).step(3);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":17248,"byte_end":17276,"line_start":562,"line_end":562,"column_start":5,"column_end":33}},{"value":"/ let b = (0..11).step(5);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":17281,"byte_end":17309,"line_start":563,"line_end":563,"column_start":5,"column_end":33}},{"value":"/ let it = a.merge(b);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":17314,"byte_end":17338,"line_start":564,"line_end":564,"column_start":5,"column_end":29}},{"value":"/ itertools::assert_equal(it, vec![0, 0, 3, 5, 6, 9, 10]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":17343,"byte_end":17403,"line_start":565,"line_end":565,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":17408,"byte_end":17415,"line_start":566,"line_end":566,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1461},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":18205,"byte_end":18213,"line_start":591,"line_end":591,"column_start":8,"column_end":16},"name":"merge_by","qualname":"::Itertools::merge_by","value":"fn merge_by<J, F>(Self, J, F) -> MergeBy<Self, J::IntoIter, F> where\nSelf: Sized, J: IntoIterator<Item = Self::Item>,\nF: for<'_, '_> FnMut(&'_ Self::Item, &'_ Self::Item) -> bool","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that merges the two base iterators in order.\n This is much like `.merge()` but allows for a custom ordering.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that merges the two base iterators in order.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":17634,"byte_end":17709,"line_start":575,"line_end":575,"column_start":5,"column_end":80}},{"value":"/ This is much like `.merge()` but allows for a custom ordering.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":17714,"byte_end":17780,"line_start":576,"line_end":576,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":17785,"byte_end":17788,"line_start":577,"line_end":577,"column_start":5,"column_end":8}},{"value":"/ This can be especially useful for sequences of tuples.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":17793,"byte_end":17851,"line_start":578,"line_end":578,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":17856,"byte_end":17859,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":17864,"byte_end":17906,"line_start":580,"line_end":580,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":17911,"byte_end":17914,"line_start":581,"line_end":581,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":17919,"byte_end":17926,"line_start":582,"line_end":582,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":17931,"byte_end":17960,"line_start":583,"line_end":583,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":17965,"byte_end":17968,"line_start":584,"line_end":584,"column_start":5,"column_end":8}},{"value":"/ let a = (0..).zip(\"bc\".chars());","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":17973,"byte_end":18009,"line_start":585,"line_end":585,"column_start":5,"column_end":41}},{"value":"/ let b = (0..).zip(\"ad\".chars());","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":18014,"byte_end":18050,"line_start":586,"line_end":586,"column_start":5,"column_end":41}},{"value":"/ let it = a.merge_by(b, |x, y| x.1 <= y.1);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":18055,"byte_end":18101,"line_start":587,"line_end":587,"column_start":5,"column_end":51}},{"value":"/ itertools::assert_equal(it, vec![(0, 'a'), (0, 'b'), (1, 'c'), (1, 'd')]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":18106,"byte_end":18184,"line_start":588,"line_end":588,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":18189,"byte_end":18196,"line_start":589,"line_end":589,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1464},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":19043,"byte_end":19049,"line_start":615,"line_end":615,"column_start":8,"column_end":14},"name":"kmerge","qualname":"::Itertools::kmerge","value":"fn kmerge(Self) -> KMerge<<Self::Item as IntoIterator>::IntoIter> where\nSelf: Sized, Self::Item: IntoIterator,\n<Self::Item as IntoIterator>::Item: PartialOrd","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that flattens an iterator of iterators by\n merging them in ascending order.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that flattens an iterator of iterators by","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":18499,"byte_end":18571,"line_start":599,"line_end":599,"column_start":5,"column_end":77}},{"value":"/ merging them in ascending order.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":18576,"byte_end":18612,"line_start":600,"line_end":600,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":18617,"byte_end":18620,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/ If all base iterators are sorted (ascending), the result is sorted.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":18625,"byte_end":18696,"line_start":602,"line_end":602,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":18701,"byte_end":18704,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":18709,"byte_end":18751,"line_start":604,"line_end":604,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":18756,"byte_end":18759,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":18764,"byte_end":18771,"line_start":606,"line_end":606,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":18776,"byte_end":18805,"line_start":607,"line_end":607,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":18810,"byte_end":18813,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ let a = (0..6).step(3);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":18818,"byte_end":18845,"line_start":609,"line_end":609,"column_start":5,"column_end":32}},{"value":"/ let b = (1..6).step(3);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":18850,"byte_end":18877,"line_start":610,"line_end":610,"column_start":5,"column_end":32}},{"value":"/ let c = (2..6).step(3);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":18882,"byte_end":18909,"line_start":611,"line_end":611,"column_start":5,"column_end":32}},{"value":"/ let it = vec![a, b, c].into_iter().kmerge();","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":18914,"byte_end":18962,"line_start":612,"line_end":612,"column_start":5,"column_end":53}},{"value":"/ itertools::assert_equal(it, vec![0, 1, 2, 3, 4, 5]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":18967,"byte_end":19023,"line_start":613,"line_end":613,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":19028,"byte_end":19035,"line_start":614,"line_end":614,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1465},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":20022,"byte_end":20031,"line_start":643,"line_end":643,"column_start":8,"column_end":17},"name":"kmerge_by","qualname":"::Itertools::kmerge_by","value":"fn kmerge_by<F>(Self, F)\n-> KMergeBy<<Self::Item as IntoIterator>::IntoIter, F> where Self: Sized,\nSelf::Item: IntoIterator,\nF: for<'_,\n'_> FnMut(&'_ <Self::Item as IntoIterator>::Item,\n&'_ <Self::Item as IntoIterator>::Item) -> bool","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that flattens an iterator of iterators by\n merging them according to the given closure.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that flattens an iterator of iterators by","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":19273,"byte_end":19345,"line_start":623,"line_end":623,"column_start":5,"column_end":77}},{"value":"/ merging them according to the given closure.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":19350,"byte_end":19398,"line_start":624,"line_end":624,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":19403,"byte_end":19406,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/ The closure `first` is called with two elements *a*, *b* and should","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":19411,"byte_end":19482,"line_start":626,"line_end":626,"column_start":5,"column_end":76}},{"value":"/ return `true` if *a* is ordered before *b*.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":19487,"byte_end":19534,"line_start":627,"line_end":627,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":19539,"byte_end":19542,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ If all base iterators are sorted according to `first`, the result is","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":19547,"byte_end":19619,"line_start":629,"line_end":629,"column_start":5,"column_end":77}},{"value":"/ sorted.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":19624,"byte_end":19635,"line_start":630,"line_end":630,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":19640,"byte_end":19643,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":19648,"byte_end":19690,"line_start":632,"line_end":632,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":19695,"byte_end":19698,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":19703,"byte_end":19710,"line_start":634,"line_end":634,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":19715,"byte_end":19744,"line_start":635,"line_end":635,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":19749,"byte_end":19752,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ let a = vec![-1f64, 2., 3., -5., 6., -7.];","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":19757,"byte_end":19803,"line_start":637,"line_end":637,"column_start":5,"column_end":51}},{"value":"/ let b = vec![0., 2., -4.];","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":19808,"byte_end":19838,"line_start":638,"line_end":638,"column_start":5,"column_end":35}},{"value":"/ let mut it = vec![a, b].into_iter().kmerge_by(|a, b| a.abs() < b.abs());","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":19843,"byte_end":19919,"line_start":639,"line_end":639,"column_start":5,"column_end":81}},{"value":"/ assert_eq!(it.next(), Some(0.));","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":19924,"byte_end":19960,"line_start":640,"line_end":640,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(it.last(), Some(-7.));","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":19965,"byte_end":20002,"line_start":641,"line_end":641,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":20007,"byte_end":20014,"line_start":642,"line_end":642,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1467},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":20783,"byte_end":20800,"line_start":664,"line_end":664,"column_start":8,"column_end":25},"name":"cartesian_product","qualname":"::Itertools::cartesian_product","value":"fn cartesian_product<J>(Self, J) -> Product<Self, J::IntoIter> where\nSelf: Sized, Self::Item: Clone, J: IntoIterator, J::IntoIter: Clone","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over the cartesian product of\n the element sets of two iterators `self` and `J`.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that iterates over the cartesian product of","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":20357,"byte_end":20431,"line_start":653,"line_end":653,"column_start":5,"column_end":79}},{"value":"/ the element sets of two iterators `self` and `J`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":20436,"byte_end":20489,"line_start":654,"line_end":654,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":20494,"byte_end":20497,"line_start":655,"line_end":655,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `(Self::Item, J::Item)`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":20502,"byte_end":20555,"line_start":656,"line_end":656,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":20560,"byte_end":20563,"line_start":657,"line_end":657,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":20568,"byte_end":20575,"line_start":658,"line_end":658,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":20580,"byte_end":20609,"line_start":659,"line_end":659,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":20614,"byte_end":20617,"line_start":660,"line_end":660,"column_start":5,"column_end":8}},{"value":"/ let it = (0..2).cartesian_product(\"αβ\".chars());","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":20622,"byte_end":20676,"line_start":661,"line_end":661,"column_start":5,"column_end":57}},{"value":"/ itertools::assert_equal(it, vec![(0, 'α'), (0, 'β'), (1, 'α'), (1, 'β')]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":20681,"byte_end":20763,"line_start":662,"line_end":662,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":20768,"byte_end":20775,"line_start":663,"line_end":663,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1469},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":22222,"byte_end":22230,"line_start":701,"line_end":701,"column_start":8,"column_end":16},"name":"coalesce","qualname":"::Itertools::coalesce","value":"fn coalesce<F>(Self, F) -> Coalesce<Self, F> where Self: Sized,\nF: FnMut(Self::Item, Self::Item) ->\nResult<Self::Item, (Self::Item, Self::Item)>","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that uses the passed-in closure to\n optionally merge together consecutive elements.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that uses the passed-in closure to","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":21052,"byte_end":21117,"line_start":673,"line_end":673,"column_start":5,"column_end":70}},{"value":"/ optionally merge together consecutive elements.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":21122,"byte_end":21173,"line_start":674,"line_end":674,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":21178,"byte_end":21181,"line_start":675,"line_end":675,"column_start":5,"column_end":8}},{"value":"/ The closure `f` is passed two elements, `previous` and `current` and may","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":21186,"byte_end":21262,"line_start":676,"line_end":676,"column_start":5,"column_end":81}},{"value":"/ return either (1) `Ok(combined)` to merge the two values or","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":21267,"byte_end":21330,"line_start":677,"line_end":677,"column_start":5,"column_end":68}},{"value":"/ (2) `Err((previous', current'))` to indicate they can't be merged.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":21335,"byte_end":21405,"line_start":678,"line_end":678,"column_start":5,"column_end":75}},{"value":"/ In (2), the value `previous'` is emitted by the iterator.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":21410,"byte_end":21471,"line_start":679,"line_end":679,"column_start":5,"column_end":66}},{"value":"/ Either (1) `combined` or (2) `current'` becomes the previous value","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":21476,"byte_end":21546,"line_start":680,"line_end":680,"column_start":5,"column_end":75}},{"value":"/ when coalesce continues with the next pair of elements to merge. The","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":21551,"byte_end":21623,"line_start":681,"line_end":681,"column_start":5,"column_end":77}},{"value":"/ value that remains at the end is also emitted by the iterator.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":21628,"byte_end":21694,"line_start":682,"line_end":682,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":21699,"byte_end":21702,"line_start":683,"line_end":683,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":21707,"byte_end":21749,"line_start":684,"line_end":684,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":21754,"byte_end":21757,"line_start":685,"line_end":685,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":21762,"byte_end":21791,"line_start":686,"line_end":686,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":21796,"byte_end":21799,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":21804,"byte_end":21811,"line_start":688,"line_end":688,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":21816,"byte_end":21845,"line_start":689,"line_end":689,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":21850,"byte_end":21853,"line_start":690,"line_end":690,"column_start":5,"column_end":8}},{"value":"/ // sum same-sign runs together","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":21858,"byte_end":21892,"line_start":691,"line_end":691,"column_start":5,"column_end":39}},{"value":"/ let data = vec![-1., -2., -3., 3., 1., 0., -1.];","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":21897,"byte_end":21949,"line_start":692,"line_end":692,"column_start":5,"column_end":57}},{"value":"/ itertools::assert_equal(data.into_iter().coalesce(|x, y|","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":21954,"byte_end":22014,"line_start":693,"line_end":693,"column_start":5,"column_end":65}},{"value":"/         if (x >= 0.) == (y >= 0.) {","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":22019,"byte_end":22058,"line_start":694,"line_end":694,"column_start":5,"column_end":44}},{"value":"/             Ok(x + y)","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":22063,"byte_end":22088,"line_start":695,"line_end":695,"column_start":5,"column_end":30}},{"value":"/         } else {","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":22093,"byte_end":22113,"line_start":696,"line_end":696,"column_start":5,"column_end":25}},{"value":"/             Err((x, y))","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":22118,"byte_end":22145,"line_start":697,"line_end":697,"column_start":5,"column_end":32}},{"value":"/         }),","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":22150,"byte_end":22165,"line_start":698,"line_end":698,"column_start":5,"column_end":20}},{"value":"/         vec![-6., 4., -1.]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":22170,"byte_end":22202,"line_start":699,"line_end":699,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":22207,"byte_end":22214,"line_start":700,"line_end":700,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1471},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":22944,"byte_end":22949,"line_start":723,"line_end":723,"column_start":8,"column_end":13},"name":"dedup","qualname":"::Itertools::dedup","value":"fn dedup(Self) -> Dedup<Self> where Self: Sized, Self::Item: PartialEq","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Remove duplicates from sections of consecutive identical elements.\n If the iterator is sorted, all elements will be unique.","sig":null,"attributes":[{"value":"/ Remove duplicates from sections of consecutive identical elements.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":22465,"byte_end":22535,"line_start":709,"line_end":709,"column_start":5,"column_end":75}},{"value":"/ If the iterator is sorted, all elements will be unique.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":22540,"byte_end":22599,"line_start":710,"line_end":710,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":22604,"byte_end":22607,"line_start":711,"line_end":711,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":22612,"byte_end":22654,"line_start":712,"line_end":712,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":22659,"byte_end":22662,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":22667,"byte_end":22696,"line_start":714,"line_end":714,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":22701,"byte_end":22704,"line_start":715,"line_end":715,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":22709,"byte_end":22716,"line_start":716,"line_end":716,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":22721,"byte_end":22750,"line_start":717,"line_end":717,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":22755,"byte_end":22758,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ let data = vec![1., 1., 2., 3., 3., 2., 2.];","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":22763,"byte_end":22811,"line_start":719,"line_end":719,"column_start":5,"column_end":53}},{"value":"/ itertools::assert_equal(data.into_iter().dedup(),","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":22816,"byte_end":22869,"line_start":720,"line_end":720,"column_start":5,"column_end":58}},{"value":"/                         vec![1., 2., 3., 2.]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":22874,"byte_end":22924,"line_start":721,"line_end":721,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":22929,"byte_end":22936,"line_start":722,"line_end":722,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1472},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":23608,"byte_end":23614,"line_start":744,"line_end":744,"column_start":8,"column_end":14},"name":"unique","qualname":"::Itertools::unique","value":"fn unique(Self) -> Unique<Self> where Self: Sized, Self::Item: Clone + Eq +\nHash","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that filters out elements that have\n already been produced once during the iteration. Duplicates\n are detected using hash and equality.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that filters out elements that have","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":23082,"byte_end":23148,"line_start":730,"line_end":730,"column_start":5,"column_end":71}},{"value":"/ already been produced once during the iteration. Duplicates","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":23153,"byte_end":23216,"line_start":731,"line_end":731,"column_start":5,"column_end":68}},{"value":"/ are detected using hash and equality.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":23221,"byte_end":23262,"line_start":732,"line_end":732,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":23267,"byte_end":23270,"line_start":733,"line_end":733,"column_start":5,"column_end":8}},{"value":"/ Clones of visited elements are stored in a hash set in the","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":23275,"byte_end":23337,"line_start":734,"line_end":734,"column_start":5,"column_end":67}},{"value":"/ iterator.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":23342,"byte_end":23355,"line_start":735,"line_end":735,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":23360,"byte_end":23363,"line_start":736,"line_end":736,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":23368,"byte_end":23375,"line_start":737,"line_end":737,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":23380,"byte_end":23409,"line_start":738,"line_end":738,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":23414,"byte_end":23417,"line_start":739,"line_end":739,"column_start":5,"column_end":8}},{"value":"/ let data = vec![10, 20, 30, 20, 40, 10, 50];","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":23422,"byte_end":23470,"line_start":740,"line_end":740,"column_start":5,"column_end":53}},{"value":"/ itertools::assert_equal(data.into_iter().unique(),","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":23475,"byte_end":23529,"line_start":741,"line_end":741,"column_start":5,"column_end":59}},{"value":"/                         vec![10, 20, 30, 40, 50]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":23534,"byte_end":23588,"line_start":742,"line_end":742,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":23593,"byte_end":23600,"line_start":743,"line_end":743,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1473},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":24336,"byte_end":24345,"line_start":765,"line_end":765,"column_start":8,"column_end":17},"name":"unique_by","qualname":"::Itertools::unique_by","value":"fn unique_by<V, F>(Self, F) -> UniqueBy<Self, V, F> where Self: Sized, V: Eq +\nHash, F: for<'_> FnMut(&'_ Self::Item) -> V","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that filters out elements that have\n already been produced once during the iteration.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that filters out elements that have","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":23756,"byte_end":23822,"line_start":751,"line_end":751,"column_start":5,"column_end":71}},{"value":"/ already been produced once during the iteration.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":23827,"byte_end":23879,"line_start":752,"line_end":752,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":23884,"byte_end":23887,"line_start":753,"line_end":753,"column_start":5,"column_end":8}},{"value":"/ Duplicates are detected by comparing the key they map to","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":23892,"byte_end":23952,"line_start":754,"line_end":754,"column_start":5,"column_end":65}},{"value":"/ with the keying function `f` by hash and equality.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":23957,"byte_end":24011,"line_start":755,"line_end":755,"column_start":5,"column_end":59}},{"value":"/ The keys are stored in a hash set in the iterator.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":24016,"byte_end":24070,"line_start":756,"line_end":756,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":24075,"byte_end":24078,"line_start":757,"line_end":757,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":24083,"byte_end":24090,"line_start":758,"line_end":758,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":24095,"byte_end":24124,"line_start":759,"line_end":759,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":24129,"byte_end":24132,"line_start":760,"line_end":760,"column_start":5,"column_end":8}},{"value":"/ let data = vec![\"a\", \"bb\", \"aa\", \"c\", \"ccc\"];","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":24137,"byte_end":24186,"line_start":761,"line_end":761,"column_start":5,"column_end":54}},{"value":"/ itertools::assert_equal(data.into_iter().unique_by(|s| s.len()),","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":24191,"byte_end":24259,"line_start":762,"line_end":762,"column_start":5,"column_end":73}},{"value":"/                         vec![\"a\", \"bb\", \"ccc\"]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":24264,"byte_end":24316,"line_start":763,"line_end":763,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":24321,"byte_end":24328,"line_start":764,"line_end":764,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1476},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":25079,"byte_end":25097,"line_start":785,"line_end":785,"column_start":8,"column_end":26},"name":"peeking_take_while","qualname":"::Itertools::peeking_take_while","value":"fn peeking_take_while<F, '_>(&'_ mut Self, F) -> PeekingTakeWhile where\nSelf: Sized + PeekingNext, F: for<'_> FnMut(&'_ Self::Item) -> bool","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that borrows from this iterator and\n takes items while the closure `accept` returns `true`.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that borrows from this iterator and","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":24538,"byte_end":24604,"line_start":773,"line_end":773,"column_start":5,"column_end":71}},{"value":"/ takes items while the closure `accept` returns `true`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":24609,"byte_end":24667,"line_start":774,"line_end":774,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":24672,"byte_end":24675,"line_start":775,"line_end":775,"column_start":5,"column_end":8}},{"value":"/ This adaptor can only be used on iterators that implement `PeekingNext`","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":24680,"byte_end":24755,"line_start":776,"line_end":776,"column_start":5,"column_end":80}},{"value":"/ like `.peekable()`, `put_back` and a few other collection iterators.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":24760,"byte_end":24832,"line_start":777,"line_end":777,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":24837,"byte_end":24840,"line_start":778,"line_end":778,"column_start":5,"column_end":8}},{"value":"/ The last and rejected element (first `false`) is still available when","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":24845,"byte_end":24918,"line_start":779,"line_end":779,"column_start":5,"column_end":78}},{"value":"/ `peeking_take_while` is done.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":24923,"byte_end":24956,"line_start":780,"line_end":780,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":24961,"byte_end":24964,"line_start":781,"line_end":781,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":24969,"byte_end":24972,"line_start":782,"line_end":782,"column_start":5,"column_end":8}},{"value":"/ See also [`.take_while_ref()`](#method.take_while_ref)","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":24977,"byte_end":25035,"line_start":783,"line_end":783,"column_start":5,"column_end":63}},{"value":"/ which is a similar adaptor.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":25040,"byte_end":25071,"line_start":784,"line_end":784,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1478},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":26043,"byte_end":26057,"line_start":810,"line_end":810,"column_start":8,"column_end":22},"name":"take_while_ref","qualname":"::Itertools::take_while_ref","value":"fn take_while_ref<F, '_>(&'_ mut Self, F) -> TakeWhileRef where Self: Clone,\nF: for<'_> FnMut(&'_ Self::Item) -> bool","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that borrows from a `Clone`-able iterator\n to only pick off elements while the predicate `accept` returns `true`.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that borrows from a `Clone`-able iterator","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":25316,"byte_end":25388,"line_start":792,"line_end":792,"column_start":5,"column_end":77}},{"value":"/ to only pick off elements while the predicate `accept` returns `true`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":25393,"byte_end":25467,"line_start":793,"line_end":793,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":25472,"byte_end":25475,"line_start":794,"line_end":794,"column_start":5,"column_end":8}},{"value":"/ It uses the `Clone` trait to restore the original iterator so that the","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":25480,"byte_end":25554,"line_start":795,"line_end":795,"column_start":5,"column_end":79}},{"value":"/ last and rejected element (first `false`) is still available when","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":25559,"byte_end":25628,"line_start":796,"line_end":796,"column_start":5,"column_end":74}},{"value":"/ `take_while_ref` is done.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":25633,"byte_end":25662,"line_start":797,"line_end":797,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":25667,"byte_end":25670,"line_start":798,"line_end":798,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":25675,"byte_end":25682,"line_start":799,"line_end":799,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":25687,"byte_end":25716,"line_start":800,"line_end":800,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":25721,"byte_end":25724,"line_start":801,"line_end":801,"column_start":5,"column_end":8}},{"value":"/ let mut hexadecimals = \"0123456789abcdef\".chars();","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":25729,"byte_end":25783,"line_start":802,"line_end":802,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":25788,"byte_end":25791,"line_start":803,"line_end":803,"column_start":5,"column_end":8}},{"value":"/ let decimals = hexadecimals.take_while_ref(|c| c.is_numeric())","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":25796,"byte_end":25862,"line_start":804,"line_end":804,"column_start":5,"column_end":71}},{"value":"/                            .collect::<String>();","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":25867,"byte_end":25919,"line_start":805,"line_end":805,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(decimals, \"0123456789\");","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":25924,"byte_end":25963,"line_start":806,"line_end":806,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(hexadecimals.next(), Some('a'));","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":25968,"byte_end":26015,"line_start":807,"line_end":807,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":26020,"byte_end":26023,"line_start":808,"line_end":808,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":26028,"byte_end":26035,"line_start":809,"line_end":809,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1480},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":26723,"byte_end":26733,"line_start":831,"line_end":831,"column_start":8,"column_end":18},"name":"while_some","qualname":"::Itertools::while_some","value":"fn while_some<A>(Self) -> WhileSome<Self> where Self: Sized + Iterator<Item =\nOption<A>>","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that filters `Option<A>` iterator elements\n and produces `A`. Stops on the first `None` encountered.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that filters `Option<A>` iterator elements","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":26243,"byte_end":26316,"line_start":817,"line_end":817,"column_start":5,"column_end":78}},{"value":"/ and produces `A`. Stops on the first `None` encountered.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":26321,"byte_end":26381,"line_start":818,"line_end":818,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":26386,"byte_end":26389,"line_start":819,"line_end":819,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `A`, the unwrapped element.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":26394,"byte_end":26450,"line_start":820,"line_end":820,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":26455,"byte_end":26458,"line_start":821,"line_end":821,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":26463,"byte_end":26470,"line_start":822,"line_end":822,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":26475,"byte_end":26504,"line_start":823,"line_end":823,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":26509,"byte_end":26512,"line_start":824,"line_end":824,"column_start":5,"column_end":8}},{"value":"/ // List all hexadecimal digits","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":26517,"byte_end":26551,"line_start":825,"line_end":825,"column_start":5,"column_end":39}},{"value":"/ itertools::assert_equal(","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":26556,"byte_end":26584,"line_start":826,"line_end":826,"column_start":5,"column_end":33}},{"value":"/     (0..).map(|i| std::char::from_digit(i, 16)).while_some(),","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":26589,"byte_end":26654,"line_start":827,"line_end":827,"column_start":5,"column_end":70}},{"value":"/     \"0123456789abcdef\".chars());","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":26659,"byte_end":26695,"line_start":828,"line_end":828,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":26700,"byte_end":26703,"line_start":829,"line_end":829,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":26708,"byte_end":26715,"line_start":830,"line_end":830,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1482},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":28164,"byte_end":28182,"line_start":870,"line_end":870,"column_start":8,"column_end":26},"name":"tuple_combinations","qualname":"::Itertools::tuple_combinations","value":"fn tuple_combinations<T>(Self) -> TupleCombinations<Self, T> where\nSelf: Sized + Clone, Self::Item: Clone, T: adaptors::HasCombination<Self>","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over the combinations of the\n elements from an iterator.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that iterates over the combinations of the","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":26869,"byte_end":26942,"line_start":837,"line_end":837,"column_start":5,"column_end":78}},{"value":"/ elements from an iterator.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":26947,"byte_end":26977,"line_start":838,"line_end":838,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":26982,"byte_end":26985,"line_start":839,"line_end":839,"column_start":5,"column_end":8}},{"value":"/ Iterator element can be any homogeneous tuple of type `Self::Item` with","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":26990,"byte_end":27065,"line_start":840,"line_end":840,"column_start":5,"column_end":80}},{"value":"/ size up to 4.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":27070,"byte_end":27087,"line_start":841,"line_end":841,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":27092,"byte_end":27095,"line_start":842,"line_end":842,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":27100,"byte_end":27107,"line_start":843,"line_end":843,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":27112,"byte_end":27141,"line_start":844,"line_end":844,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":27146,"byte_end":27149,"line_start":845,"line_end":845,"column_start":5,"column_end":8}},{"value":"/ let mut v = Vec::new();","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":27154,"byte_end":27181,"line_start":846,"line_end":846,"column_start":5,"column_end":32}},{"value":"/ for (a, b) in (1..5).tuple_combinations() {","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":27186,"byte_end":27233,"line_start":847,"line_end":847,"column_start":5,"column_end":52}},{"value":"/     v.push((a, b));","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":27238,"byte_end":27261,"line_start":848,"line_end":848,"column_start":5,"column_end":28}},{"value":"/ }","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":27266,"byte_end":27271,"line_start":849,"line_end":849,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(v, vec![(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":27276,"byte_end":27348,"line_start":850,"line_end":850,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":27353,"byte_end":27356,"line_start":851,"line_end":851,"column_start":5,"column_end":8}},{"value":"/ let mut it = (1..5).tuple_combinations();","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":27361,"byte_end":27406,"line_start":852,"line_end":852,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(Some((1, 2, 3)), it.next());","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":27411,"byte_end":27454,"line_start":853,"line_end":853,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some((1, 2, 4)), it.next());","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":27459,"byte_end":27502,"line_start":854,"line_end":854,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some((1, 3, 4)), it.next());","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":27507,"byte_end":27550,"line_start":855,"line_end":855,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some((2, 3, 4)), it.next());","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":27555,"byte_end":27598,"line_start":856,"line_end":856,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(None, it.next());","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":27603,"byte_end":27635,"line_start":857,"line_end":857,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":27640,"byte_end":27643,"line_start":858,"line_end":858,"column_start":5,"column_end":8}},{"value":"/ // this requires a type hint","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":27648,"byte_end":27680,"line_start":859,"line_end":859,"column_start":5,"column_end":37}},{"value":"/ let it = (1..5).tuple_combinations::<(_, _, _)>();","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":27685,"byte_end":27739,"line_start":860,"line_end":860,"column_start":5,"column_end":59}},{"value":"/ itertools::assert_equal(it, vec![(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":27744,"byte_end":27826,"line_start":861,"line_end":861,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":27831,"byte_end":27834,"line_start":862,"line_end":862,"column_start":5,"column_end":8}},{"value":"/ // you can also specify the complete type","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":27839,"byte_end":27884,"line_start":863,"line_end":863,"column_start":5,"column_end":50}},{"value":"/ use itertools::TupleCombinations;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":27889,"byte_end":27926,"line_start":864,"line_end":864,"column_start":5,"column_end":42}},{"value":"/ use std::ops::Range;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":27931,"byte_end":27955,"line_start":865,"line_end":865,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":27960,"byte_end":27963,"line_start":866,"line_end":866,"column_start":5,"column_end":8}},{"value":"/ let it: TupleCombinations<Range<u32>, (u32, u32, u32)> = (1..5).tuple_combinations();","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":27968,"byte_end":28057,"line_start":867,"line_end":867,"column_start":5,"column_end":94}},{"value":"/ itertools::assert_equal(it, vec![(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":28062,"byte_end":28144,"line_start":868,"line_end":868,"column_start":5,"column_end":87}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":28149,"byte_end":28156,"line_start":869,"line_end":869,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1484},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":28956,"byte_end":28968,"line_start":895,"line_end":895,"column_start":8,"column_end":20},"name":"combinations","qualname":"::Itertools::combinations","value":"fn combinations(Self, usize) -> Combinations<Self> where Self: Sized,\nSelf::Item: Clone","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over the `n`-length combinations of\n the elements from an iterator.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that iterates over the `n`-length combinations of","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":28399,"byte_end":28479,"line_start":878,"line_end":878,"column_start":5,"column_end":85}},{"value":"/ the elements from an iterator.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":28484,"byte_end":28518,"line_start":879,"line_end":879,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":28523,"byte_end":28526,"line_start":880,"line_end":880,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Vec<Self::Item>`. The iterator produces a new Vec per iteration,","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":28531,"byte_end":28625,"line_start":881,"line_end":881,"column_start":5,"column_end":99}},{"value":"/ and clones the iterator elements.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":28630,"byte_end":28667,"line_start":882,"line_end":882,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":28672,"byte_end":28675,"line_start":883,"line_end":883,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":28680,"byte_end":28687,"line_start":884,"line_end":884,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":28692,"byte_end":28721,"line_start":885,"line_end":885,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":28726,"byte_end":28729,"line_start":886,"line_end":886,"column_start":5,"column_end":8}},{"value":"/ let it = (1..5).combinations(3);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":28734,"byte_end":28770,"line_start":887,"line_end":887,"column_start":5,"column_end":41}},{"value":"/ itertools::assert_equal(it, vec![","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":28775,"byte_end":28812,"line_start":888,"line_end":888,"column_start":5,"column_end":42}},{"value":"/     vec![1, 2, 3],","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":28817,"byte_end":28839,"line_start":889,"line_end":889,"column_start":5,"column_end":27}},{"value":"/     vec![1, 2, 4],","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":28844,"byte_end":28866,"line_start":890,"line_end":890,"column_start":5,"column_end":27}},{"value":"/     vec![1, 3, 4],","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":28871,"byte_end":28893,"line_start":891,"line_end":891,"column_start":5,"column_end":27}},{"value":"/     vec![2, 3, 4],","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":28898,"byte_end":28920,"line_start":892,"line_end":892,"column_start":5,"column_end":27}},{"value":"/     ]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":28925,"byte_end":28936,"line_start":893,"line_end":893,"column_start":5,"column_end":16}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":28941,"byte_end":28948,"line_start":894,"line_end":894,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1485},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":29794,"byte_end":29803,"line_start":919,"line_end":919,"column_start":8,"column_end":17},"name":"pad_using","qualname":"::Itertools::pad_using","value":"fn pad_using<F>(Self, usize, F) -> PadUsing<Self, F> where Self: Sized,\nF: FnMut(usize) -> Self::Item","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that pads the sequence to a minimum length of\n `min` by filling missing elements using a closure `f`.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that pads the sequence to a minimum length of","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":29123,"byte_end":29199,"line_start":902,"line_end":902,"column_start":5,"column_end":81}},{"value":"/ `min` by filling missing elements using a closure `f`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":29204,"byte_end":29262,"line_start":903,"line_end":903,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":29267,"byte_end":29270,"line_start":904,"line_end":904,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":29275,"byte_end":29317,"line_start":905,"line_end":905,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":29322,"byte_end":29325,"line_start":906,"line_end":906,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":29330,"byte_end":29337,"line_start":907,"line_end":907,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":29342,"byte_end":29371,"line_start":908,"line_end":908,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":29376,"byte_end":29379,"line_start":909,"line_end":909,"column_start":5,"column_end":8}},{"value":"/ let it = (0..5).pad_using(10, |i| 2*i);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":29384,"byte_end":29427,"line_start":910,"line_end":910,"column_start":5,"column_end":48}},{"value":"/ itertools::assert_equal(it, vec![0, 1, 2, 3, 4, 10, 12, 14, 16, 18]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":29432,"byte_end":29505,"line_start":911,"line_end":911,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":29510,"byte_end":29513,"line_start":912,"line_end":912,"column_start":5,"column_end":8}},{"value":"/ let it = (0..10).pad_using(5, |i| 2*i);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":29518,"byte_end":29561,"line_start":913,"line_end":913,"column_start":5,"column_end":48}},{"value":"/ itertools::assert_equal(it, vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":29566,"byte_end":29634,"line_start":914,"line_end":914,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":29639,"byte_end":29642,"line_start":915,"line_end":915,"column_start":5,"column_end":8}},{"value":"/ let it = (0..5).pad_using(10, |i| 2*i).rev();","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":29647,"byte_end":29696,"line_start":916,"line_end":916,"column_start":5,"column_end":54}},{"value":"/ itertools::assert_equal(it, vec![18, 16, 14, 12, 10, 4, 3, 2, 1, 0]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":29701,"byte_end":29774,"line_start":917,"line_end":917,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":29779,"byte_end":29786,"line_start":918,"line_end":918,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1487},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":30367,"byte_end":30374,"line_start":939,"line_end":939,"column_start":8,"column_end":15},"name":"flatten","qualname":"::Itertools::flatten","value":"fn flatten(Self) -> Flatten<Self, <Self::Item as IntoIterator>::IntoIter>\nwhere Self: Sized, Self::Item: IntoIterator","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Unravel a nested iterator.","sig":null,"attributes":[{"value":"/ Unravel a nested iterator.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":29982,"byte_end":30012,"line_start":926,"line_end":926,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":30017,"byte_end":30020,"line_start":927,"line_end":927,"column_start":5,"column_end":8}},{"value":"/ This is more or less equivalent to `.flat_map` with an identity","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":30025,"byte_end":30092,"line_start":928,"line_end":928,"column_start":5,"column_end":72}},{"value":"/ function.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":30097,"byte_end":30110,"line_start":929,"line_end":929,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":30115,"byte_end":30118,"line_start":930,"line_end":930,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":30123,"byte_end":30130,"line_start":931,"line_end":931,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":30135,"byte_end":30164,"line_start":932,"line_end":932,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":30169,"byte_end":30172,"line_start":933,"line_end":933,"column_start":5,"column_end":8}},{"value":"/ let data = vec![vec![1, 2, 3], vec![4, 5, 6]];","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":30177,"byte_end":30227,"line_start":934,"line_end":934,"column_start":5,"column_end":55}},{"value":"/ let flattened = data.iter().flatten();","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":30232,"byte_end":30274,"line_start":935,"line_end":935,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":30279,"byte_end":30282,"line_start":936,"line_end":936,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(flattened, &[1, 2, 3, 4, 5, 6]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":30287,"byte_end":30347,"line_start":937,"line_end":937,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":30352,"byte_end":30359,"line_start":938,"line_end":938,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1488},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":31299,"byte_end":31312,"line_start":965,"line_end":965,"column_start":8,"column_end":21},"name":"with_position","qualname":"::Itertools::with_position","value":"fn with_position(Self) -> WithPosition<Self> where Self: Sized","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that wraps each element in a `Position` to\n ease special-case handling of the first or last elements.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that wraps each element in a `Position` to","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":30553,"byte_end":30626,"line_start":946,"line_end":946,"column_start":5,"column_end":78}},{"value":"/ ease special-case handling of the first or last elements.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":30631,"byte_end":30692,"line_start":947,"line_end":947,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":30697,"byte_end":30700,"line_start":948,"line_end":948,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":30705,"byte_end":30733,"line_start":949,"line_end":949,"column_start":5,"column_end":33}},{"value":"/ [`Position<Self::Item>`](enum.Position.html)","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":30738,"byte_end":30786,"line_start":950,"line_end":950,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":30791,"byte_end":30794,"line_start":951,"line_end":951,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":30799,"byte_end":30806,"line_start":952,"line_end":952,"column_start":5,"column_end":12}},{"value":"/ use itertools::{Itertools, Position};","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":30811,"byte_end":30852,"line_start":953,"line_end":953,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":30857,"byte_end":30860,"line_start":954,"line_end":954,"column_start":5,"column_end":8}},{"value":"/ let it = (0..4).with_position();","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":30865,"byte_end":30901,"line_start":955,"line_end":955,"column_start":5,"column_end":41}},{"value":"/ itertools::assert_equal(it,","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":30906,"byte_end":30937,"line_start":956,"line_end":956,"column_start":5,"column_end":36}},{"value":"/                         vec![Position::First(0),","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":30942,"byte_end":30994,"line_start":957,"line_end":957,"column_start":5,"column_end":57}},{"value":"/                              Position::Middle(1),","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":30999,"byte_end":31052,"line_start":958,"line_end":958,"column_start":5,"column_end":58}},{"value":"/                              Position::Middle(2),","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":31057,"byte_end":31110,"line_start":959,"line_end":959,"column_start":5,"column_end":58}},{"value":"/                              Position::Last(3)]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":31115,"byte_end":31168,"line_start":960,"line_end":960,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":31173,"byte_end":31176,"line_start":961,"line_end":961,"column_start":5,"column_end":8}},{"value":"/ let it = (0..1).with_position();","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":31181,"byte_end":31217,"line_start":962,"line_end":962,"column_start":5,"column_end":41}},{"value":"/ itertools::assert_equal(it, vec![Position::Only(0)]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":31222,"byte_end":31279,"line_start":963,"line_end":963,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":31284,"byte_end":31291,"line_start":964,"line_end":964,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1489},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":31991,"byte_end":32000,"line_start":984,"line_end":984,"column_start":8,"column_end":17},"name":"positions","qualname":"::Itertools::positions","value":"fn positions<P>(Self, P) -> Positions<Self, P> where Self: Sized,\nP: FnMut(Self::Item) -> bool","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that yields the indices of all elements\n satisfying a predicate, counted from the start of the iterator.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that yields the indices of all elements","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":31428,"byte_end":31498,"line_start":971,"line_end":971,"column_start":5,"column_end":75}},{"value":"/ satisfying a predicate, counted from the start of the iterator.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":31503,"byte_end":31570,"line_start":972,"line_end":972,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":31575,"byte_end":31578,"line_start":973,"line_end":973,"column_start":5,"column_end":8}},{"value":"/ Equivalent to `iter.enumerate().filter(|(_, v)| predicate(v)).map(|(i, _)| i)`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":31583,"byte_end":31666,"line_start":974,"line_end":974,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":31671,"byte_end":31674,"line_start":975,"line_end":975,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":31679,"byte_end":31686,"line_start":976,"line_end":976,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":31691,"byte_end":31720,"line_start":977,"line_end":977,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":31725,"byte_end":31728,"line_start":978,"line_end":978,"column_start":5,"column_end":8}},{"value":"/ let data = vec![1, 2, 3, 3, 4, 6, 7, 9];","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":31733,"byte_end":31777,"line_start":979,"line_end":979,"column_start":5,"column_end":49}},{"value":"/ itertools::assert_equal(data.iter().positions(|v| v % 2 == 0), vec![1, 4, 5]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":31782,"byte_end":31864,"line_start":980,"line_end":980,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":31869,"byte_end":31872,"line_start":981,"line_end":981,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(data.iter().positions(|v| v % 2 == 1).rev(), vec![7, 6, 3, 2, 0]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":31877,"byte_end":31971,"line_start":982,"line_end":982,"column_start":5,"column_end":99}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":31976,"byte_end":31983,"line_start":983,"line_end":983,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1491},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":32638,"byte_end":32648,"line_start":1005,"line_end":1005,"column_start":8,"column_end":18},"name":"next_tuple","qualname":"::Itertools::next_tuple","value":"fn next_tuple<T, '_>(&'_ mut Self) -> Option<T> where Self: Sized +\nIterator<Item = T::Item>, T: tuple_impl::TupleCollect","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Advances the iterator and returns the next items grouped in a tuple of\n a specific size (up to 4).","sig":null,"attributes":[{"value":"/ Advances the iterator and returns the next items grouped in a tuple of","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":32206,"byte_end":32280,"line_start":992,"line_end":992,"column_start":5,"column_end":79}},{"value":"/ a specific size (up to 4).","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":32285,"byte_end":32315,"line_start":993,"line_end":993,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":32320,"byte_end":32323,"line_start":994,"line_end":994,"column_start":5,"column_end":8}},{"value":"/ If there are enough elements to be grouped in a tuple, then the tuple is","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":32328,"byte_end":32404,"line_start":995,"line_end":995,"column_start":5,"column_end":81}},{"value":"/ returned inside `Some`, otherwise `None` is returned.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":32409,"byte_end":32466,"line_start":996,"line_end":996,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":32471,"byte_end":32474,"line_start":997,"line_end":997,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":32479,"byte_end":32486,"line_start":998,"line_end":998,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":32491,"byte_end":32520,"line_start":999,"line_end":999,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":32525,"byte_end":32528,"line_start":1000,"line_end":1000,"column_start":5,"column_end":8}},{"value":"/ let mut iter = 1..5;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":32533,"byte_end":32557,"line_start":1001,"line_end":1001,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":32562,"byte_end":32565,"line_start":1002,"line_end":1002,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Some((1, 2)), iter.next_tuple());","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":32570,"byte_end":32618,"line_start":1003,"line_end":1003,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":32623,"byte_end":32630,"line_start":1004,"line_end":1004,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1493},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":33180,"byte_end":33193,"line_start":1023,"line_end":1023,"column_start":8,"column_end":21},"name":"find_position","qualname":"::Itertools::find_position","value":"fn find_position<P, '_>(&'_ mut Self, P) -> Option<(usize, Self::Item)> where\nP: for<'_> FnMut(&'_ Self::Item) -> bool","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Find the position and value of the first element satisfying a predicate.","sig":null,"attributes":[{"value":"/ Find the position and value of the first element satisfying a predicate.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":32832,"byte_end":32908,"line_start":1013,"line_end":1013,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":32913,"byte_end":32916,"line_start":1014,"line_end":1014,"column_start":5,"column_end":8}},{"value":"/ The iterator is not advanced past the first element found.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":32921,"byte_end":32983,"line_start":1015,"line_end":1015,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":32988,"byte_end":32991,"line_start":1016,"line_end":1016,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":32996,"byte_end":33003,"line_start":1017,"line_end":1017,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":33008,"byte_end":33037,"line_start":1018,"line_end":1018,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":33042,"byte_end":33045,"line_start":1019,"line_end":1019,"column_start":5,"column_end":8}},{"value":"/ let text = \"Hα\";","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":33050,"byte_end":33071,"line_start":1020,"line_end":1020,"column_start":5,"column_end":25}},{"value":"/ assert_eq!(text.chars().find_position(|ch| ch.is_lowercase()), Some((1, 'α')));","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":33076,"byte_end":33160,"line_start":1021,"line_end":1021,"column_start":5,"column_end":88}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":33165,"byte_end":33172,"line_start":1022,"line_end":1022,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1495},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":34042,"byte_end":34051,"line_start":1052,"line_end":1052,"column_start":8,"column_end":17},"name":"all_equal","qualname":"::Itertools::all_equal","value":"fn all_equal<'_>(&'_ mut Self) -> bool where Self::Item: PartialEq","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Check whether all elements compare equal.","sig":null,"attributes":[{"value":"/ Check whether all elements compare equal.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":33503,"byte_end":33548,"line_start":1036,"line_end":1036,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":33553,"byte_end":33556,"line_start":1037,"line_end":1037,"column_start":5,"column_end":8}},{"value":"/ Empty iterators are considered to have equal elements:","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":33561,"byte_end":33619,"line_start":1038,"line_end":1038,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":33624,"byte_end":33627,"line_start":1039,"line_end":1039,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":33632,"byte_end":33639,"line_start":1040,"line_end":1040,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":33644,"byte_end":33673,"line_start":1041,"line_end":1041,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":33678,"byte_end":33681,"line_start":1042,"line_end":1042,"column_start":5,"column_end":8}},{"value":"/ let data = vec![1, 1, 1, 2, 2, 3, 3, 3, 4, 5, 5];","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":33686,"byte_end":33739,"line_start":1043,"line_end":1043,"column_start":5,"column_end":58}},{"value":"/ assert!(!data.iter().all_equal());","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":33744,"byte_end":33782,"line_start":1044,"line_end":1044,"column_start":5,"column_end":43}},{"value":"/ assert!(data[0..3].iter().all_equal());","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":33787,"byte_end":33830,"line_start":1045,"line_end":1045,"column_start":5,"column_end":48}},{"value":"/ assert!(data[3..5].iter().all_equal());","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":33835,"byte_end":33878,"line_start":1046,"line_end":1046,"column_start":5,"column_end":48}},{"value":"/ assert!(data[5..8].iter().all_equal());","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":33883,"byte_end":33926,"line_start":1047,"line_end":1047,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":33931,"byte_end":33934,"line_start":1048,"line_end":1048,"column_start":5,"column_end":8}},{"value":"/ let data : Option<usize> = None;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":33939,"byte_end":33975,"line_start":1049,"line_end":1049,"column_start":5,"column_end":41}},{"value":"/ assert!(data.into_iter().all_equal());","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":33980,"byte_end":34022,"line_start":1050,"line_end":1050,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":34027,"byte_end":34034,"line_start":1051,"line_end":1051,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1496},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":34731,"byte_end":34739,"line_start":1073,"line_end":1073,"column_start":8,"column_end":16},"name":"dropping","qualname":"::Itertools::dropping","value":"fn dropping(Self, usize) -> Self where Self: Sized","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Consume the first `n` elements from the iterator eagerly,\n and return the same iterator again.","sig":null,"attributes":[{"value":"/ Consume the first `n` elements from the iterator eagerly,","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":34163,"byte_end":34224,"line_start":1058,"line_end":1058,"column_start":5,"column_end":66}},{"value":"/ and return the same iterator again.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":34229,"byte_end":34268,"line_start":1059,"line_end":1059,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":34273,"byte_end":34276,"line_start":1060,"line_end":1060,"column_start":5,"column_end":8}},{"value":"/ It works similarly to *.skip(* `n` *)* except it is eager and","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":34281,"byte_end":34346,"line_start":1061,"line_end":1061,"column_start":5,"column_end":70}},{"value":"/ preserves the iterator type.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":34351,"byte_end":34383,"line_start":1062,"line_end":1062,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":34388,"byte_end":34391,"line_start":1063,"line_end":1063,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":34396,"byte_end":34403,"line_start":1064,"line_end":1064,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":34408,"byte_end":34437,"line_start":1065,"line_end":1065,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":34442,"byte_end":34445,"line_start":1066,"line_end":1066,"column_start":5,"column_end":8}},{"value":"/ let mut iter = \"αβγ\".chars().dropping(2);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":34450,"byte_end":34498,"line_start":1067,"line_end":1067,"column_start":5,"column_end":50}},{"value":"/ itertools::assert_equal(iter, \"γ\".chars());","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":34503,"byte_end":34551,"line_start":1068,"line_end":1068,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":34556,"byte_end":34563,"line_start":1069,"line_end":1069,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":34568,"byte_end":34571,"line_start":1070,"line_end":1070,"column_start":5,"column_end":8}},{"value":"/ *Fusing notes: if the iterator is exhausted by dropping,","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":34576,"byte_end":34636,"line_start":1071,"line_end":1071,"column_start":5,"column_end":65}},{"value":"/ the result of calling `.next()` again depends on the iterator implementation.*","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":34641,"byte_end":34723,"line_start":1072,"line_end":1072,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":1497},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":35432,"byte_end":35445,"line_start":1097,"line_end":1097,"column_start":8,"column_end":21},"name":"dropping_back","qualname":"::Itertools::dropping_back","value":"fn dropping_back(Self, usize) -> Self where Self: Sized,\nSelf: DoubleEndedIterator","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Consume the last `n` elements from the iterator eagerly,\n and return the same iterator again.","sig":null,"attributes":[{"value":"/ Consume the last `n` elements from the iterator eagerly,","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":34882,"byte_end":34942,"line_start":1082,"line_end":1082,"column_start":5,"column_end":65}},{"value":"/ and return the same iterator again.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":34947,"byte_end":34986,"line_start":1083,"line_end":1083,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":34991,"byte_end":34994,"line_start":1084,"line_end":1084,"column_start":5,"column_end":8}},{"value":"/ This is only possible on double ended iterators. `n` may be","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":34999,"byte_end":35062,"line_start":1085,"line_end":1085,"column_start":5,"column_end":68}},{"value":"/ larger than the number of elements.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":35067,"byte_end":35106,"line_start":1086,"line_end":1086,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":35111,"byte_end":35114,"line_start":1087,"line_end":1087,"column_start":5,"column_end":8}},{"value":"/ Note: This method is eager, dropping the back elements immediately and","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":35119,"byte_end":35193,"line_start":1088,"line_end":1088,"column_start":5,"column_end":79}},{"value":"/ preserves the iterator type.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":35198,"byte_end":35230,"line_start":1089,"line_end":1089,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":35235,"byte_end":35238,"line_start":1090,"line_end":1090,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":35243,"byte_end":35250,"line_start":1091,"line_end":1091,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":35255,"byte_end":35284,"line_start":1092,"line_end":1092,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":35289,"byte_end":35292,"line_start":1093,"line_end":1093,"column_start":5,"column_end":8}},{"value":"/ let init = vec![0, 3, 6, 9].into_iter().dropping_back(1);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":35297,"byte_end":35358,"line_start":1094,"line_end":1094,"column_start":5,"column_end":66}},{"value":"/ itertools::assert_equal(init, vec![0, 3, 6]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":35363,"byte_end":35412,"line_start":1095,"line_end":1095,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":35417,"byte_end":35424,"line_start":1096,"line_end":1096,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1498},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":36168,"byte_end":36175,"line_start":1124,"line_end":1124,"column_start":8,"column_end":15},"name":"foreach","qualname":"::Itertools::foreach","value":"fn foreach<F>(Self, F) where F: FnMut(Self::Item) -> (), Self: Sized","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Run the closure `f` eagerly on each element of the iterator.","sig":null,"attributes":[{"value":"/ Run the closure `f` eagerly on each element of the iterator.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":35642,"byte_end":35706,"line_start":1107,"line_end":1107,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":35711,"byte_end":35714,"line_start":1108,"line_end":1108,"column_start":5,"column_end":8}},{"value":"/ Consumes the iterator until its end.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":35719,"byte_end":35759,"line_start":1109,"line_end":1109,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":35764,"byte_end":35767,"line_start":1110,"line_end":1110,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":35772,"byte_end":35779,"line_start":1111,"line_end":1111,"column_start":5,"column_end":12}},{"value":"/ use std::sync::mpsc::channel;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":35784,"byte_end":35817,"line_start":1112,"line_end":1112,"column_start":5,"column_end":38}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":35822,"byte_end":35851,"line_start":1113,"line_end":1113,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":35856,"byte_end":35859,"line_start":1114,"line_end":1114,"column_start":5,"column_end":8}},{"value":"/ let (tx, rx) = channel();","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":35864,"byte_end":35893,"line_start":1115,"line_end":1115,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":35898,"byte_end":35901,"line_start":1116,"line_end":1116,"column_start":5,"column_end":8}},{"value":"/ // use .foreach() to apply a function to each value -- sending it","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":35906,"byte_end":35975,"line_start":1117,"line_end":1117,"column_start":5,"column_end":74}},{"value":"/ (0..5).map(|x| x * 2 + 1).foreach(|x| { tx.send(x).unwrap(); } );","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":35980,"byte_end":36049,"line_start":1118,"line_end":1118,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":36054,"byte_end":36057,"line_start":1119,"line_end":1119,"column_start":5,"column_end":8}},{"value":"/ drop(tx);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":36062,"byte_end":36075,"line_start":1120,"line_end":1120,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":36080,"byte_end":36083,"line_start":1121,"line_end":1121,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(rx.iter(), vec![1, 3, 5, 7, 9]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":36088,"byte_end":36148,"line_start":1122,"line_end":1122,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":36153,"byte_end":36160,"line_start":1123,"line_end":1123,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1501},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":36838,"byte_end":36844,"line_start":1144,"line_end":1144,"column_start":8,"column_end":14},"name":"concat","qualname":"::Itertools::concat","value":"fn concat(Self) -> Self::Item where Self: Sized,\nSelf::Item: Extend<<<Self as Iterator>::Item as IntoIterator>::Item> +\nIntoIterator + Default","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Combine all an iterator's elements into one element by using `Extend`.","sig":null,"attributes":[{"value":"/ Combine all an iterator's elements into one element by using `Extend`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":36328,"byte_end":36402,"line_start":1131,"line_end":1131,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":36407,"byte_end":36410,"line_start":1132,"line_end":1132,"column_start":5,"column_end":8}},{"value":"/ This combinator will extend the first item with each of the rest of the","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":36415,"byte_end":36490,"line_start":1133,"line_end":1133,"column_start":5,"column_end":80}},{"value":"/ items of the iterator. If the iterator is empty, the default value of","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":36495,"byte_end":36568,"line_start":1134,"line_end":1134,"column_start":5,"column_end":78}},{"value":"/ `I::Item` is returned.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":36573,"byte_end":36599,"line_start":1135,"line_end":1135,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":36604,"byte_end":36607,"line_start":1136,"line_end":1136,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":36612,"byte_end":36623,"line_start":1137,"line_end":1137,"column_start":5,"column_end":16}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":36628,"byte_end":36657,"line_start":1138,"line_end":1138,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":36662,"byte_end":36665,"line_start":1139,"line_end":1139,"column_start":5,"column_end":8}},{"value":"/ let input = vec![vec![1], vec![2, 3], vec![4, 5, 6]];","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":36670,"byte_end":36727,"line_start":1140,"line_end":1140,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(input.into_iter().concat(),","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":36732,"byte_end":36774,"line_start":1141,"line_end":1141,"column_start":5,"column_end":47}},{"value":"/            vec![1, 2, 3, 4, 5, 6]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":36779,"byte_end":36818,"line_start":1142,"line_end":1142,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":36823,"byte_end":36830,"line_start":1143,"line_end":1143,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1502},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":37140,"byte_end":37151,"line_start":1153,"line_end":1153,"column_start":8,"column_end":19},"name":"collect_vec","qualname":"::Itertools::collect_vec","value":"fn collect_vec(Self) -> Vec<Self::Item> where Self: Sized","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" `.collect_vec()` is simply a type specialization of `.collect()`,\n for convenience.\n","sig":null,"attributes":[{"value":"/ `.collect_vec()` is simply a type specialization of `.collect()`,","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":37038,"byte_end":37107,"line_start":1151,"line_end":1151,"column_start":5,"column_end":74}},{"value":"/ for convenience.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":37112,"byte_end":37132,"line_start":1152,"line_end":1152,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1503},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":37768,"byte_end":37776,"line_start":1175,"line_end":1175,"column_start":8,"column_end":16},"name":"set_from","qualname":"::Itertools::set_from","value":"fn set_from<'a, A, J, '_>(&'_ mut Self, J) -> usize where A: 'a,\nSelf: Iterator<Item = &'a mut A>, J: IntoIterator<Item = A>","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Assign to each reference in `self` from the `from` iterator,\n stopping at the shortest of the two iterators.","sig":null,"attributes":[{"value":"/ Assign to each reference in `self` from the `from` iterator,","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":37243,"byte_end":37307,"line_start":1159,"line_end":1159,"column_start":5,"column_end":69}},{"value":"/ stopping at the shortest of the two iterators.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":37312,"byte_end":37362,"line_start":1160,"line_end":1160,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":37367,"byte_end":37370,"line_start":1161,"line_end":1161,"column_start":5,"column_end":8}},{"value":"/ The `from` iterator is queried for its next element before the `self`","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":37375,"byte_end":37448,"line_start":1162,"line_end":1162,"column_start":5,"column_end":78}},{"value":"/ iterator, and if either is exhausted the method is done.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":37453,"byte_end":37513,"line_start":1163,"line_end":1163,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":37518,"byte_end":37521,"line_start":1164,"line_end":1164,"column_start":5,"column_end":8}},{"value":"/ Return the number of elements written.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":37526,"byte_end":37568,"line_start":1165,"line_end":1165,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":37573,"byte_end":37576,"line_start":1166,"line_end":1166,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":37581,"byte_end":37588,"line_start":1167,"line_end":1167,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":37593,"byte_end":37622,"line_start":1168,"line_end":1168,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":37627,"byte_end":37630,"line_start":1169,"line_end":1169,"column_start":5,"column_end":8}},{"value":"/ let mut xs = [0; 4];","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":37635,"byte_end":37659,"line_start":1170,"line_end":1170,"column_start":5,"column_end":29}},{"value":"/ xs.iter_mut().set_from(1..);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":37664,"byte_end":37696,"line_start":1171,"line_end":1171,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(xs, [1, 2, 3, 4]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":37701,"byte_end":37734,"line_start":1172,"line_end":1172,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":37739,"byte_end":37746,"line_start":1173,"line_end":1173,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":37751,"byte_end":37760,"line_start":1174,"line_end":1174,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1507},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":38488,"byte_end":38492,"line_start":1200,"line_end":1200,"column_start":8,"column_end":12},"name":"join","qualname":"::Itertools::join","value":"fn join<'_, '_>(&'_ mut Self, &'_ str) -> String where\nSelf::Item: std::fmt::Display","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Combine all iterator elements into one String, seperated by `sep`.","sig":null,"attributes":[{"value":"/ Combine all iterator elements into one String, seperated by `sep`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":38144,"byte_end":38214,"line_start":1190,"line_end":1190,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":38219,"byte_end":38222,"line_start":1191,"line_end":1191,"column_start":5,"column_end":8}},{"value":"/ Use the `Display` implementation of each element.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":38227,"byte_end":38280,"line_start":1192,"line_end":1192,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":38285,"byte_end":38288,"line_start":1193,"line_end":1193,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":38293,"byte_end":38300,"line_start":1194,"line_end":1194,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":38305,"byte_end":38334,"line_start":1195,"line_end":1195,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":38339,"byte_end":38342,"line_start":1196,"line_end":1196,"column_start":5,"column_end":8}},{"value":"/ assert_eq!([\"a\", \"b\", \"c\"].iter().join(\", \"), \"a, b, c\");","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":38347,"byte_end":38408,"line_start":1197,"line_end":1197,"column_start":5,"column_end":66}},{"value":"/ assert_eq!([1, 2, 3].iter().join(\", \"), \"1, 2, 3\");","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":38413,"byte_end":38468,"line_start":1198,"line_end":1198,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":38473,"byte_end":38480,"line_start":1199,"line_end":1199,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1508},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":39620,"byte_end":39626,"line_start":1234,"line_end":1234,"column_start":8,"column_end":14},"name":"format","qualname":"::Itertools::format","value":"fn format<'_>(Self, &'_ str) -> Format where Self: Sized","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Format all iterator elements, separated by `sep`.","sig":null,"attributes":[{"value":"/ Format all iterator elements, separated by `sep`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":39132,"byte_end":39185,"line_start":1219,"line_end":1219,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":39190,"byte_end":39193,"line_start":1220,"line_end":1220,"column_start":5,"column_end":8}},{"value":"/ All elements are formatted (any formatting trait)","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":39198,"byte_end":39251,"line_start":1221,"line_end":1221,"column_start":5,"column_end":58}},{"value":"/ with `sep` inserted between each element.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":39256,"byte_end":39301,"line_start":1222,"line_end":1222,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":39306,"byte_end":39309,"line_start":1223,"line_end":1223,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the formatter helper is formatted more than once.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":39314,"byte_end":39381,"line_start":1224,"line_end":1224,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":39386,"byte_end":39389,"line_start":1225,"line_end":1225,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":39394,"byte_end":39401,"line_start":1226,"line_end":1226,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":39406,"byte_end":39435,"line_start":1227,"line_end":1227,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":39440,"byte_end":39443,"line_start":1228,"line_end":1228,"column_start":5,"column_end":8}},{"value":"/ let data = [1.1, 2.71828, -3.];","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":39448,"byte_end":39483,"line_start":1229,"line_end":1229,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":39488,"byte_end":39503,"line_start":1230,"line_end":1230,"column_start":5,"column_end":20}},{"value":"/     format!(\"{:.2}\", data.iter().format(\", \")),","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":39508,"byte_end":39559,"line_start":1231,"line_end":1231,"column_start":5,"column_end":56}},{"value":"/            \"1.10, 2.72, -3.00\");","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":39564,"byte_end":39600,"line_start":1232,"line_end":1232,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":39605,"byte_end":39612,"line_start":1233,"line_end":1233,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1509},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":41104,"byte_end":41115,"line_start":1272,"line_end":1272,"column_start":8,"column_end":19},"name":"format_with","qualname":"::Itertools::format_with","value":"fn format_with<F, '_>(Self, &'_ str, F) -> FormatWith where Self: Sized,\nF: for<'_> FnMut(Self::Item,\n&'_ mut for<'_> FnMut(&'_ fmt::Display) -> fmt::Result) -> fmt::Result","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Format all iterator elements, separated by `sep`.","sig":null,"attributes":[{"value":"/ Format all iterator elements, separated by `sep`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":39750,"byte_end":39803,"line_start":1240,"line_end":1240,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":39808,"byte_end":39811,"line_start":1241,"line_end":1241,"column_start":5,"column_end":8}},{"value":"/ This is a customizable version of `.format()`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":39816,"byte_end":39866,"line_start":1242,"line_end":1242,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":39871,"byte_end":39874,"line_start":1243,"line_end":1243,"column_start":5,"column_end":8}},{"value":"/ The supplied closure `format` is called once per iterator element,","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":39879,"byte_end":39949,"line_start":1244,"line_end":1244,"column_start":5,"column_end":75}},{"value":"/ with two arguments: the element and a callback that takes a","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":39954,"byte_end":40017,"line_start":1245,"line_end":1245,"column_start":5,"column_end":68}},{"value":"/ `&Display` value, i.e. any reference to type that implements `Display`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":40022,"byte_end":40097,"line_start":1246,"line_end":1246,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":40102,"byte_end":40105,"line_start":1247,"line_end":1247,"column_start":5,"column_end":8}},{"value":"/ Using `&format_args!(...)` is the most versatile way to apply custom","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":40110,"byte_end":40182,"line_start":1248,"line_end":1248,"column_start":5,"column_end":77}},{"value":"/ element formatting. The callback can be called multiple times if needed.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":40187,"byte_end":40263,"line_start":1249,"line_end":1249,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":40268,"byte_end":40271,"line_start":1250,"line_end":1250,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the formatter helper is formatted more than once.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":40276,"byte_end":40343,"line_start":1251,"line_end":1251,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":40348,"byte_end":40351,"line_start":1252,"line_end":1252,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":40356,"byte_end":40363,"line_start":1253,"line_end":1253,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":40368,"byte_end":40397,"line_start":1254,"line_end":1254,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":40402,"byte_end":40405,"line_start":1255,"line_end":1255,"column_start":5,"column_end":8}},{"value":"/ let data = [1.1, 2.71828, -3.];","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":40410,"byte_end":40445,"line_start":1256,"line_end":1256,"column_start":5,"column_end":40}},{"value":"/ let data_formatter = data.iter().format_with(\", \", |elt, f| f(&format_args!(\"{:.2}\", elt)));","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":40450,"byte_end":40546,"line_start":1257,"line_end":1257,"column_start":5,"column_end":101}},{"value":"/ assert_eq!(format!(\"{}\", data_formatter),","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":40551,"byte_end":40596,"line_start":1258,"line_end":1258,"column_start":5,"column_end":50}},{"value":"/            \"1.10, 2.72, -3.00\");","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":40601,"byte_end":40637,"line_start":1259,"line_end":1259,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":40642,"byte_end":40645,"line_start":1260,"line_end":1260,"column_start":5,"column_end":8}},{"value":"/ // .format_with() is recursively composable","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":40650,"byte_end":40697,"line_start":1261,"line_end":1261,"column_start":5,"column_end":52}},{"value":"/ let matrix = [[1., 2., 3.],","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":40702,"byte_end":40733,"line_start":1262,"line_end":1262,"column_start":5,"column_end":36}},{"value":"/               [4., 5., 6.]];","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":40738,"byte_end":40770,"line_start":1263,"line_end":1263,"column_start":5,"column_end":37}},{"value":"/ let matrix_formatter = matrix.iter().format_with(\"\\n\", |row, f| {","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":40775,"byte_end":40844,"line_start":1264,"line_end":1264,"column_start":5,"column_end":74}},{"value":"/                                 f(&row.iter().format_with(\", \", |elt, g| g(&elt)))","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":40849,"byte_end":40935,"line_start":1265,"line_end":1265,"column_start":5,"column_end":91}},{"value":"/                              });","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":40940,"byte_end":40976,"line_start":1266,"line_end":1266,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(format!(\"{}\", matrix_formatter),","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":40981,"byte_end":41028,"line_start":1267,"line_end":1267,"column_start":5,"column_end":52}},{"value":"/            \"1, 2, 3\\n4, 5, 6\");","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":41033,"byte_end":41068,"line_start":1268,"line_end":1268,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":41073,"byte_end":41076,"line_start":1269,"line_end":1269,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":41081,"byte_end":41084,"line_start":1270,"line_end":1270,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":41089,"byte_end":41096,"line_start":1271,"line_end":1271,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1511},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":42836,"byte_end":42848,"line_start":1321,"line_end":1321,"column_start":8,"column_end":20},"name":"fold_results","qualname":"::Itertools::fold_results","value":"fn fold_results<A, E, B, F, '_>(&'_ mut Self, B, F) -> Result<B, E> where\nSelf: Iterator<Item = Result<A, E>>, F: FnMut(B, A) -> B","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Fold `Result` values from an iterator.","sig":null,"attributes":[{"value":"/ Fold `Result` values from an iterator.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":41353,"byte_end":41395,"line_start":1279,"line_end":1279,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":41400,"byte_end":41403,"line_start":1280,"line_end":1280,"column_start":5,"column_end":8}},{"value":"/ Only `Ok` values are folded. If no error is encountered, the folded","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":41408,"byte_end":41479,"line_start":1281,"line_end":1281,"column_start":5,"column_end":76}},{"value":"/ value is returned inside `Ok`. Otherwise, the operation terminates","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":41484,"byte_end":41554,"line_start":1282,"line_end":1282,"column_start":5,"column_end":75}},{"value":"/ and returns the first `Err` value it encounters. No iterator elements are","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":41559,"byte_end":41636,"line_start":1283,"line_end":1283,"column_start":5,"column_end":82}},{"value":"/ consumed after the first error.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":41641,"byte_end":41676,"line_start":1284,"line_end":1284,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":41681,"byte_end":41684,"line_start":1285,"line_end":1285,"column_start":5,"column_end":8}},{"value":"/ The first accumulator value is the `start` parameter.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":41689,"byte_end":41746,"line_start":1286,"line_end":1286,"column_start":5,"column_end":62}},{"value":"/ Each iteration passes the accumulator value and the next value inside `Ok`","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":41751,"byte_end":41829,"line_start":1287,"line_end":1287,"column_start":5,"column_end":83}},{"value":"/ to the fold function `f` and its return value becomes the new accumulator value.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":41834,"byte_end":41918,"line_start":1288,"line_end":1288,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":41923,"byte_end":41926,"line_start":1289,"line_end":1289,"column_start":5,"column_end":8}},{"value":"/ For example the sequence *Ok(1), Ok(2), Ok(3)* will result in a","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":41931,"byte_end":41998,"line_start":1290,"line_end":1290,"column_start":5,"column_end":72}},{"value":"/ computation like this:","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":42003,"byte_end":42029,"line_start":1291,"line_end":1291,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":42034,"byte_end":42037,"line_start":1292,"line_end":1292,"column_start":5,"column_end":8}},{"value":"/ ```ignore","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":42042,"byte_end":42055,"line_start":1293,"line_end":1293,"column_start":5,"column_end":18}},{"value":"/ let mut accum = start;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":42060,"byte_end":42086,"line_start":1294,"line_end":1294,"column_start":5,"column_end":31}},{"value":"/ accum = f(accum, 1);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":42091,"byte_end":42115,"line_start":1295,"line_end":1295,"column_start":5,"column_end":29}},{"value":"/ accum = f(accum, 2);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":42120,"byte_end":42144,"line_start":1296,"line_end":1296,"column_start":5,"column_end":29}},{"value":"/ accum = f(accum, 3);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":42149,"byte_end":42173,"line_start":1297,"line_end":1297,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":42178,"byte_end":42185,"line_start":1298,"line_end":1298,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":42190,"byte_end":42193,"line_start":1299,"line_end":1299,"column_start":5,"column_end":8}},{"value":"/ With a `start` value of 0 and an addition as folding function,","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":42198,"byte_end":42264,"line_start":1300,"line_end":1300,"column_start":5,"column_end":71}},{"value":"/ this effetively results in *((0 + 1) + 2) + 3*","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":42269,"byte_end":42319,"line_start":1301,"line_end":1301,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":42324,"byte_end":42327,"line_start":1302,"line_end":1302,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":42332,"byte_end":42339,"line_start":1303,"line_end":1303,"column_start":5,"column_end":12}},{"value":"/ use std::ops::Add;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":42344,"byte_end":42366,"line_start":1304,"line_end":1304,"column_start":5,"column_end":27}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":42371,"byte_end":42400,"line_start":1305,"line_end":1305,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":42405,"byte_end":42408,"line_start":1306,"line_end":1306,"column_start":5,"column_end":8}},{"value":"/ let values = [1, 2, -2, -1, 2, 1];","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":42413,"byte_end":42451,"line_start":1307,"line_end":1307,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":42456,"byte_end":42471,"line_start":1308,"line_end":1308,"column_start":5,"column_end":20}},{"value":"/     values.iter()","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":42476,"byte_end":42497,"line_start":1309,"line_end":1309,"column_start":5,"column_end":26}},{"value":"/           .map(Ok::<_, ()>)","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":42502,"byte_end":42533,"line_start":1310,"line_end":1310,"column_start":5,"column_end":36}},{"value":"/           .fold_results(0, Add::add),","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":42538,"byte_end":42579,"line_start":1311,"line_end":1311,"column_start":5,"column_end":46}},{"value":"/     Ok(3)","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":42584,"byte_end":42597,"line_start":1312,"line_end":1312,"column_start":5,"column_end":18}},{"value":"/ );","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":42602,"byte_end":42608,"line_start":1313,"line_end":1313,"column_start":5,"column_end":11}},{"value":"/ assert!(","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":42613,"byte_end":42625,"line_start":1314,"line_end":1314,"column_start":5,"column_end":17}},{"value":"/     values.iter()","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":42630,"byte_end":42651,"line_start":1315,"line_end":1315,"column_start":5,"column_end":26}},{"value":"/           .map(|&x| if x >= 0 { Ok(x) } else { Err(\"Negative number\") })","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":42656,"byte_end":42732,"line_start":1316,"line_end":1316,"column_start":5,"column_end":81}},{"value":"/           .fold_results(0, Add::add)","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":42737,"byte_end":42777,"line_start":1317,"line_end":1317,"column_start":5,"column_end":45}},{"value":"/           .is_err()","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":42782,"byte_end":42805,"line_start":1318,"line_end":1318,"column_start":5,"column_end":28}},{"value":"/ );","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":42810,"byte_end":42816,"line_start":1319,"line_end":1319,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":42821,"byte_end":42828,"line_start":1320,"line_end":1320,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1516},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":44005,"byte_end":44017,"line_start":1353,"line_end":1353,"column_start":8,"column_end":20},"name":"fold_options","qualname":"::Itertools::fold_options","value":"fn fold_options<A, B, F, '_>(&'_ mut Self, B, F) -> Option<B> where\nSelf: Iterator<Item = Option<A>>, F: FnMut(B, A) -> B","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Fold `Option` values from an iterator.","sig":null,"attributes":[{"value":"/ Fold `Option` values from an iterator.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":43193,"byte_end":43235,"line_start":1334,"line_end":1334,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":43240,"byte_end":43243,"line_start":1335,"line_end":1335,"column_start":5,"column_end":8}},{"value":"/ Only `Some` values are folded. If no `None` is encountered, the folded","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":43248,"byte_end":43322,"line_start":1336,"line_end":1336,"column_start":5,"column_end":79}},{"value":"/ value is returned inside `Some`. Otherwise, the operation terminates","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":43327,"byte_end":43399,"line_start":1337,"line_end":1337,"column_start":5,"column_end":77}},{"value":"/ and returns `None`. No iterator elements are consumed after the `None`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":43404,"byte_end":43479,"line_start":1338,"line_end":1338,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":43484,"byte_end":43487,"line_start":1339,"line_end":1339,"column_start":5,"column_end":8}},{"value":"/ This is the `Option` equivalent to `fold_results`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":43492,"byte_end":43546,"line_start":1340,"line_end":1340,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":43551,"byte_end":43554,"line_start":1341,"line_end":1341,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":43559,"byte_end":43566,"line_start":1342,"line_end":1342,"column_start":5,"column_end":12}},{"value":"/ use std::ops::Add;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":43571,"byte_end":43593,"line_start":1343,"line_end":1343,"column_start":5,"column_end":27}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":43598,"byte_end":43627,"line_start":1344,"line_end":1344,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":43632,"byte_end":43635,"line_start":1345,"line_end":1345,"column_start":5,"column_end":8}},{"value":"/ let mut values = vec![Some(1), Some(2), Some(-2)].into_iter();","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":43640,"byte_end":43706,"line_start":1346,"line_end":1346,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(values.fold_options(5, Add::add), Some(5 + 1 + 2 - 2));","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":43711,"byte_end":43781,"line_start":1347,"line_end":1347,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":43786,"byte_end":43789,"line_start":1348,"line_end":1348,"column_start":5,"column_end":8}},{"value":"/ let mut more_values = vec![Some(2), None, Some(0)].into_iter();","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":43794,"byte_end":43861,"line_start":1349,"line_end":1349,"column_start":5,"column_end":72}},{"value":"/ assert!(more_values.fold_options(0, Add::add).is_none());","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":43866,"byte_end":43927,"line_start":1350,"line_end":1350,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(more_values.next().unwrap(), Some(0));","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":43932,"byte_end":43985,"line_start":1351,"line_end":1351,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":43990,"byte_end":43997,"line_start":1352,"line_end":1352,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1520},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":44817,"byte_end":44822,"line_start":1378,"line_end":1378,"column_start":8,"column_end":13},"name":"fold1","qualname":"::Itertools::fold1","value":"fn fold1<F>(Self, F) -> Option<Self::Item> where\nF: FnMut(Self::Item, Self::Item) -> Self::Item, Self: Sized","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Accumulator of the elements in the iterator.","sig":null,"attributes":[{"value":"/ Accumulator of the elements in the iterator.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":44353,"byte_end":44401,"line_start":1366,"line_end":1366,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":44406,"byte_end":44409,"line_start":1367,"line_end":1367,"column_start":5,"column_end":8}},{"value":"/ Like `.fold()`, without a base case. If the iterator is","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":44414,"byte_end":44473,"line_start":1368,"line_end":1368,"column_start":5,"column_end":64}},{"value":"/ empty, return `None`. With just one element, return it.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":44478,"byte_end":44537,"line_start":1369,"line_end":1369,"column_start":5,"column_end":64}},{"value":"/ Otherwise elements are accumulated in sequence using the closure `f`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":44542,"byte_end":44615,"line_start":1370,"line_end":1370,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":44620,"byte_end":44623,"line_start":1371,"line_end":1371,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":44628,"byte_end":44635,"line_start":1372,"line_end":1372,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":44640,"byte_end":44669,"line_start":1373,"line_end":1373,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":44674,"byte_end":44677,"line_start":1374,"line_end":1374,"column_start":5,"column_end":8}},{"value":"/ assert_eq!((0..10).fold1(|x, y| x + y).unwrap_or(0), 45);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":44682,"byte_end":44743,"line_start":1375,"line_end":1375,"column_start":5,"column_end":66}},{"value":"/ assert_eq!((0..0).fold1(|x, y| x * y), None);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":44748,"byte_end":44797,"line_start":1376,"line_end":1376,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":44802,"byte_end":44809,"line_start":1377,"line_end":1377,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1523},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":46336,"byte_end":46346,"line_start":1424,"line_end":1424,"column_start":8,"column_end":18},"name":"fold_while","qualname":"::Itertools::fold_while","value":"fn fold_while<B, F, '_>(&'_ mut Self, B, F) -> FoldWhile<B> where Self: Sized,\nF: FnMut(B, Self::Item) -> FoldWhile<B>","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" An iterator method that applies a function, producing a single, final value.","sig":null,"attributes":[{"value":"/ An iterator method that applies a function, producing a single, final value.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":45020,"byte_end":45100,"line_start":1385,"line_end":1385,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":45105,"byte_end":45108,"line_start":1386,"line_end":1386,"column_start":5,"column_end":8}},{"value":"/ `fold_while()` is basically equivalent to `fold()` but with additional support for","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":45113,"byte_end":45199,"line_start":1387,"line_end":1387,"column_start":5,"column_end":91}},{"value":"/ early exit via short-circuiting.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":45204,"byte_end":45240,"line_start":1388,"line_end":1388,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":45245,"byte_end":45248,"line_start":1389,"line_end":1389,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":45253,"byte_end":45260,"line_start":1390,"line_end":1390,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":45265,"byte_end":45294,"line_start":1391,"line_end":1391,"column_start":5,"column_end":34}},{"value":"/ use itertools::FoldWhile::{Continue, Done};","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":45299,"byte_end":45346,"line_start":1392,"line_end":1392,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":45351,"byte_end":45354,"line_start":1393,"line_end":1393,"column_start":5,"column_end":8}},{"value":"/ let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":45359,"byte_end":45409,"line_start":1394,"line_end":1394,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":45414,"byte_end":45417,"line_start":1395,"line_end":1395,"column_start":5,"column_end":8}},{"value":"/ let mut result = 0;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":45422,"byte_end":45445,"line_start":1396,"line_end":1396,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":45450,"byte_end":45453,"line_start":1397,"line_end":1397,"column_start":5,"column_end":8}},{"value":"/ // for loop:","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":45458,"byte_end":45474,"line_start":1398,"line_end":1398,"column_start":5,"column_end":21}},{"value":"/ for i in &numbers {","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":45479,"byte_end":45502,"line_start":1399,"line_end":1399,"column_start":5,"column_end":28}},{"value":"/     if *i > 5 {","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":45507,"byte_end":45526,"line_start":1400,"line_end":1400,"column_start":5,"column_end":24}},{"value":"/         break;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":45531,"byte_end":45549,"line_start":1401,"line_end":1401,"column_start":5,"column_end":23}},{"value":"/     }","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":45554,"byte_end":45563,"line_start":1402,"line_end":1402,"column_start":5,"column_end":14}},{"value":"/     result = result + i;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":45568,"byte_end":45596,"line_start":1403,"line_end":1403,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":45601,"byte_end":45606,"line_start":1404,"line_end":1404,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":45611,"byte_end":45614,"line_start":1405,"line_end":1405,"column_start":5,"column_end":8}},{"value":"/ // fold:","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":45619,"byte_end":45631,"line_start":1406,"line_end":1406,"column_start":5,"column_end":17}},{"value":"/ let result2 = numbers.iter().fold(0, |acc, x| {","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":45636,"byte_end":45687,"line_start":1407,"line_end":1407,"column_start":5,"column_end":56}},{"value":"/     if *x > 5 { acc } else { acc + x }","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":45692,"byte_end":45734,"line_start":1408,"line_end":1408,"column_start":5,"column_end":47}},{"value":"/ });","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":45739,"byte_end":45746,"line_start":1409,"line_end":1409,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":45751,"byte_end":45754,"line_start":1410,"line_end":1410,"column_start":5,"column_end":8}},{"value":"/ // fold_while:","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":45759,"byte_end":45777,"line_start":1411,"line_end":1411,"column_start":5,"column_end":23}},{"value":"/ let result3 = numbers.iter().fold_while(0, |acc, x| {","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":45782,"byte_end":45839,"line_start":1412,"line_end":1412,"column_start":5,"column_end":62}},{"value":"/     if *x > 5 { Done(acc) } else { Continue(acc + x) }","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":45844,"byte_end":45902,"line_start":1413,"line_end":1413,"column_start":5,"column_end":63}},{"value":"/ }).into_inner();","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":45907,"byte_end":45927,"line_start":1414,"line_end":1414,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":45932,"byte_end":45935,"line_start":1415,"line_end":1415,"column_start":5,"column_end":8}},{"value":"/ // they're the same","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":45940,"byte_end":45963,"line_start":1416,"line_end":1416,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(result, result2);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":45968,"byte_end":46000,"line_start":1417,"line_end":1417,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(result2, result3);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":46005,"byte_end":46038,"line_start":1418,"line_end":1418,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":46043,"byte_end":46050,"line_start":1419,"line_end":1419,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":46055,"byte_end":46058,"line_start":1420,"line_end":1420,"column_start":5,"column_end":8}},{"value":"/ The big difference between the computations of `result2` and `result3` is that while","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":46063,"byte_end":46151,"line_start":1421,"line_end":1421,"column_start":5,"column_end":93}},{"value":"/ `fold()` called the provided closure for every item of the callee iterator,","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":46156,"byte_end":46235,"line_start":1422,"line_end":1422,"column_start":5,"column_end":84}},{"value":"/ `fold_while()` actually stopped iterating as soon as it encountered `Fold::Done(_)`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":46240,"byte_end":46328,"line_start":1423,"line_end":1423,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":1526},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":47256,"byte_end":47262,"line_start":1451,"line_end":1451,"column_start":8,"column_end":14},"name":"sorted","qualname":"::Itertools::sorted","value":"fn sorted(Self) -> Vec<Self::Item> where Self: Sized, Self::Item: Ord","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Collect all iterator elements into a sorted vector in ascending order.","sig":null,"attributes":[{"value":"/ Collect all iterator elements into a sorted vector in ascending order.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":46771,"byte_end":46845,"line_start":1438,"line_end":1438,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":46850,"byte_end":46853,"line_start":1439,"line_end":1439,"column_start":5,"column_end":8}},{"value":"/ **Note:** This consumes the entire iterator, uses the","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":46858,"byte_end":46915,"line_start":1440,"line_end":1440,"column_start":5,"column_end":62}},{"value":"/ `slice::sort_by()` method and returns the sorted vector.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":46920,"byte_end":46980,"line_start":1441,"line_end":1441,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":46985,"byte_end":46988,"line_start":1442,"line_end":1442,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":46993,"byte_end":47000,"line_start":1443,"line_end":1443,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":47005,"byte_end":47034,"line_start":1444,"line_end":1444,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":47039,"byte_end":47042,"line_start":1445,"line_end":1445,"column_start":5,"column_end":8}},{"value":"/ // sort the letters of the text in ascending order","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":47047,"byte_end":47101,"line_start":1446,"line_end":1446,"column_start":5,"column_end":59}},{"value":"/ let text = \"bdacfe\";","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":47106,"byte_end":47130,"line_start":1447,"line_end":1447,"column_start":5,"column_end":29}},{"value":"/ itertools::assert_equal(text.chars().sorted(),","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":47135,"byte_end":47185,"line_start":1448,"line_end":1448,"column_start":5,"column_end":55}},{"value":"/                         \"abcdef\".chars());","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":47190,"byte_end":47236,"line_start":1449,"line_end":1449,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":47241,"byte_end":47248,"line_start":1450,"line_end":1450,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1527},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":48126,"byte_end":48135,"line_start":1478,"line_end":1478,"column_start":8,"column_end":17},"name":"sorted_by","qualname":"::Itertools::sorted_by","value":"fn sorted_by<F>(Self, F) -> Vec<Self::Item> where Self: Sized,\nF: for<'_, '_> FnMut(&'_ Self::Item, &'_ Self::Item) -> Ordering","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Collect all iterator elements into a sorted vector.","sig":null,"attributes":[{"value":"/ Collect all iterator elements into a sorted vector.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":47395,"byte_end":47450,"line_start":1458,"line_end":1458,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":47455,"byte_end":47458,"line_start":1459,"line_end":1459,"column_start":5,"column_end":8}},{"value":"/ **Note:** This consumes the entire iterator, uses the","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":47463,"byte_end":47520,"line_start":1460,"line_end":1460,"column_start":5,"column_end":62}},{"value":"/ `slice::sort_by()` method and returns the sorted vector.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":47525,"byte_end":47585,"line_start":1461,"line_end":1461,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":47590,"byte_end":47593,"line_start":1462,"line_end":1462,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":47598,"byte_end":47605,"line_start":1463,"line_end":1463,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":47610,"byte_end":47639,"line_start":1464,"line_end":1464,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":47644,"byte_end":47647,"line_start":1465,"line_end":1465,"column_start":5,"column_end":8}},{"value":"/ // sort people in descending order by age","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":47652,"byte_end":47697,"line_start":1466,"line_end":1466,"column_start":5,"column_end":50}},{"value":"/ let people = vec![(\"Jane\", 20), (\"John\", 18), (\"Jill\", 30), (\"Jack\", 27)];","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":47702,"byte_end":47780,"line_start":1467,"line_end":1467,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":47785,"byte_end":47788,"line_start":1468,"line_end":1468,"column_start":5,"column_end":8}},{"value":"/ let oldest_people_first = people","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":47793,"byte_end":47829,"line_start":1469,"line_end":1469,"column_start":5,"column_end":41}},{"value":"/     .into_iter()","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":47834,"byte_end":47854,"line_start":1470,"line_end":1470,"column_start":5,"column_end":25}},{"value":"/     .sorted_by(|a, b| Ord::cmp(&b.1, &a.1))","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":47859,"byte_end":47906,"line_start":1471,"line_end":1471,"column_start":5,"column_end":52}},{"value":"/     .into_iter()","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":47911,"byte_end":47931,"line_start":1472,"line_end":1472,"column_start":5,"column_end":25}},{"value":"/     .map(|(person, _age)| person);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":47936,"byte_end":47974,"line_start":1473,"line_end":1473,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":47979,"byte_end":47982,"line_start":1474,"line_end":1474,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(oldest_people_first,","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":47987,"byte_end":48035,"line_start":1475,"line_end":1475,"column_start":5,"column_end":53}},{"value":"/                         vec![\"Jill\", \"Jack\", \"Jane\", \"John\"]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":48040,"byte_end":48106,"line_start":1476,"line_end":1476,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":48111,"byte_end":48118,"line_start":1477,"line_end":1477,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1529},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":49075,"byte_end":49088,"line_start":1509,"line_end":1509,"column_start":8,"column_end":21},"name":"partition_map","qualname":"::Itertools::partition_map","value":"fn partition_map<A, B, F, L, R>(Self, F) -> (A, B) where Self: Sized,\nF: Fn(Self::Item) -> Either<L, R>, A: Default + Extend<L>, B: Default +\nExtend<R>","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Collect all iterator elements into one of two\n partitions. Unlike `Iterator::partition`, each partition may\n have a distinct type.","sig":null,"attributes":[{"value":"/ Collect all iterator elements into one of two","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":48366,"byte_end":48415,"line_start":1488,"line_end":1488,"column_start":5,"column_end":54}},{"value":"/ partitions. Unlike `Iterator::partition`, each partition may","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":48420,"byte_end":48484,"line_start":1489,"line_end":1489,"column_start":5,"column_end":69}},{"value":"/ have a distinct type.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":48489,"byte_end":48514,"line_start":1490,"line_end":1490,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":48519,"byte_end":48522,"line_start":1491,"line_end":1491,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":48527,"byte_end":48534,"line_start":1492,"line_end":1492,"column_start":5,"column_end":12}},{"value":"/ use itertools::{Itertools, Either};","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":48539,"byte_end":48578,"line_start":1493,"line_end":1493,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":48583,"byte_end":48586,"line_start":1494,"line_end":1494,"column_start":5,"column_end":8}},{"value":"/ let successes_and_failures = vec![Ok(1), Err(false), Err(true), Ok(2)];","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":48591,"byte_end":48666,"line_start":1495,"line_end":1495,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":48671,"byte_end":48674,"line_start":1496,"line_end":1496,"column_start":5,"column_end":8}},{"value":"/ let (successes, failures): (Vec<_>, Vec<_>) = successes_and_failures","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":48679,"byte_end":48751,"line_start":1497,"line_end":1497,"column_start":5,"column_end":77}},{"value":"/     .into_iter()","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":48756,"byte_end":48776,"line_start":1498,"line_end":1498,"column_start":5,"column_end":25}},{"value":"/     .partition_map(|r| {","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":48781,"byte_end":48809,"line_start":1499,"line_end":1499,"column_start":5,"column_end":33}},{"value":"/         match r {","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":48814,"byte_end":48835,"line_start":1500,"line_end":1500,"column_start":5,"column_end":26}},{"value":"/             Ok(v) => Either::Left(v),","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":48840,"byte_end":48881,"line_start":1501,"line_end":1501,"column_start":5,"column_end":46}},{"value":"/             Err(v) => Either::Right(v),","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":48886,"byte_end":48929,"line_start":1502,"line_end":1502,"column_start":5,"column_end":48}},{"value":"/         }","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":48934,"byte_end":48947,"line_start":1503,"line_end":1503,"column_start":5,"column_end":18}},{"value":"/     });","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":48952,"byte_end":48963,"line_start":1504,"line_end":1504,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":48968,"byte_end":48971,"line_start":1505,"line_end":1505,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(successes, [1, 2]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":48976,"byte_end":49010,"line_start":1506,"line_end":1506,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(failures, [false, true]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":49015,"byte_end":49055,"line_start":1507,"line_end":1507,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":49060,"byte_end":49067,"line_start":1508,"line_end":1508,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1535},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":50895,"byte_end":50901,"line_start":1563,"line_end":1563,"column_start":8,"column_end":14},"name":"minmax","qualname":"::Itertools::minmax","value":"fn minmax(Self) -> MinMaxResult<Self::Item> where Self: Sized,\nSelf::Item: PartialOrd","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Return the minimum and maximum elements in the iterator.","sig":null,"attributes":[{"value":"/ Return the minimum and maximum elements in the iterator.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":49603,"byte_end":49663,"line_start":1528,"line_end":1528,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":49668,"byte_end":49671,"line_start":1529,"line_end":1529,"column_start":5,"column_end":8}},{"value":"/ The return type `MinMaxResult` is an enum of three variants:","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":49676,"byte_end":49740,"line_start":1530,"line_end":1530,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":49745,"byte_end":49748,"line_start":1531,"line_end":1531,"column_start":5,"column_end":8}},{"value":"/ - `NoElements` if the iterator is empty.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":49753,"byte_end":49797,"line_start":1532,"line_end":1532,"column_start":5,"column_end":49}},{"value":"/ - `OneElement(x)` if the iterator has exactly one element.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":49802,"byte_end":49864,"line_start":1533,"line_end":1533,"column_start":5,"column_end":67}},{"value":"/ - `MinMax(x, y)` is returned otherwise, where `x <= y`. Two","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":49869,"byte_end":49932,"line_start":1534,"line_end":1534,"column_start":5,"column_end":68}},{"value":"/    values are equal if and only if there is more than one","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":49937,"byte_end":49998,"line_start":1535,"line_end":1535,"column_start":5,"column_end":66}},{"value":"/    element in the iterator and all elements are equal.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":50003,"byte_end":50061,"line_start":1536,"line_end":1536,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":50066,"byte_end":50069,"line_start":1537,"line_end":1537,"column_start":5,"column_end":8}},{"value":"/ On an iterator of length `n`, `minmax` does `1.5 * n` comparisons,","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":50074,"byte_end":50144,"line_start":1538,"line_end":1538,"column_start":5,"column_end":75}},{"value":"/ and so is faster than calling `min` and `max` separately which does","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":50149,"byte_end":50220,"line_start":1539,"line_end":1539,"column_start":5,"column_end":76}},{"value":"/ `2 * n` comparisons.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":50225,"byte_end":50249,"line_start":1540,"line_end":1540,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":50254,"byte_end":50257,"line_start":1541,"line_end":1541,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":50262,"byte_end":50276,"line_start":1542,"line_end":1542,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":50281,"byte_end":50284,"line_start":1543,"line_end":1543,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":50289,"byte_end":50296,"line_start":1544,"line_end":1544,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":50301,"byte_end":50330,"line_start":1545,"line_end":1545,"column_start":5,"column_end":34}},{"value":"/ use itertools::MinMaxResult::{NoElements, OneElement, MinMax};","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":50335,"byte_end":50401,"line_start":1546,"line_end":1546,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":50406,"byte_end":50409,"line_start":1547,"line_end":1547,"column_start":5,"column_end":8}},{"value":"/ let a: [i32; 0] = [];","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":50414,"byte_end":50439,"line_start":1548,"line_end":1548,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().minmax(), NoElements);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":50444,"byte_end":50490,"line_start":1549,"line_end":1549,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":50495,"byte_end":50498,"line_start":1550,"line_end":1550,"column_start":5,"column_end":8}},{"value":"/ let a = [1];","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":50503,"byte_end":50519,"line_start":1551,"line_end":1551,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(a.iter().minmax(), OneElement(&1));","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":50524,"byte_end":50574,"line_start":1552,"line_end":1552,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":50579,"byte_end":50582,"line_start":1553,"line_end":1553,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 4, 5];","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":50587,"byte_end":50615,"line_start":1554,"line_end":1554,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(a.iter().minmax(), MinMax(&1, &5));","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":50620,"byte_end":50670,"line_start":1555,"line_end":1555,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":50675,"byte_end":50678,"line_start":1556,"line_end":1556,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 1, 1, 1];","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":50683,"byte_end":50708,"line_start":1557,"line_end":1557,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().minmax(), MinMax(&1, &1));","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":50713,"byte_end":50763,"line_start":1558,"line_end":1558,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":50768,"byte_end":50775,"line_start":1559,"line_end":1559,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":50780,"byte_end":50783,"line_start":1560,"line_end":1560,"column_start":5,"column_end":8}},{"value":"/ The elements can be floats but no particular result is guaranteed","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":50788,"byte_end":50857,"line_start":1561,"line_end":1561,"column_start":5,"column_end":74}},{"value":"/ if an element is NaN.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":50862,"byte_end":50887,"line_start":1562,"line_end":1562,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1538},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":51597,"byte_end":51610,"line_start":1580,"line_end":1580,"column_start":8,"column_end":21},"name":"minmax_by_key","qualname":"::Itertools::minmax_by_key","value":"fn minmax_by_key<K, F>(Self, F) -> MinMaxResult<Self::Item> where Self: Sized,\nK: PartialOrd, F: for<'_> FnMut(&'_ Self::Item) -> K","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Return the minimum and maximum element of an iterator, as determined by\n the specified function.","sig":null,"attributes":[{"value":"/ Return the minimum and maximum element of an iterator, as determined by","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":51065,"byte_end":51140,"line_start":1569,"line_end":1569,"column_start":5,"column_end":80}},{"value":"/ the specified function.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":51145,"byte_end":51172,"line_start":1570,"line_end":1570,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":51177,"byte_end":51180,"line_start":1571,"line_end":1571,"column_start":5,"column_end":8}},{"value":"/ The return value is a variant of `MinMaxResult` like for `minmax()`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":51185,"byte_end":51257,"line_start":1572,"line_end":1572,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":51262,"byte_end":51265,"line_start":1573,"line_end":1573,"column_start":5,"column_end":8}},{"value":"/ For the minimum, the first minimal element is returned.  For the maximum,","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":51270,"byte_end":51347,"line_start":1574,"line_end":1574,"column_start":5,"column_end":82}},{"value":"/ the last maximal element wins.  This matches the behavior of the standard","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":51352,"byte_end":51429,"line_start":1575,"line_end":1575,"column_start":5,"column_end":82}},{"value":"/ `Iterator::min()` and `Iterator::max()` methods.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":51434,"byte_end":51486,"line_start":1576,"line_end":1576,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":51491,"byte_end":51494,"line_start":1577,"line_end":1577,"column_start":5,"column_end":8}},{"value":"/ The keys can be floats but no particular result is guaranteed","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":51499,"byte_end":51564,"line_start":1578,"line_end":1578,"column_start":5,"column_end":70}},{"value":"/ if a key is NaN.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":51569,"byte_end":51589,"line_start":1579,"line_end":1579,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1542},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":52248,"byte_end":52257,"line_start":1594,"line_end":1594,"column_start":8,"column_end":17},"name":"minmax_by","qualname":"::Itertools::minmax_by","value":"fn minmax_by<F>(Self, F) -> MinMaxResult<Self::Item> where Self: Sized,\nF: for<'_, '_> FnMut(&'_ Self::Item, &'_ Self::Item) -> Ordering","parent":{"krate":0,"index":1431},"children":[],"decl_id":null,"docs":" Return the minimum and maximum element of an iterator, as determined by\n the specified comparison function.","sig":null,"attributes":[{"value":"/ Return the minimum and maximum element of an iterator, as determined by","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":51808,"byte_end":51883,"line_start":1586,"line_end":1586,"column_start":5,"column_end":80}},{"value":"/ the specified comparison function.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":51888,"byte_end":51926,"line_start":1587,"line_end":1587,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":51931,"byte_end":51934,"line_start":1588,"line_end":1588,"column_start":5,"column_end":8}},{"value":"/ The return value is a variant of `MinMaxResult` like for `minmax()`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":51939,"byte_end":52011,"line_start":1589,"line_end":1589,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":52016,"byte_end":52019,"line_start":1590,"line_end":1590,"column_start":5,"column_end":8}},{"value":"/ For the minimum, the first minimal element is returned.  For the maximum,","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":52024,"byte_end":52101,"line_start":1591,"line_end":1591,"column_start":5,"column_end":82}},{"value":"/ the last maximal element wins.  This matches the behavior of the standard","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":52106,"byte_end":52183,"line_start":1592,"line_end":1592,"column_start":5,"column_end":82}},{"value":"/ `Iterator::min()` and `Iterator::max()` methods.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":52188,"byte_end":52240,"line_start":1593,"line_end":1593,"column_start":5,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":1548},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":52970,"byte_end":52975,"line_start":1618,"line_end":1618,"column_start":8,"column_end":13},"name":"equal","qualname":"::equal","value":"fn equal<I, J>(I, J) -> bool where I: IntoIterator, J: IntoIterator,\nI::Item: PartialEq<J::Item>","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if both iterators produce equal sequences\n (elements pairwise equal and sequences of the same length),\n `false` otherwise.","sig":null,"attributes":[{"value":"/ Return `true` if both iterators produce equal sequences","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":52589,"byte_end":52648,"line_start":1607,"line_end":1607,"column_start":1,"column_end":60}},{"value":"/ (elements pairwise equal and sequences of the same length),","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":52649,"byte_end":52712,"line_start":1608,"line_end":1608,"column_start":1,"column_end":64}},{"value":"/ `false` otherwise.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":52713,"byte_end":52735,"line_start":1609,"line_end":1609,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":52736,"byte_end":52739,"line_start":1610,"line_end":1610,"column_start":1,"column_end":4}},{"value":"/ **Note:** the standard library method `Iterator::eq` now provides","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":52740,"byte_end":52809,"line_start":1611,"line_end":1611,"column_start":1,"column_end":70}},{"value":"/ the same functionality.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":52810,"byte_end":52837,"line_start":1612,"line_end":1612,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":52838,"byte_end":52841,"line_start":1613,"line_end":1613,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":52842,"byte_end":52849,"line_start":1614,"line_end":1614,"column_start":1,"column_end":8}},{"value":"/ assert!(itertools::equal(vec![1, 2, 3], 1..4));","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":52850,"byte_end":52901,"line_start":1615,"line_end":1615,"column_start":1,"column_end":52}},{"value":"/ assert!(!itertools::equal(&[0, 0], &[0, 0, 0]));","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":52902,"byte_end":52954,"line_start":1616,"line_end":1616,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":52955,"byte_end":52962,"line_start":1617,"line_end":1617,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1551},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":53803,"byte_end":53815,"line_start":1646,"line_end":1646,"column_start":8,"column_end":20},"name":"assert_equal","qualname":"::assert_equal","value":"fn assert_equal<I, J>(I, J) where I: IntoIterator, J: IntoIterator,\nI::Item: fmt::Debug + PartialEq<J::Item>, J::Item: fmt::Debug","parent":null,"children":[],"decl_id":null,"docs":" Assert that two iterators produce equal sequences, with the same\n semantics as *equal(a, b)*.","sig":null,"attributes":[{"value":"/ Assert that two iterators produce equal sequences, with the same","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":53421,"byte_end":53489,"line_start":1636,"line_end":1636,"column_start":1,"column_end":69}},{"value":"/ semantics as *equal(a, b)*.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":53490,"byte_end":53521,"line_start":1637,"line_end":1637,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":53522,"byte_end":53525,"line_start":1638,"line_end":1638,"column_start":1,"column_end":4}},{"value":"/ **Panics** on assertion failure with a message that shows the","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":53526,"byte_end":53591,"line_start":1639,"line_end":1639,"column_start":1,"column_end":66}},{"value":"/ two iteration elements.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":53592,"byte_end":53619,"line_start":1640,"line_end":1640,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":53620,"byte_end":53623,"line_start":1641,"line_end":1641,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":53624,"byte_end":53637,"line_start":1642,"line_end":1642,"column_start":1,"column_end":14}},{"value":"/ assert_equal(\"exceed\".split('c'), \"excess\".split('c'));","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":53638,"byte_end":53697,"line_start":1643,"line_end":1643,"column_start":1,"column_end":60}},{"value":"/ // ^PANIC: panicked at 'Failed assertion Some(\"eed\") == Some(\"ess\") for iteration 1',","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":53698,"byte_end":53787,"line_start":1644,"line_end":1644,"column_start":1,"column_end":90}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":53788,"byte_end":53795,"line_start":1645,"line_end":1645,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1554},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":55042,"byte_end":55051,"line_start":1688,"line_end":1688,"column_start":8,"column_end":17},"name":"partition","qualname":"::partition","value":"fn partition<'a, A, I, F>(I, F) -> usize where A: 'a, I: IntoIterator<Item =\n&'a mut A>, I::IntoIter: DoubleEndedIterator, F: for<'_> FnMut(&'_ A) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Partition a sequence using predicate `pred` so that elements\n that map to `true` are placed before elements which map to `false`.","sig":null,"attributes":[{"value":"/ Partition a sequence using predicate `pred` so that elements","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":54503,"byte_end":54567,"line_start":1671,"line_end":1671,"column_start":1,"column_end":65}},{"value":"/ that map to `true` are placed before elements which map to `false`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":54568,"byte_end":54639,"line_start":1672,"line_end":1672,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":54640,"byte_end":54643,"line_start":1673,"line_end":1673,"column_start":1,"column_end":4}},{"value":"/ The order within the partitions is arbitrary.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":54644,"byte_end":54693,"line_start":1674,"line_end":1674,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":54694,"byte_end":54697,"line_start":1675,"line_end":1675,"column_start":1,"column_end":4}},{"value":"/ Return the index of the split point.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":54698,"byte_end":54738,"line_start":1676,"line_end":1676,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":54739,"byte_end":54742,"line_start":1677,"line_end":1677,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":54743,"byte_end":54750,"line_start":1678,"line_end":1678,"column_start":1,"column_end":8}},{"value":"/ use itertools::partition;","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":54751,"byte_end":54780,"line_start":1679,"line_end":1679,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":54781,"byte_end":54784,"line_start":1680,"line_end":1680,"column_start":1,"column_end":4}},{"value":"/ # // use repeated numbers to not promise any ordering","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":54785,"byte_end":54842,"line_start":1681,"line_end":1681,"column_start":1,"column_end":58}},{"value":"/ let mut data = [7, 1, 1, 7, 1, 1, 7];","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":54843,"byte_end":54884,"line_start":1682,"line_end":1682,"column_start":1,"column_end":42}},{"value":"/ let split_index = partition(&mut data, |elt| *elt >= 3);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":54885,"byte_end":54945,"line_start":1683,"line_end":1683,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":54946,"byte_end":54949,"line_start":1684,"line_end":1684,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(data, [7, 7, 7, 1, 1, 1, 1]);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":54950,"byte_end":54994,"line_start":1685,"line_end":1685,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(split_index, 3);","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":54995,"byte_end":55026,"line_start":1686,"line_end":1686,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":55027,"byte_end":55034,"line_start":1687,"line_end":1687,"column_start":1,"column_end":8}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2431},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":55972,"byte_end":55980,"line_start":1718,"line_end":1718,"column_start":5,"column_end":13},"name":"Continue","qualname":"::FoldWhile::Continue","value":"FoldWhile::Continue(T)","parent":{"krate":0,"index":2429},"children":[],"decl_id":null,"docs":" Continue folding with this value\n","sig":null,"attributes":[{"value":"/ Continue folding with this value","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":55931,"byte_end":55967,"line_start":1717,"line_end":1717,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":2433},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":55981,"byte_end":55982,"line_start":1718,"line_end":1718,"column_start":14,"column_end":15},"name":"0","qualname":"::FoldWhile::Continue::0","value":"T","parent":{"krate":0,"index":2431},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2434},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":56041,"byte_end":56045,"line_start":1720,"line_end":1720,"column_start":5,"column_end":9},"name":"Done","qualname":"::FoldWhile::Done","value":"FoldWhile::Done(T)","parent":{"krate":0,"index":2429},"children":[],"decl_id":null,"docs":" Fold is complete and will return this value\n","sig":null,"attributes":[{"value":"/ Fold is complete and will return this value","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":55989,"byte_end":56036,"line_start":1719,"line_end":1719,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":2436},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":56046,"byte_end":56047,"line_start":1720,"line_end":1720,"column_start":10,"column_end":11},"name":"0","qualname":"::FoldWhile::Done::0","value":"T","parent":{"krate":0,"index":2434},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2429},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":55912,"byte_end":55921,"line_start":1716,"line_end":1716,"column_start":10,"column_end":19},"name":"FoldWhile","qualname":"::FoldWhile","value":"enum FoldWhile<T> { Continue(T), Done(T), }","parent":null,"children":[{"krate":0,"index":2431},{"krate":0,"index":2434}],"decl_id":null,"docs":" An enum used for controlling the execution of `.fold_while()`.","sig":null,"attributes":[{"value":"/ An enum used for controlling the execution of `.fold_while()`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":55714,"byte_end":55780,"line_start":1712,"line_end":1712,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":55781,"byte_end":55784,"line_start":1713,"line_end":1713,"column_start":1,"column_end":4}},{"value":"/ See [`.fold_while()`](trait.Itertools.html#method.fold_while) for more information.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":55785,"byte_end":55872,"line_start":1714,"line_end":1714,"column_start":1,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1561},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":56137,"byte_end":56147,"line_start":1725,"line_end":1725,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<FoldWhile<T>>::into_inner","value":"fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value in the continue or done.\n","sig":null,"attributes":[{"value":"/ Return the value in the continue or done.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":56080,"byte_end":56125,"line_start":1724,"line_end":1724,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1562},"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":56340,"byte_end":56347,"line_start":1732,"line_end":1732,"column_start":12,"column_end":19},"name":"is_done","qualname":"<FoldWhile<T>>::is_done","value":"fn is_done<'_>(&'_ Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if `self` is `Done`, false if it is `Continue`.\n","sig":null,"attributes":[{"value":"/ Return true if `self` is `Done`, false if it is `Continue`.","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":56265,"byte_end":56328,"line_start":1731,"line_end":1731,"column_start":5,"column_end":68}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/multipeek.rs","byte_start":95228,"byte_end":95237,"line_start":29,"line_end":29,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":273}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/multipeek.rs","byte_start":95390,"byte_end":95399,"line_start":38,"line_end":38,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":276}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/multipeek.rs","byte_start":96040,"byte_end":96049,"line_start":60,"line_end":60,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/multipeek.rs","byte_start":96473,"byte_end":96482,"line_start":80,"line_end":80,"column_start":31,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":58516,"byte_end":58526,"line_start":66,"line_end":66,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":59863,"byte_end":59881,"line_start":121,"line_end":121,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":62131,"byte_end":62138,"line_start":206,"line_end":206,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":62757,"byte_end":62764,"line_start":231,"line_end":231,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":321}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":64305,"byte_end":64313,"line_start":293,"line_end":293,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":64815,"byte_end":64823,"line_start":314,"line_end":314,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":65973,"byte_end":65980,"line_start":364,"line_end":364,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":344}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":68338,"byte_end":68346,"line_start":438,"line_end":438,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1646}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":68574,"byte_end":68582,"line_start":447,"line_end":447,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":69548,"byte_end":69552,"line_start":490,"line_end":490,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":70150,"byte_end":70154,"line_start":517,"line_end":517,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":70370,"byte_end":70379,"line_start":532,"line_end":532,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":380}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":70611,"byte_end":70620,"line_start":543,"line_end":543,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":384},{"krate":0,"index":386}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":72049,"byte_end":72054,"line_start":592,"line_end":592,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":72291,"byte_end":72296,"line_start":603,"line_end":603,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1657}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":73102,"byte_end":73107,"line_start":635,"line_end":635,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":407}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":73871,"byte_end":73878,"line_start":665,"line_end":665,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1658}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":74403,"byte_end":74410,"line_start":687,"line_end":687,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":426}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":74678,"byte_end":74685,"line_start":699,"line_end":699,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":433}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":75145,"byte_end":75157,"line_start":723,"line_end":723,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":436},{"krate":0,"index":438}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":76317,"byte_end":76325,"line_start":764,"line_end":764,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":447}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":76494,"byte_end":76502,"line_start":773,"line_end":773,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1669}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":76889,"byte_end":76897,"line_start":793,"line_end":793,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":77456,"byte_end":77461,"line_start":817,"line_end":817,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":465}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":77825,"byte_end":77830,"line_start":838,"line_end":838,"column_start":24,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1670}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":77963,"byte_end":77968,"line_start":845,"line_end":845,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":475},{"krate":0,"index":476}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":79103,"byte_end":79115,"line_start":888,"line_end":888,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1671}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":79452,"byte_end":79464,"line_start":901,"line_end":901,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":499}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":80489,"byte_end":80498,"line_start":942,"line_end":942,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":81733,"byte_end":81750,"line_start":992,"line_end":992,"column_start":25,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":517},{"krate":0,"index":518}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":82002,"byte_end":82019,"line_start":1008,"line_end":1008,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":521}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":82137,"byte_end":82154,"line_start":1014,"line_end":1014,"column_start":32,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":524},{"krate":0,"index":525}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":84514,"byte_end":84524,"line_start":1096,"line_end":1096,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":85460,"byte_end":85470,"line_start":1142,"line_end":1142,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":539},{"krate":0,"index":540}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":85982,"byte_end":85994,"line_start":1163,"line_end":1163,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1780}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":86657,"byte_end":86669,"line_start":1194,"line_end":1194,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":554},{"krate":0,"index":555}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":88517,"byte_end":88525,"line_start":1259,"line_end":1259,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1793}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":88957,"byte_end":88965,"line_start":1279,"line_end":1279,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":568},{"krate":0,"index":569},{"krate":0,"index":570}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":89648,"byte_end":89654,"line_start":1307,"line_end":1307,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":575}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":90667,"byte_end":90673,"line_start":1343,"line_end":1343,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1800}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":91433,"byte_end":91440,"line_start":1380,"line_end":1380,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":586},{"krate":0,"index":587},{"krate":0,"index":588}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":92939,"byte_end":92949,"line_start":1434,"line_end":1434,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":609},{"krate":0,"index":610},{"krate":0,"index":612}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":93770,"byte_end":93779,"line_start":1470,"line_end":1470,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":627}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":94268,"byte_end":94277,"line_start":1492,"line_end":1492,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":631}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/cons_tuples_impl.rs","byte_start":103783,"byte_end":103793,"line_start":50,"line_end":50,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":721}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/format.rs","byte_start":108239,"byte_end":108249,"line_start":49,"line_end":49,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":777}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/format.rs","byte_start":108998,"byte_end":109004,"line_start":73,"line_end":73,"column_start":13,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":781}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":110402,"byte_end":110403,"line_start":10,"line_end":10,"column_start":46,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":804},{"krate":0,"index":805}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":110691,"byte_end":110701,"line_start":28,"line_end":28,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":811}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":110897,"byte_end":110907,"line_start":39,"line_end":39,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":815},{"krate":0,"index":816}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":111949,"byte_end":111959,"line_start":76,"line_end":76,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":836},{"krate":0,"index":837},{"krate":0,"index":841},{"krate":0,"index":842},{"krate":0,"index":843},{"krate":0,"index":844},{"krate":0,"index":845}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":118737,"byte_end":118747,"line_start":262,"line_end":262,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":850}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":120485,"byte_end":120492,"line_start":318,"line_end":318,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":865},{"krate":0,"index":866}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":121625,"byte_end":121631,"line_start":363,"line_end":363,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":886},{"krate":0,"index":887}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":122541,"byte_end":122546,"line_start":399,"line_end":399,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":902}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":122717,"byte_end":122722,"line_start":408,"line_end":408,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":908},{"krate":0,"index":909}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":124480,"byte_end":124490,"line_start":471,"line_end":471,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":918},{"krate":0,"index":919}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":125402,"byte_end":125408,"line_start":512,"line_end":512,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":933},{"krate":0,"index":934}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":126167,"byte_end":126172,"line_start":545,"line_end":545,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":945}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":126331,"byte_end":126336,"line_start":554,"line_end":554,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":949},{"krate":0,"index":950}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/intersperse.rs","byte_start":127343,"byte_end":127354,"line_start":33,"line_end":33,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":962},{"krate":0,"index":963},{"krate":0,"index":964}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":128662,"byte_end":128670,"line_start":31,"line_end":31,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":982},{"krate":0,"index":984},{"krate":0,"index":985}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":129566,"byte_end":129574,"line_start":62,"line_end":62,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":988}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":131941,"byte_end":131947,"line_start":143,"line_end":143,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1004}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":132116,"byte_end":132122,"line_start":152,"line_end":152,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1007},{"krate":0,"index":1008},{"krate":0,"index":1010}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":133924,"byte_end":133932,"line_start":212,"line_end":212,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1025},{"krate":0,"index":1026},{"krate":0,"index":1028}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/minmax.rs","byte_start":135100,"byte_end":135112,"line_start":17,"line_end":17,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1033}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/pad_tail.rs","byte_start":139223,"byte_end":139231,"line_start":31,"line_end":31,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1052},{"krate":0,"index":1053},{"krate":0,"index":1054}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/pad_tail.rs","byte_start":139994,"byte_end":140002,"line_start":62,"line_end":62,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1058}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/pad_tail.rs","byte_start":140459,"byte_end":140467,"line_start":79,"line_end":79,"column_start":34,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/peeking_take_while.rs","byte_start":141335,"byte_end":141343,"line_start":22,"line_end":22,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1077}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/peeking_take_while.rs","byte_start":141663,"byte_end":141670,"line_start":37,"line_end":37,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1081}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/peeking_take_while.rs","byte_start":142059,"byte_end":142067,"line_start":55,"line_end":55,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1085}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/peeking_take_while.rs","byte_start":142948,"byte_end":142964,"line_start":94,"line_end":94,"column_start":29,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1100},{"krate":0,"index":1101},{"krate":0,"index":1102}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":145098,"byte_end":145112,"line_start":12,"line_end":12,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1116},{"krate":0,"index":1117},{"krate":0,"index":1118}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":148902,"byte_end":148908,"line_start":52,"line_end":52,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1143}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":149043,"byte_end":149049,"line_start":59,"line_end":59,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1147},{"krate":0,"index":1148},{"krate":0,"index":1149}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":149608,"byte_end":149614,"line_start":78,"line_end":78,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1152}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/repeatn.rs","byte_start":150506,"byte_end":150513,"line_start":21,"line_end":21,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1168},{"krate":0,"index":1169},{"krate":0,"index":1170}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/repeatn.rs","byte_start":150903,"byte_end":150910,"line_start":41,"line_end":41,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1173}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/repeatn.rs","byte_start":151060,"byte_end":151067,"line_start":50,"line_end":50,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":153965,"byte_end":153975,"line_start":12,"line_end":12,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2100}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":154720,"byte_end":154730,"line_start":43,"line_end":43,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1211},{"krate":0,"index":1212},{"krate":0,"index":1213}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":156399,"byte_end":156405,"line_start":104,"line_end":104,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2101}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":156726,"byte_end":156732,"line_start":118,"line_end":118,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1225},{"krate":0,"index":1226},{"krate":0,"index":1227}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":157355,"byte_end":157362,"line_start":146,"line_end":146,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2120}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":157465,"byte_end":157472,"line_start":152,"line_end":152,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1234},{"krate":0,"index":1235},{"krate":0,"index":1236}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tee.rs","byte_start":159078,"byte_end":159081,"line_start":34,"line_end":34,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1267},{"krate":0,"index":1268},{"krate":0,"index":1269}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tee.rs","byte_start":160178,"byte_end":160181,"line_start":72,"line_end":72,"column_start":31,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":160589,"byte_end":160600,"line_start":16,"line_end":16,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1282}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":160773,"byte_end":160784,"line_start":27,"line_end":27,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1285},{"krate":0,"index":1286},{"krate":0,"index":1287}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":161450,"byte_end":161461,"line_start":55,"line_end":55,"column_start":31,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":162036,"byte_end":162042,"line_start":82,"line_end":82,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1302},{"krate":0,"index":1303}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":162254,"byte_end":162260,"line_start":93,"line_end":93,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1307}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":163776,"byte_end":163788,"line_start":149,"line_end":149,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1322},{"krate":0,"index":1323}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/with_position.rs","byte_start":168188,"byte_end":168196,"line_start":41,"line_end":41,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1350}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/with_position.rs","byte_start":168475,"byte_end":168487,"line_start":53,"line_end":53,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1353},{"krate":0,"index":1354},{"krate":0,"index":1355}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/with_position.rs","byte_start":169723,"byte_end":169735,"line_start":87,"line_end":87,"column_start":31,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_eq_impl.rs","byte_start":170646,"byte_end":170651,"line_start":37,"line_end":37,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1368},{"krate":0,"index":1369},{"krate":0,"index":1370}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_eq_impl.rs","byte_start":171229,"byte_end":171234,"line_start":57,"line_end":57,"column_start":34,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_longest.rs","byte_start":172159,"byte_end":172169,"line_start":32,"line_end":32,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1407},{"krate":0,"index":1408},{"krate":0,"index":1409}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_longest.rs","byte_start":172749,"byte_end":172759,"line_start":54,"line_end":54,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1413}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_longest.rs","byte_start":173510,"byte_end":173520,"line_start":74,"line_end":74,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Inherent","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/ziptuple.rs","byte_start":174387,"byte_end":174390,"line_start":9,"line_end":9,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1423}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":52564,"byte_end":52565,"line_start":1605,"line_end":1605,"column_start":31,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Inherent","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":56061,"byte_end":56070,"line_start":1723,"line_end":1723,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1561},{"krate":0,"index":1562}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":2299,"byte_end":2303,"line_start":90,"line_end":90,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":632}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/multipeek.rs","byte_start":95228,"byte_end":95237,"line_start":29,"line_end":29,"column_start":9,"column_end":18},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1563},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/multipeek.rs","byte_start":95390,"byte_end":95399,"line_start":38,"line_end":38,"column_start":19,"column_end":28},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1563},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/multipeek.rs","byte_start":96040,"byte_end":96049,"line_start":60,"line_end":60,"column_start":22,"column_end":31},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1563},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/multipeek.rs","byte_start":96473,"byte_end":96482,"line_start":80,"line_end":80,"column_start":31,"column_end":40},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1563},"to":{"krate":2,"index":8474}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":58516,"byte_end":58526,"line_start":66,"line_end":66,"column_start":25,"column_end":35},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1574},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":59863,"byte_end":59881,"line_start":121,"line_end":121,"column_start":25,"column_end":43},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1588},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":62131,"byte_end":62138,"line_start":206,"line_end":206,"column_start":9,"column_end":16},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1602},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":62757,"byte_end":62764,"line_start":231,"line_end":231,"column_start":22,"column_end":29},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1602},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":64305,"byte_end":64313,"line_start":293,"line_end":293,"column_start":19,"column_end":27},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1612},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":64815,"byte_end":64823,"line_start":314,"line_end":314,"column_start":32,"column_end":40},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1612},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":65973,"byte_end":65980,"line_start":364,"line_end":364,"column_start":25,"column_end":32},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1622},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":68338,"byte_end":68346,"line_start":438,"line_end":438,"column_start":27,"column_end":35},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1637},"to":{"krate":2,"index":10295}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":68574,"byte_end":68582,"line_start":447,"line_end":447,"column_start":28,"column_end":36},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1637},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":69548,"byte_end":69552,"line_start":490,"line_end":490,"column_start":22,"column_end":26},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1647},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":70150,"byte_end":70154,"line_start":517,"line_end":517,"column_start":31,"column_end":35},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1647},"to":{"krate":2,"index":8474}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":70370,"byte_end":70379,"line_start":532,"line_end":532,"column_start":22,"column_end":31},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":371},"to":{"krate":2,"index":2882}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":70611,"byte_end":70620,"line_start":543,"line_end":543,"column_start":12,"column_end":21},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":371},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":72049,"byte_end":72054,"line_start":592,"line_end":592,"column_start":22,"column_end":27},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":387},"to":{"krate":2,"index":2882}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":72291,"byte_end":72296,"line_start":603,"line_end":603,"column_start":27,"column_end":32},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":387},"to":{"krate":2,"index":10295}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":73102,"byte_end":73107,"line_start":635,"line_end":635,"column_start":25,"column_end":30},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":387},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":73871,"byte_end":73878,"line_start":665,"line_end":665,"column_start":30,"column_end":37},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":408},"to":{"krate":2,"index":10295}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":74403,"byte_end":74410,"line_start":687,"line_end":687,"column_start":25,"column_end":32},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":408},"to":{"krate":2,"index":2882}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":74678,"byte_end":74685,"line_start":699,"line_end":699,"column_start":28,"column_end":35},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":408},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":75145,"byte_end":75157,"line_start":723,"line_end":723,"column_start":9,"column_end":21},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1659},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":76317,"byte_end":76325,"line_start":764,"line_end":764,"column_start":36,"column_end":44},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":439},"to":{"krate":2,"index":2882}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":76494,"byte_end":76502,"line_start":773,"line_end":773,"column_start":27,"column_end":35},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":439},"to":{"krate":2,"index":10295}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":76889,"byte_end":76897,"line_start":793,"line_end":793,"column_start":25,"column_end":33},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":439},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":77456,"byte_end":77461,"line_start":817,"line_end":817,"column_start":26,"column_end":31},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":460},"to":{"krate":2,"index":2882}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":77825,"byte_end":77830,"line_start":838,"line_end":838,"column_start":24,"column_end":29},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":460},"to":{"krate":2,"index":10295}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":77963,"byte_end":77968,"line_start":845,"line_end":845,"column_start":22,"column_end":27},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":460},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":79103,"byte_end":79115,"line_start":888,"line_end":888,"column_start":31,"column_end":43},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":480},"to":{"krate":2,"index":10295}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":79452,"byte_end":79464,"line_start":901,"line_end":901,"column_start":29,"column_end":41},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":480},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":80489,"byte_end":80498,"line_start":942,"line_end":942,"column_start":25,"column_end":34},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1672},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":81294,"byte_end":81299,"line_start":975,"line_end":975,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":3268},"to":{"krate":0,"index":508}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":81733,"byte_end":81750,"line_start":992,"line_end":992,"column_start":25,"column_end":42},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1681},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":82002,"byte_end":82019,"line_start":1008,"line_end":1008,"column_start":21,"column_end":38},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1691},"to":{"krate":2,"index":3169}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":82137,"byte_end":82154,"line_start":1014,"line_end":1014,"column_start":32,"column_end":49},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1691},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":84514,"byte_end":84524,"line_start":1096,"line_end":1096,"column_start":9,"column_end":19},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1772},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":85460,"byte_end":85470,"line_start":1142,"line_end":1142,"column_start":26,"column_end":36},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1772},"to":{"krate":2,"index":3571}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":85982,"byte_end":85994,"line_start":1163,"line_end":1163,"column_start":24,"column_end":36},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":542},"to":{"krate":2,"index":10295}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":86657,"byte_end":86669,"line_start":1194,"line_end":1194,"column_start":22,"column_end":34},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":542},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":88517,"byte_end":88525,"line_start":1259,"line_end":1259,"column_start":30,"column_end":38},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1781},"to":{"krate":2,"index":10295}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":88957,"byte_end":88965,"line_start":1279,"line_end":1279,"column_start":28,"column_end":36},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1781},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":89648,"byte_end":89654,"line_start":1307,"line_end":1307,"column_start":22,"column_end":28},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1794},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":90667,"byte_end":90673,"line_start":1343,"line_end":1343,"column_start":24,"column_end":30},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1794},"to":{"krate":2,"index":10295}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":91433,"byte_end":91440,"line_start":1380,"line_end":1380,"column_start":25,"column_end":32},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1801},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":92939,"byte_end":92949,"line_start":1434,"line_end":1434,"column_start":34,"column_end":44},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":592},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":93770,"byte_end":93779,"line_start":1470,"line_end":1470,"column_start":25,"column_end":34},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":613},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/adaptors/mod.rs","byte_start":94268,"byte_end":94277,"line_start":1492,"line_end":1492,"column_start":36,"column_end":45},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":613},"to":{"krate":2,"index":8449}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/cons_tuples_impl.rs","byte_start":103783,"byte_end":103793,"line_start":50,"line_end":50,"column_start":22,"column_end":32},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":714},"to":{"krate":2,"index":2882}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/format.rs","byte_start":108239,"byte_end":108249,"line_start":49,"line_end":49,"column_start":33,"column_end":43},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":760},"to":{"krate":2,"index":10302}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/format.rs","byte_start":108998,"byte_end":109004,"line_start":73,"line_end":73,"column_start":13,"column_end":19},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1964},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":110402,"byte_end":110403,"line_start":10,"line_end":10,"column_start":46,"column_end":47},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":803},"to":{"krate":0,"index":795}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":110691,"byte_end":110701,"line_start":28,"line_end":28,"column_start":6,"column_end":16},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":806},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":110897,"byte_end":110907,"line_start":39,"line_end":39,"column_start":32,"column_end":42},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":806},"to":{"krate":0,"index":795}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":111949,"byte_end":111959,"line_start":76,"line_end":76,"column_start":15,"column_end":25},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":817},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":118737,"byte_end":118747,"line_start":262,"line_end":262,"column_start":15,"column_end":25},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":817},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":120485,"byte_end":120492,"line_start":318,"line_end":318,"column_start":15,"column_end":22},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":851},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":121625,"byte_end":121631,"line_start":363,"line_end":363,"column_start":32,"column_end":38},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":875},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":122541,"byte_end":122546,"line_start":399,"line_end":399,"column_start":28,"column_end":33},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":889},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":122717,"byte_end":122722,"line_start":408,"line_end":408,"column_start":32,"column_end":37},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":889},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":124480,"byte_end":124490,"line_start":471,"line_end":471,"column_start":9,"column_end":19},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":912},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":125402,"byte_end":125408,"line_start":512,"line_end":512,"column_start":26,"column_end":32},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":926},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":126167,"byte_end":126172,"line_start":545,"line_end":545,"column_start":22,"column_end":27},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":936},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/groupbylazy.rs","byte_start":126331,"byte_end":126336,"line_start":554,"line_end":554,"column_start":26,"column_end":31},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":936},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/intersperse.rs","byte_start":127343,"byte_end":127354,"line_start":33,"line_end":33,"column_start":22,"column_end":33},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":2011},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":128662,"byte_end":128670,"line_start":31,"line_end":31,"column_start":9,"column_end":17},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":976},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":129566,"byte_end":129574,"line_start":62,"line_end":62,"column_start":19,"column_end":27},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":976},"to":{"krate":2,"index":2882}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":131941,"byte_end":131947,"line_start":143,"line_end":143,"column_start":19,"column_end":25},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":995},"to":{"krate":2,"index":2882}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":132116,"byte_end":132122,"line_start":152,"line_end":152,"column_start":22,"column_end":28},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":995},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/kmerge_impl.rs","byte_start":133924,"byte_end":133932,"line_start":212,"line_end":212,"column_start":25,"column_end":33},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1012},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/minmax.rs","byte_start":135100,"byte_end":135112,"line_start":17,"line_end":17,"column_start":16,"column_end":28},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":2019},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/pad_tail.rs","byte_start":139223,"byte_end":139231,"line_start":31,"line_end":31,"column_start":25,"column_end":33},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":2044},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/pad_tail.rs","byte_start":139994,"byte_end":140002,"line_start":62,"line_end":62,"column_start":36,"column_end":44},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":2044},"to":{"krate":2,"index":8449}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/pad_tail.rs","byte_start":140459,"byte_end":140467,"line_start":79,"line_end":79,"column_start":34,"column_end":42},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":2044},"to":{"krate":2,"index":8474}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/peeking_take_while.rs","byte_start":141021,"byte_end":141029,"line_start":14,"line_end":14,"column_start":25,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":8603},"to":{"krate":0,"index":1072}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/peeking_take_while.rs","byte_start":141335,"byte_end":141343,"line_start":22,"line_end":22,"column_start":25,"column_end":33},"kind":{"Impl":{"id":74}},"from":{"krate":2,"index":40089},"to":{"krate":0,"index":1072}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/peeking_take_while.rs","byte_start":141663,"byte_end":141670,"line_start":37,"line_end":37,"column_start":25,"column_end":32},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1602},"to":{"krate":0,"index":1072}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/peeking_take_while.rs","byte_start":142059,"byte_end":142067,"line_start":55,"line_end":55,"column_start":25,"column_end":33},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1612},"to":{"krate":0,"index":1072}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/peeking_take_while.rs","byte_start":142948,"byte_end":142964,"line_start":94,"line_end":94,"column_start":29,"column_end":45},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1087},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/process_results_impl.rs","byte_start":145098,"byte_end":145112,"line_start":12,"line_end":12,"column_start":32,"column_end":46},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1105},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":148902,"byte_end":148908,"line_start":52,"line_end":52,"column_start":19,"column_end":25},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1136},"to":{"krate":2,"index":2882}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":149043,"byte_end":149049,"line_start":59,"line_end":59,"column_start":25,"column_end":31},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1136},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/rciter_impl.rs","byte_start":149608,"byte_end":149614,"line_start":78,"line_end":78,"column_start":33,"column_end":39},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1136},"to":{"krate":2,"index":8449}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/repeatn.rs","byte_start":150506,"byte_end":150513,"line_start":21,"line_end":21,"column_start":22,"column_end":29},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1160},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/repeatn.rs","byte_start":150903,"byte_end":150910,"line_start":41,"line_end":41,"column_start":33,"column_end":40},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1160},"to":{"krate":2,"index":8449}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/repeatn.rs","byte_start":151060,"byte_end":151067,"line_start":50,"line_end":50,"column_start":31,"column_end":38},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1160},"to":{"krate":2,"index":8474}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":153965,"byte_end":153975,"line_start":12,"line_end":12,"column_start":24,"column_end":34},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1201},"to":{"krate":2,"index":10295}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":154720,"byte_end":154730,"line_start":43,"line_end":43,"column_start":25,"column_end":35},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1201},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":156399,"byte_end":156405,"line_start":104,"line_end":104,"column_start":28,"column_end":34},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":2102},"to":{"krate":2,"index":10295}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":156726,"byte_end":156732,"line_start":118,"line_end":118,"column_start":29,"column_end":35},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":2102},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":157355,"byte_end":157362,"line_start":146,"line_end":146,"column_start":28,"column_end":35},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":2111},"to":{"krate":2,"index":10295}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/sources.rs","byte_start":157465,"byte_end":157472,"line_start":152,"line_end":152,"column_start":26,"column_end":33},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":2111},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tee.rs","byte_start":159078,"byte_end":159081,"line_start":34,"line_end":34,"column_start":22,"column_end":25},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1259},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tee.rs","byte_start":160178,"byte_end":160181,"line_start":72,"line_end":72,"column_start":31,"column_end":34},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1259},"to":{"krate":2,"index":8474}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":160589,"byte_end":160600,"line_start":16,"line_end":16,"column_start":9,"column_end":20},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1276},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":160773,"byte_end":160784,"line_start":27,"line_end":27,"column_start":22,"column_end":33},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1276},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":161450,"byte_end":161461,"line_start":55,"line_end":55,"column_start":31,"column_end":42},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1276},"to":{"krate":2,"index":8474}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":162036,"byte_end":162042,"line_start":82,"line_end":82,"column_start":25,"column_end":31},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1291},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":162254,"byte_end":162260,"line_start":93,"line_end":93,"column_start":12,"column_end":18},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1291},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":163776,"byte_end":163788,"line_start":149,"line_end":149,"column_start":25,"column_end":37},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1308},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/tuple_impl.rs","byte_start":164314,"byte_end":164319,"line_start":170,"line_end":170,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":3268},"to":{"krate":0,"index":1324}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/with_position.rs","byte_start":168188,"byte_end":168196,"line_start":41,"line_end":41,"column_start":9,"column_end":17},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":2177},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/with_position.rs","byte_start":168475,"byte_end":168487,"line_start":53,"line_end":53,"column_start":32,"column_end":44},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1342},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/with_position.rs","byte_start":169723,"byte_end":169735,"line_start":87,"line_end":87,"column_start":31,"column_end":43},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1342},"to":{"krate":2,"index":8474}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_eq_impl.rs","byte_start":170646,"byte_end":170651,"line_start":37,"line_end":37,"column_start":25,"column_end":30},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":2205},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_eq_impl.rs","byte_start":171229,"byte_end":171234,"line_start":57,"line_end":57,"column_start":34,"column_end":39},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":2205},"to":{"krate":2,"index":8474}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_longest.rs","byte_start":172159,"byte_end":172169,"line_start":32,"line_end":32,"column_start":25,"column_end":35},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":2214},"to":{"krate":2,"index":8603}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_longest.rs","byte_start":172749,"byte_end":172759,"line_start":54,"line_end":54,"column_start":36,"column_end":46},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":2214},"to":{"krate":2,"index":8449}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/zip_longest.rs","byte_start":173510,"byte_end":173520,"line_start":74,"line_end":74,"column_start":34,"column_end":44},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":2214},"to":{"krate":2,"index":8474}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/ziptuple.rs","byte_start":174387,"byte_end":174390,"line_start":9,"line_end":9,"column_start":9,"column_end":12},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":2259},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":5539,"byte_end":5547,"line_start":211,"line_end":211,"column_start":23,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":8603},"to":{"krate":0,"index":1431}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":52564,"byte_end":52565,"line_start":1605,"line_end":1605,"column_start":31,"column_end":32},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1547},"to":{"krate":0,"index":1431}},{"span":{"file_name":"/Users/oskarsigvardsson/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.6.5/src/lib.rs","byte_start":56061,"byte_end":56070,"line_start":1723,"line_end":1723,"column_start":9,"column_end":18},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":2429},"to":{"krate":4294967295,"index":4294967295}}]}